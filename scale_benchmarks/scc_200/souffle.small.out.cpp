
#include "souffle/CompiledSouffle.h"
#include <mutex>
#include "souffle/Explain.h"

extern "C" {
}

namespace souffle {
using namespace ram;
struct t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,3,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,0,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,0>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t) const {
context h;
return equalRange_2(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_1.find(t, h.hints_1);
auto fin = ind_1.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [0,1,3,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [1,0,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_3__0_1_2__1__7 {
using t_tuple = Tuple<RamDomain, 3>;
struct updater_t_btree_3__0_1_2__1__7 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[1] = new_t[1];
old_t[2] = new_t[2];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0>, updater_t_btree_3__0_1_2__1__7>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_3__0_1_2__1__7& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 3 direct b-tree index [0,1,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_7__0_1_2_3_4_5_6__127 {
using t_tuple = Tuple<RamDomain, 7>;
Table<t_tuple> dataTable;
Lock insert_lock;
using t_ind_0 = btree_set<const t_tuple*, index_utils::deref_compare<typename index_utils::comparator<0,1,2,3,4,5,6>>>;
t_ind_0 ind_0;
using iterator_0 = IterDerefWrapper<typename t_ind_0::iterator>;
using iterator = iterator_0;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
const t_tuple* masterCopy = nullptr;
{
auto lease = insert_lock.acquire();
if (contains(t, h)) return false;
masterCopy = &dataTable.insert(t);
ind_0.insert(masterCopy, h.hints_0);
}
return true;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[7];
std::copy(ramDomain, ramDomain + 7, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6) {
RamDomain data[7] = {a0,a1,a2,a3,a4,a5,a6};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(&t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(&t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator_0> equalRange_127(const t_tuple& t, context& h) const {
auto pos = find(t, h);
auto fin = end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<iterator_0> equalRange_127(const t_tuple& t) const {
context h; return equalRange_127(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
std::vector<range<iterator>> res;
for (const auto& cur : ind_0.getChunks(400)) {
    res.push_back(make_range(derefIter(cur.begin()), derefIter(cur.end())));
}
return res;
}
void purge() {
ind_0.clear();
dataTable.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 7 indirect b-tree index [0,1,2,3,4,5,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_6__0_1_2_3_4_5__63 {
using t_tuple = Tuple<RamDomain, 6>;
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4,5>>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_6__0_1_2_3_4_5__63& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t) const {
context h;
return equalRange_63(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 6 direct b-tree index [0,1,2,3,4,5]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_3_4__31 {
using t_tuple = Tuple<RamDomain, 5>;
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4>>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_3_4__31& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};

class Sf_souffle_small : public SouffleProgram {
private:
static inline bool regex_wrapper(const std::string& pattern, const std::string& text) {
   bool result = false; 
   try { result = std::regex_match(text, std::regex(pattern)); } catch(...) { 
     std::cerr << "warning: wrong pattern provided for match(\"" << pattern << "\",\"" << text << "\").\n";
}
   return result;
}
private:
static inline std::string substr_wrapper(const std::string& str, size_t idx, size_t len) {
   std::string result; 
   try { result = str.substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << (int32_t)idx << "," << (int32_t)len << ") functor.\n";
   } return result;
}
private:
static inline RamDomain wrapper_tonumber(const std::string& str) {
   RamDomain result=0; 
   try { result = stord(str); } catch(...) { 
     std::cerr << "error: wrong string provided by to_number(\"";
     std::cerr << str << "\") functor.\n";
     raise(SIGFPE);
   } return result;
}
public:
// -- initialize symbol table --
SymbolTable symTable
{
	R"_(v0,v1)_",
	R"_(Rule)_",
	R"_(Edge,v0,v1)_",
	R"_(invent_Path,v1,v2)_",
	R"_(SCC,v0,v2)_",
	R"_(SCC(v0,v1) :- 
   Rule(1381),
   Edge(v0,v1),
   invent_Path(v1,v2),
   SCC(v0,v2).)_",
	R"_(Edge,v1,v2)_",
	R"_(SCC,v2,v1)_",
	R"_(SCC,v1,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(1599),
   Edge(v1,v2),
   SCC(v2,v1),
   SCC(v1,v0).)_",
	R"_(Edge,v2,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(864),
   Edge(v2,v0),
   Edge(v1,v2).)_",
	R"_(Edge,v0,v2)_",
	R"_(invent_Path,v0,v1)_",
	R"_(SCC(v0,v1) :- 
   Rule(904),
   Edge(v0,v2),
   Edge(v2,v0),
   invent_Path(v0,v1).)_",
	R"_(invent_Path,v1,v0)_",
	R"_(invent_Path,v2,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(1702),
   invent_Path(v1,v0),
   invent_Path(v2,v0),
   invent_Path(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1997),
   invent_Path(v1,v2),
   SCC(v1,v0),
   SCC(v0,v2).)_",
	R"_(invent_Path,v0,v2)_",
	R"_(SCC,v0,v1)_",
	R"_(SCC(v0,v1) :- 
   Rule(1954),
   invent_Path(v0,v2),
   SCC(v0,v2),
   SCC(v0,v1).)_",
	R"_(Edge,v1)_",
	R"_(SCC(v0,v1) :- 
   Rule(852),
   Edge(v0,v1),
   Edge(_,v1).)_",
	R"_(Edge,v2,v1)_",
	R"_(SCC(v0,v1) :- 
   Rule(783),
   Edge(v2,v1),
   Edge(v2,v0),
   Edge(v0,v1).)_",
	R"_(invent_Path,v2,v1)_",
	R"_(SCC,v2,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(2089),
   invent_Path(v2,v1),
   SCC(v2,v1),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1891),
   invent_Path(v2,v0),
   SCC(v2,v1).)_",
	R"_(SCC,v1,v2)_",
	R"_(SCC(v0,v1) :- 
   Rule(1442),
   Edge(v0,v1),
   invent_Path(v1,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1123),
   Edge(v2,v0),
   SCC(v2,v0),
   Edge(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1386),
   Edge(v2,v0),
   invent_Path(v2,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1886),
   invent_Path(v1,v2),
   invent_Path(v2,v0),
   SCC(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1916),
   invent_Path(v0,v1),
   invent_Path(v2,v1),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1887),
   invent_Path(v1,v2),
   invent_Path(v2,v0),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1330),
   Edge(v2,v1),
   invent_Path(v2,v1),
   invent_Path(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1325),
   Edge(v2,v1),
   invent_Path(v2,v1),
   invent_Path(v2,v0).)_",
	R"_(SCC,v1)_",
	R"_(SCC(v0,v1) :- 
   Rule(2217),
   SCC(_,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1452),
   Edge(v2,v1),
   SCC(v2,v1),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1568),
   Edge(v0,v2),
   SCC(v0,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1299),
   Edge(v2,v1),
   invent_Path(v2,v1),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1789),
   invent_Path(v2,v1),
   invent_Path(v1,v2),
   invent_Path(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1269),
   Edge(v2,v0),
   invent_Path(v0,v2),
   invent_Path(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(814),
   Edge(v1,v2),
   Edge(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1677),
   invent_Path(v1,v2),
   invent_Path(v0,v1),
   invent_Path(v0,v2).)_",
	R"_(Edge,v1,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(1153),
   Edge(v2,v1),
   SCC(v2,v1),
   Edge(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1847),
   invent_Path(v2,v1),
   invent_Path(v2,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(903),
   Edge(v0,v2),
   invent_Path(v2,v0),
   Edge(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2241),
   SCC(v2,v1),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(952),
   Edge(v1,v2),
   Edge(v0,v2),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1727),
   invent_Path(v1,v2),
   invent_Path(v0,v2),
   invent_Path(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1541),
   Edge(v1,v2),
   SCC(v1,v0),
   SCC(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1505),
   Edge(v2,v0),
   SCC(v2,v0),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2024),
   invent_Path(v0,v2),
   SCC(v0,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(749),
   Edge(v2,v0),
   Edge(v0,v2),
   Edge(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1851),
   invent_Path(v1,v0),
   invent_Path(v1,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(877),
   Edge(v2,v1),
   Edge(v1,v2),
   Edge(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1793),
   invent_Path(v0,v1),
   invent_Path(v1,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(727),
   Edge(v1,v0),
   Edge(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2028),
   invent_Path(v0,v2),
   SCC(v2,v0),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1596),
   Edge(v1,v2),
   SCC(v1,v2),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1122),
   Edge(v2,v0),
   SCC(v0,v2),
   Edge(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1288),
   Edge(v0,v1),
   invent_Path(v2,v1),
   invent_Path(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1849),
   invent_Path(v0,v1),
   invent_Path(v0,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1046),
   Edge(v1,v0),
   Edge(v0,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2228),
   SCC(v1,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1683),
   invent_Path(v2,v0),
   invent_Path(v2,v1),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2012),
   invent_Path(v0,v2),
   SCC(v2,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(862),
   Edge(v2,v0),
   Edge(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1040),
   Edge(v2,v0),
   SCC(v0,v2),
   Edge(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(963),
   Edge(v0,v2),
   invent_Path(v0,v2),
   Edge(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(910),
   Edge(v1,v0),
   Edge(v0,v2),
   invent_Path(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1073),
   Edge(v0,v1),
   Edge(v2,v0),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2067),
   invent_Path(v2,v1),
   SCC(v1,v2),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(686),
   Edge(v0,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2103),
   SCC(v0,v2),
   SCC(v2,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1968),
   invent_Path(v0,v2),
   SCC(v2,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1520),
   Edge(v1,v0),
   SCC(v1,v2),
   SCC(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(967),
   Edge(v1,v2),
   Edge(v0,v2),
   invent_Path(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2059),
   invent_Path(v2,v1),
   SCC(v2,v1),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1037),
   Edge(v0,v1),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(956),
   Edge(v1,v0),
   Edge(v2,v0),
   invent_Path(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1283),
   Edge(v2,v0),
   invent_Path(v2,v0),
   invent_Path(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1099),
   Edge(v0,v2),
   Edge(v1,v2),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1639),
   invent_Path(v1,v0),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1531),
   Edge(v2,v0),
   SCC(v2,v1),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2068),
   invent_Path(v0,v1),
   SCC(_,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2237),
   SCC(v2,v1),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(837),
   Edge(v1,_),
   Edge(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1351),
   Edge(v2,v0),
   invent_Path(v2,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(665),
   Edge(v1,v2),
   Edge(v0,v2).)_",
	R"_(invent_Path,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(1802),
   invent_Path(v0,_),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(692),
   invent_Path(v0,v1),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2009),
   invent_Path(v2,v1),
   SCC(v2,v0),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2155),
   SCC(v1,v0),
   SCC(v1,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1980),
   invent_Path(v2,v0),
   SCC(v1,v0),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1409),
   Edge(v2,v1),
   invent_Path(v1,v0),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(820),
   Edge(v2,v0),
   Edge(v0,v2),
   Edge(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(778),
   Edge(v2,v0),
   Edge(v2,v1),
   Edge(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1340),
   Edge(v1,v0),
   invent_Path(v1,v0),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1573),
   Edge(v2,v0),
   SCC(v0,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(742),
   Edge(v1,v0),
   Edge(v0,v2),
   Edge(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(725),
   SCC(v1,v2),
   SCC(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2098),
   SCC(v0,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(748),
   Edge(v2,v0),
   Edge(v0,v2),
   Edge(v0,v1).)_",
	R"_(Edge,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(743),
   Edge(_,v0),
   Edge(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1985),
   invent_Path(v0,v1),
   SCC(v2,v0),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1387),
   Edge(v2,v0),
   invent_Path(v1,v0),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1543),
   Edge(v2,v1),
   SCC(v2,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2008),
   invent_Path(v1,v2),
   SCC(v0,v1),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1869),
   invent_Path(v1,v0),
   invent_Path(v2,v1),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1803),
   invent_Path(v0,v1),
   invent_Path(v2,v0),
   SCC(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1896),
   invent_Path(v0,v1),
   invent_Path(v2,v1),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(948),
   Edge(v0,v2),
   Edge(v2,v1),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1350),
   Edge(v1,v0),
   invent_Path(v0,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2052),
   invent_Path(v1,v2),
   SCC(v1,v2),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2230),
   SCC(v2,v0),
   SCC(v2,v1).)_",
	R"_(SCC,v0)_",
	R"_(SCC(v0,v1) :- 
   Rule(2118),
   SCC(v0,_),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1199),
   Edge(v2,v0),
   invent_Path(v2,v0),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1454),
   Edge(v2,v1),
   invent_Path(v2,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1551),
   Edge(v0,v1),
   SCC(v1,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(651),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1612),
   Edge(v0,v1),
   SCC(_,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(811),
   Edge(v0,v2),
   Edge(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1625),
   Edge(v1,v2),
   SCC(v2,v1),
   SCC(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1579),
   Edge(v2,v0),
   SCC(v2,v0),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1779),
   invent_Path(v2,v1),
   invent_Path(v1,v2),
   invent_Path(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1947),
   invent_Path(v1,v0),
   SCC(v1,v0),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(988),
   Edge(v1,_),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1131),
   Edge(v2,v0),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1293),
   Edge(v1,v2),
   invent_Path(v1,v2),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1407),
   Edge(v0,v2),
   invent_Path(v0,v1),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(714),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1011),
   Edge(v1,v2),
   Edge(v2,v1),
   invent_Path(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2064),
   invent_Path(v1,v0),
   SCC(v1,v2),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2156),
   SCC(v0,v2),
   SCC(v2,v1),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1471),
   Edge(v1,v2),
   SCC(v2,v1),
   invent_Path(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1752),
   invent_Path(v1,v0),
   invent_Path(v2,v1),
   invent_Path(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1479),
   Edge(v2,v1),
   SCC(v1,v2),
   invent_Path(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1602),
   Edge(v1,v2),
   SCC(v2,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1379),
   Edge(v2,v0),
   invent_Path(v2,v1),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1662),
   invent_Path(v0,_),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1462),
   Edge(v0,v2),
   invent_Path(v1,v2),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1200),
   Edge(v0,v2),
   invent_Path(v0,v2),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1244),
   Edge(v0,v2),
   invent_Path(v2,v1),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1082),
   Edge(v2,v0),
   Edge(v2,v1),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2114),
   SCC(v2,v0),
   SCC(v0,v2),
   SCC(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2129),
   SCC(v2,v1),
   SCC(v0,v2),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1879),
   invent_Path(v1,v2),
   invent_Path(v0,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1098),
   Edge(v2,v0),
   Edge(v0,v1),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1926),
   invent_Path(v2,v0),
   invent_Path(v2,v1),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1841),
   invent_Path(v2,v0),
   invent_Path(v1,v2),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(983),
   Edge(v2,v1),
   Edge(v1,v2),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2124),
   SCC(v1,v0),
   SCC(_,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1522),
   Edge(v1,v2),
   SCC(v0,v2),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1626),
   Edge(v2,v0),
   SCC(v2,v1),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1698),
   invent_Path(v0,v2),
   invent_Path(v1,v2),
   invent_Path(v0,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1890),
   invent_Path(v2,v1),
   invent_Path(v2,v0),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2147),
   SCC(v2,v0),
   SCC(v1,v0),
   SCC(v2,v1).)_",
	R"_(SCC(v0,v1) :- 
   Rule(2100),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(880),
   Edge(v1,v0),
   Edge(v0,v1),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1577),
   Edge(v0,v2),
   SCC(v2,v0),
   SCC(v1,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1096),
   Edge(v1,v2),
   Edge(v0,v1),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1567),
   Edge(v2,v1),
   SCC(v0,v2),
   SCC(v2,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1449),
   Edge(v1,v2),
   invent_Path(v1,v2),
   SCC(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1688),
   invent_Path(v2,v1),
   invent_Path(v1,v0),
   invent_Path(v0,v2).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1297),
   Edge(v1,v2),
   invent_Path(v1,v2),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(897),
   Edge(_,v0),
   invent_Path(v1,v0).)_",
	R"_(SCC(v0,v1) :- 
   Rule(1878),
   invent_Path(v1,v2),
   invent_Path(v0,v2),
   SCC(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(508),
   invent_Path(v0,_),
   invent_Path(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(455),
   Edge(v1,v2),
   invent_Path(v1,v2),
   invent_Path(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(503),
   invent_Path(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(496),
   invent_Path(v0,v1),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(117),
   Edge(v0,v1),
   Edge(v0,v2),
   Edge(v2,v1).)_",
	R"_(invent_Path,v1)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(604),
   invent_Path(v0,v1),
   invent_Path(v1,_).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(322),
   Edge(v1,v2),
   invent_Path(v1,v2),
   Edge(v2,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(544),
   invent_Path(v1,v0),
   invent_Path(v2,v1),
   invent_Path(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(380),
   Edge(v1,v2),
   invent_Path(v0,v2),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(563),
   invent_Path(v2,v1),
   invent_Path(v2,v0),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(368),
   Edge(v0,v2),
   invent_Path(v0,v2),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(36),
   invent_Path(v0,v2),
   invent_Path(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(99),
   Edge(v0,v1),
   Edge(v0,v2),
   Edge(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(209),
   Edge(_,v0),
   invent_Path(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(579),
   invent_Path(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(118),
   Edge(v1,v0),
   Edge(v2,v0),
   Edge(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(23),
   Edge(v0,v2),
   invent_Path(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(247),
   Edge(v1,v2),
   Edge(v1,v0),
   invent_Path(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(219),
   Edge(v0,v1),
   Edge(v0,v2),
   invent_Path(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(523),
   invent_Path(v0,v1),
   invent_Path(v0,_).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(9),
   Edge(v2,v1),
   Edge(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(555),
   invent_Path(v0,v1),
   invent_Path(v0,v2),
   invent_Path(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(574),
   invent_Path(v1,v0),
   invent_Path(v2,v0),
   invent_Path(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(105),
   Edge(v0,v1),
   Edge(v1,v2),
   Edge(v2,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(302),
   Edge(v1,_),
   invent_Path(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(230),
   Edge(v2,v0),
   Edge(v1,v0),
   invent_Path(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(546),
   invent_Path(v2,v1),
   invent_Path(v1,v0),
   invent_Path(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(434),
   Edge(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(66),
   Edge(v0,v2),
   Edge(v2,v0),
   Edge(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(130),
   Edge(v0,v2),
   Edge(v2,v0),
   Edge(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(0),
   Edge(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(42),
   Edge(v1,v0),
   Edge(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(307),
   Edge(v1,_),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(85),
   Edge(v2,v0),
   Edge(v2,v1),
   Edge(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(507),
   invent_Path(_,v0),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(645),
   invent_Path(v0,v2),
   invent_Path(v1,v2),
   invent_Path(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(636),
   invent_Path(v2,v0),
   invent_Path(v2,v1),
   invent_Path(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(167),
   Edge(v0,v1),
   Edge(v1,v2),
   Edge(v2,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(433),
   Edge(v1,v2),
   invent_Path(v0,v2),
   invent_Path(v2,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(148),
   Edge(v0,v1),
   Edge(v1,_).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(375),
   Edge(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(268),
   Edge(v0,v1),
   Edge(v2,v0),
   invent_Path(v1,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(296),
   Edge(v1,v2),
   invent_Path(v2,v1),
   Edge(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(392),
   Edge(v1,v0),
   invent_Path(v2,v1),
   invent_Path(v0,v2).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(299),
   Edge(v1,v2),
   Edge(v2,v1),
   invent_Path(v0,v1).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(527),
   invent_Path(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(377),
   Edge(v1,v2),
   invent_Path(v1,v0),
   invent_Path(v2,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(107),
   Edge(v2,v1),
   Edge(v2,v0),
   Edge(v1,v0).)_",
	R"_(invent_Path(v0,v1) :- 
   Rule(557),
   invent_Path(v1,v0),
   invent_Path(v1,v2),
   invent_Path(v2,v0).)_",
};// -- Table: Edge
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_1_Edge = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<0,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_1_Edge;
// -- Table: Rule
std::unique_ptr<t_btree_3__0_1_2__1__7> rel_2_Rule = std::make_unique<t_btree_3__0_1_2__1__7>();
souffle::RelationWrapper<1,t_btree_3__0_1_2__1__7,Tuple<RamDomain,3>,3> wrapper_rel_2_Rule;
// -- Table: invent_Path
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_3_invent_Path = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<2,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_3_invent_Path;
// -- Table: @delta_invent_Path
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_4_delta_invent_Path = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: @new_invent_Path
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_5_new_invent_Path = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: SCC
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_6_SCC = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<3,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_6_SCC;
// -- Table: @delta_SCC
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_7_delta_SCC = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: @new_SCC
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_8_new_SCC = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
// -- Table: SCC.@info.1
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_9_SCC_info_1 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<4,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_9_SCC_info_1;
// -- Table: SCC.@info.10
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_10_SCC_info_10 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<5,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_10_SCC_info_10;
// -- Table: SCC.@info.100
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_11_SCC_info_100 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<6,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_11_SCC_info_100;
// -- Table: SCC.@info.101
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_12_SCC_info_101 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<7,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_12_SCC_info_101;
// -- Table: SCC.@info.102
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_13_SCC_info_102 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<8,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_13_SCC_info_102;
// -- Table: SCC.@info.103
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_14_SCC_info_103 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<9,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_14_SCC_info_103;
// -- Table: SCC.@info.104
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_15_SCC_info_104 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<10,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_15_SCC_info_104;
// -- Table: SCC.@info.105
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_16_SCC_info_105 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<11,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_16_SCC_info_105;
// -- Table: SCC.@info.106
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_17_SCC_info_106 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<12,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_17_SCC_info_106;
// -- Table: SCC.@info.107
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_18_SCC_info_107 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<13,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_18_SCC_info_107;
// -- Table: SCC.@info.108
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_19_SCC_info_108 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<14,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_19_SCC_info_108;
// -- Table: SCC.@info.109
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_20_SCC_info_109 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<15,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_20_SCC_info_109;
// -- Table: SCC.@info.11
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_21_SCC_info_11 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<16,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_21_SCC_info_11;
// -- Table: SCC.@info.110
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_22_SCC_info_110 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<17,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_22_SCC_info_110;
// -- Table: SCC.@info.111
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_23_SCC_info_111 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<18,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_23_SCC_info_111;
// -- Table: SCC.@info.112
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_24_SCC_info_112 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<19,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_24_SCC_info_112;
// -- Table: SCC.@info.113
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_25_SCC_info_113 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<20,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_25_SCC_info_113;
// -- Table: SCC.@info.114
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_26_SCC_info_114 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<21,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_26_SCC_info_114;
// -- Table: SCC.@info.115
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_27_SCC_info_115 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<22,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_27_SCC_info_115;
// -- Table: SCC.@info.116
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_28_SCC_info_116 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<23,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_28_SCC_info_116;
// -- Table: SCC.@info.117
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_29_SCC_info_117 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<24,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_29_SCC_info_117;
// -- Table: SCC.@info.118
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_30_SCC_info_118 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<25,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_30_SCC_info_118;
// -- Table: SCC.@info.119
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_31_SCC_info_119 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<26,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_31_SCC_info_119;
// -- Table: SCC.@info.12
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_32_SCC_info_12 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<27,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_32_SCC_info_12;
// -- Table: SCC.@info.120
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_33_SCC_info_120 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<28,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_33_SCC_info_120;
// -- Table: SCC.@info.121
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_34_SCC_info_121 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<29,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_34_SCC_info_121;
// -- Table: SCC.@info.122
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_35_SCC_info_122 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<30,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_35_SCC_info_122;
// -- Table: SCC.@info.123
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_36_SCC_info_123 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<31,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_36_SCC_info_123;
// -- Table: SCC.@info.124
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_37_SCC_info_124 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<32,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_37_SCC_info_124;
// -- Table: SCC.@info.125
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_38_SCC_info_125 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<33,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_38_SCC_info_125;
// -- Table: SCC.@info.126
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_39_SCC_info_126 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<34,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_39_SCC_info_126;
// -- Table: SCC.@info.127
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_40_SCC_info_127 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<35,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_40_SCC_info_127;
// -- Table: SCC.@info.128
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_41_SCC_info_128 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<36,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_41_SCC_info_128;
// -- Table: SCC.@info.129
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_42_SCC_info_129 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<37,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_42_SCC_info_129;
// -- Table: SCC.@info.13
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_43_SCC_info_13 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<38,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_43_SCC_info_13;
// -- Table: SCC.@info.130
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_44_SCC_info_130 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<39,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_44_SCC_info_130;
// -- Table: SCC.@info.131
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_45_SCC_info_131 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<40,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_45_SCC_info_131;
// -- Table: SCC.@info.132
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_46_SCC_info_132 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<41,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_46_SCC_info_132;
// -- Table: SCC.@info.133
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_47_SCC_info_133 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<42,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_47_SCC_info_133;
// -- Table: SCC.@info.134
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_48_SCC_info_134 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<43,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_48_SCC_info_134;
// -- Table: SCC.@info.135
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_49_SCC_info_135 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<44,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_49_SCC_info_135;
// -- Table: SCC.@info.136
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_50_SCC_info_136 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<45,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_50_SCC_info_136;
// -- Table: SCC.@info.137
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_51_SCC_info_137 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<46,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_51_SCC_info_137;
// -- Table: SCC.@info.138
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_52_SCC_info_138 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<47,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_52_SCC_info_138;
// -- Table: SCC.@info.139
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_53_SCC_info_139 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<48,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_53_SCC_info_139;
// -- Table: SCC.@info.14
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_54_SCC_info_14 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<49,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_54_SCC_info_14;
// -- Table: SCC.@info.140
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_55_SCC_info_140 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<50,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_55_SCC_info_140;
// -- Table: SCC.@info.141
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_56_SCC_info_141 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<51,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_56_SCC_info_141;
// -- Table: SCC.@info.142
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_57_SCC_info_142 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<52,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_57_SCC_info_142;
// -- Table: SCC.@info.143
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_58_SCC_info_143 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<53,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_58_SCC_info_143;
// -- Table: SCC.@info.144
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_59_SCC_info_144 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<54,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_59_SCC_info_144;
// -- Table: SCC.@info.145
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_60_SCC_info_145 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<55,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_60_SCC_info_145;
// -- Table: SCC.@info.146
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_61_SCC_info_146 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<56,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_61_SCC_info_146;
// -- Table: SCC.@info.147
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_62_SCC_info_147 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<57,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_62_SCC_info_147;
// -- Table: SCC.@info.148
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_63_SCC_info_148 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<58,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_63_SCC_info_148;
// -- Table: SCC.@info.149
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_64_SCC_info_149 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<59,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_64_SCC_info_149;
// -- Table: SCC.@info.15
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_65_SCC_info_15 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<60,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_65_SCC_info_15;
// -- Table: SCC.@info.150
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_66_SCC_info_150 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<61,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_66_SCC_info_150;
// -- Table: SCC.@info.151
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_67_SCC_info_151 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<62,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_67_SCC_info_151;
// -- Table: SCC.@info.16
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_68_SCC_info_16 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<63,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_68_SCC_info_16;
// -- Table: SCC.@info.17
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_69_SCC_info_17 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<64,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_69_SCC_info_17;
// -- Table: SCC.@info.18
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_70_SCC_info_18 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<65,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_70_SCC_info_18;
// -- Table: SCC.@info.19
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_71_SCC_info_19 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<66,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_71_SCC_info_19;
// -- Table: SCC.@info.2
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_72_SCC_info_2 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<67,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_72_SCC_info_2;
// -- Table: SCC.@info.20
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_73_SCC_info_20 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<68,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_73_SCC_info_20;
// -- Table: SCC.@info.21
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_74_SCC_info_21 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<69,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_74_SCC_info_21;
// -- Table: SCC.@info.22
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_75_SCC_info_22 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<70,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_75_SCC_info_22;
// -- Table: SCC.@info.23
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_76_SCC_info_23 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<71,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_76_SCC_info_23;
// -- Table: SCC.@info.24
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_77_SCC_info_24 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<72,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_77_SCC_info_24;
// -- Table: SCC.@info.25
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_78_SCC_info_25 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<73,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_78_SCC_info_25;
// -- Table: SCC.@info.26
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_79_SCC_info_26 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<74,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_79_SCC_info_26;
// -- Table: SCC.@info.27
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_80_SCC_info_27 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<75,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_80_SCC_info_27;
// -- Table: SCC.@info.28
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_81_SCC_info_28 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<76,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_81_SCC_info_28;
// -- Table: SCC.@info.29
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_82_SCC_info_29 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<77,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_82_SCC_info_29;
// -- Table: SCC.@info.3
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_83_SCC_info_3 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<78,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_83_SCC_info_3;
// -- Table: SCC.@info.30
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_84_SCC_info_30 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<79,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_84_SCC_info_30;
// -- Table: SCC.@info.31
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_85_SCC_info_31 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<80,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_85_SCC_info_31;
// -- Table: SCC.@info.32
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_86_SCC_info_32 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<81,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_86_SCC_info_32;
// -- Table: SCC.@info.33
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_87_SCC_info_33 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<82,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_87_SCC_info_33;
// -- Table: SCC.@info.34
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_88_SCC_info_34 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<83,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_88_SCC_info_34;
// -- Table: SCC.@info.35
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_89_SCC_info_35 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<84,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_89_SCC_info_35;
// -- Table: SCC.@info.36
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_90_SCC_info_36 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<85,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_90_SCC_info_36;
// -- Table: SCC.@info.37
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_91_SCC_info_37 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<86,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_91_SCC_info_37;
// -- Table: SCC.@info.38
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_92_SCC_info_38 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<87,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_92_SCC_info_38;
// -- Table: SCC.@info.39
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_93_SCC_info_39 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<88,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_93_SCC_info_39;
// -- Table: SCC.@info.4
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_94_SCC_info_4 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<89,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_94_SCC_info_4;
// -- Table: SCC.@info.40
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_95_SCC_info_40 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<90,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_95_SCC_info_40;
// -- Table: SCC.@info.41
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_96_SCC_info_41 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<91,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_96_SCC_info_41;
// -- Table: SCC.@info.42
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_97_SCC_info_42 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<92,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_97_SCC_info_42;
// -- Table: SCC.@info.43
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_98_SCC_info_43 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<93,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_98_SCC_info_43;
// -- Table: SCC.@info.44
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_99_SCC_info_44 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<94,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_99_SCC_info_44;
// -- Table: SCC.@info.45
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_100_SCC_info_45 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<95,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_100_SCC_info_45;
// -- Table: SCC.@info.46
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_101_SCC_info_46 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<96,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_101_SCC_info_46;
// -- Table: SCC.@info.47
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_102_SCC_info_47 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<97,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_102_SCC_info_47;
// -- Table: SCC.@info.48
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_103_SCC_info_48 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<98,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_103_SCC_info_48;
// -- Table: SCC.@info.49
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_104_SCC_info_49 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<99,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_104_SCC_info_49;
// -- Table: SCC.@info.5
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_105_SCC_info_5 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<100,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_105_SCC_info_5;
// -- Table: SCC.@info.50
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_106_SCC_info_50 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<101,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_106_SCC_info_50;
// -- Table: SCC.@info.51
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_107_SCC_info_51 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<102,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_107_SCC_info_51;
// -- Table: SCC.@info.52
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_108_SCC_info_52 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<103,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_108_SCC_info_52;
// -- Table: SCC.@info.53
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_109_SCC_info_53 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<104,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_109_SCC_info_53;
// -- Table: SCC.@info.54
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_110_SCC_info_54 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<105,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_110_SCC_info_54;
// -- Table: SCC.@info.55
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_111_SCC_info_55 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<106,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_111_SCC_info_55;
// -- Table: SCC.@info.56
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_112_SCC_info_56 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<107,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_112_SCC_info_56;
// -- Table: SCC.@info.57
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_113_SCC_info_57 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<108,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_113_SCC_info_57;
// -- Table: SCC.@info.58
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_114_SCC_info_58 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<109,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_114_SCC_info_58;
// -- Table: SCC.@info.59
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_115_SCC_info_59 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<110,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_115_SCC_info_59;
// -- Table: SCC.@info.6
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_116_SCC_info_6 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<111,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_116_SCC_info_6;
// -- Table: SCC.@info.60
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_117_SCC_info_60 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<112,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_117_SCC_info_60;
// -- Table: SCC.@info.61
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_118_SCC_info_61 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<113,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_118_SCC_info_61;
// -- Table: SCC.@info.62
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_119_SCC_info_62 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<114,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_119_SCC_info_62;
// -- Table: SCC.@info.63
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_120_SCC_info_63 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<115,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_120_SCC_info_63;
// -- Table: SCC.@info.64
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_121_SCC_info_64 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<116,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_121_SCC_info_64;
// -- Table: SCC.@info.65
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_122_SCC_info_65 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<117,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_122_SCC_info_65;
// -- Table: SCC.@info.66
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_123_SCC_info_66 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<118,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_123_SCC_info_66;
// -- Table: SCC.@info.67
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_124_SCC_info_67 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<119,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_124_SCC_info_67;
// -- Table: SCC.@info.68
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_125_SCC_info_68 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<120,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_125_SCC_info_68;
// -- Table: SCC.@info.69
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_126_SCC_info_69 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<121,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_126_SCC_info_69;
// -- Table: SCC.@info.7
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_127_SCC_info_7 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<122,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_127_SCC_info_7;
// -- Table: SCC.@info.70
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_128_SCC_info_70 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<123,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_128_SCC_info_70;
// -- Table: SCC.@info.71
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_129_SCC_info_71 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<124,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_129_SCC_info_71;
// -- Table: SCC.@info.72
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_130_SCC_info_72 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<125,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_130_SCC_info_72;
// -- Table: SCC.@info.73
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_131_SCC_info_73 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<126,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_131_SCC_info_73;
// -- Table: SCC.@info.74
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_132_SCC_info_74 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<127,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_132_SCC_info_74;
// -- Table: SCC.@info.75
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_133_SCC_info_75 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<128,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_133_SCC_info_75;
// -- Table: SCC.@info.76
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_134_SCC_info_76 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<129,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_134_SCC_info_76;
// -- Table: SCC.@info.77
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_135_SCC_info_77 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<130,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_135_SCC_info_77;
// -- Table: SCC.@info.78
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_136_SCC_info_78 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<131,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_136_SCC_info_78;
// -- Table: SCC.@info.79
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_137_SCC_info_79 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<132,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_137_SCC_info_79;
// -- Table: SCC.@info.8
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_138_SCC_info_8 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<133,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_138_SCC_info_8;
// -- Table: SCC.@info.80
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_139_SCC_info_80 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<134,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_139_SCC_info_80;
// -- Table: SCC.@info.81
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_140_SCC_info_81 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<135,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_140_SCC_info_81;
// -- Table: SCC.@info.82
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_141_SCC_info_82 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<136,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_141_SCC_info_82;
// -- Table: SCC.@info.83
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_142_SCC_info_83 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<137,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_142_SCC_info_83;
// -- Table: SCC.@info.84
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_143_SCC_info_84 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<138,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_143_SCC_info_84;
// -- Table: SCC.@info.85
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_144_SCC_info_85 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<139,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_144_SCC_info_85;
// -- Table: SCC.@info.86
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_145_SCC_info_86 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<140,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_145_SCC_info_86;
// -- Table: SCC.@info.87
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_146_SCC_info_87 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<141,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_146_SCC_info_87;
// -- Table: SCC.@info.88
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_147_SCC_info_88 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<142,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_147_SCC_info_88;
// -- Table: SCC.@info.89
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_148_SCC_info_89 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<143,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_148_SCC_info_89;
// -- Table: SCC.@info.9
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_149_SCC_info_9 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<144,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_149_SCC_info_9;
// -- Table: SCC.@info.90
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_150_SCC_info_90 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<145,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_150_SCC_info_90;
// -- Table: SCC.@info.91
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_151_SCC_info_91 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<146,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_151_SCC_info_91;
// -- Table: SCC.@info.92
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_152_SCC_info_92 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<147,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_152_SCC_info_92;
// -- Table: SCC.@info.93
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_153_SCC_info_93 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<148,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_153_SCC_info_93;
// -- Table: SCC.@info.94
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_154_SCC_info_94 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<149,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_154_SCC_info_94;
// -- Table: SCC.@info.95
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_155_SCC_info_95 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<150,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_155_SCC_info_95;
// -- Table: SCC.@info.96
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_156_SCC_info_96 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<151,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_156_SCC_info_96;
// -- Table: SCC.@info.97
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_157_SCC_info_97 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<152,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_157_SCC_info_97;
// -- Table: SCC.@info.98
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_158_SCC_info_98 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<153,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_158_SCC_info_98;
// -- Table: SCC.@info.99
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_159_SCC_info_99 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<154,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_159_SCC_info_99;
// -- Table: invent_Path.@info.1
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_160_invent_Path_info_1 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<155,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_160_invent_Path_info_1;
// -- Table: invent_Path.@info.10
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_161_invent_Path_info_10 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<156,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_161_invent_Path_info_10;
// -- Table: invent_Path.@info.11
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_162_invent_Path_info_11 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<157,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_162_invent_Path_info_11;
// -- Table: invent_Path.@info.12
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_163_invent_Path_info_12 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<158,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_163_invent_Path_info_12;
// -- Table: invent_Path.@info.13
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_164_invent_Path_info_13 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<159,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_164_invent_Path_info_13;
// -- Table: invent_Path.@info.14
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_165_invent_Path_info_14 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<160,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_165_invent_Path_info_14;
// -- Table: invent_Path.@info.15
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_166_invent_Path_info_15 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<161,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_166_invent_Path_info_15;
// -- Table: invent_Path.@info.16
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_167_invent_Path_info_16 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<162,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_167_invent_Path_info_16;
// -- Table: invent_Path.@info.17
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_168_invent_Path_info_17 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<163,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_168_invent_Path_info_17;
// -- Table: invent_Path.@info.18
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_169_invent_Path_info_18 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<164,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_169_invent_Path_info_18;
// -- Table: invent_Path.@info.19
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_170_invent_Path_info_19 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<165,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_170_invent_Path_info_19;
// -- Table: invent_Path.@info.2
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_171_invent_Path_info_2 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<166,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_171_invent_Path_info_2;
// -- Table: invent_Path.@info.20
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_172_invent_Path_info_20 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<167,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_172_invent_Path_info_20;
// -- Table: invent_Path.@info.21
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_173_invent_Path_info_21 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<168,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_173_invent_Path_info_21;
// -- Table: invent_Path.@info.22
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_174_invent_Path_info_22 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<169,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_174_invent_Path_info_22;
// -- Table: invent_Path.@info.23
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_175_invent_Path_info_23 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<170,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_175_invent_Path_info_23;
// -- Table: invent_Path.@info.24
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_176_invent_Path_info_24 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<171,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_176_invent_Path_info_24;
// -- Table: invent_Path.@info.25
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_177_invent_Path_info_25 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<172,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_177_invent_Path_info_25;
// -- Table: invent_Path.@info.26
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_178_invent_Path_info_26 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<173,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_178_invent_Path_info_26;
// -- Table: invent_Path.@info.27
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_179_invent_Path_info_27 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<174,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_179_invent_Path_info_27;
// -- Table: invent_Path.@info.28
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_180_invent_Path_info_28 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<175,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_180_invent_Path_info_28;
// -- Table: invent_Path.@info.29
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_181_invent_Path_info_29 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<176,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_181_invent_Path_info_29;
// -- Table: invent_Path.@info.3
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_182_invent_Path_info_3 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<177,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_182_invent_Path_info_3;
// -- Table: invent_Path.@info.30
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_183_invent_Path_info_30 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<178,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_183_invent_Path_info_30;
// -- Table: invent_Path.@info.31
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_184_invent_Path_info_31 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<179,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_184_invent_Path_info_31;
// -- Table: invent_Path.@info.32
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_185_invent_Path_info_32 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<180,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_185_invent_Path_info_32;
// -- Table: invent_Path.@info.33
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_186_invent_Path_info_33 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<181,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_186_invent_Path_info_33;
// -- Table: invent_Path.@info.34
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_187_invent_Path_info_34 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<182,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_187_invent_Path_info_34;
// -- Table: invent_Path.@info.35
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_188_invent_Path_info_35 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<183,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_188_invent_Path_info_35;
// -- Table: invent_Path.@info.36
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_189_invent_Path_info_36 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<184,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_189_invent_Path_info_36;
// -- Table: invent_Path.@info.37
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_190_invent_Path_info_37 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<185,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_190_invent_Path_info_37;
// -- Table: invent_Path.@info.38
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_191_invent_Path_info_38 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<186,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_191_invent_Path_info_38;
// -- Table: invent_Path.@info.39
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_192_invent_Path_info_39 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<187,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_192_invent_Path_info_39;
// -- Table: invent_Path.@info.4
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_193_invent_Path_info_4 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<188,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_193_invent_Path_info_4;
// -- Table: invent_Path.@info.40
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_194_invent_Path_info_40 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<189,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_194_invent_Path_info_40;
// -- Table: invent_Path.@info.41
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_195_invent_Path_info_41 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<190,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_195_invent_Path_info_41;
// -- Table: invent_Path.@info.42
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_196_invent_Path_info_42 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<191,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_196_invent_Path_info_42;
// -- Table: invent_Path.@info.43
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_197_invent_Path_info_43 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<192,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_197_invent_Path_info_43;
// -- Table: invent_Path.@info.44
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_198_invent_Path_info_44 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<193,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_198_invent_Path_info_44;
// -- Table: invent_Path.@info.45
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_199_invent_Path_info_45 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<194,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_199_invent_Path_info_45;
// -- Table: invent_Path.@info.46
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_200_invent_Path_info_46 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<195,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_200_invent_Path_info_46;
// -- Table: invent_Path.@info.47
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_201_invent_Path_info_47 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<196,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_201_invent_Path_info_47;
// -- Table: invent_Path.@info.48
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_202_invent_Path_info_48 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<197,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_202_invent_Path_info_48;
// -- Table: invent_Path.@info.49
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_203_invent_Path_info_49 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<198,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_203_invent_Path_info_49;
// -- Table: invent_Path.@info.5
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_204_invent_Path_info_5 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<199,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_204_invent_Path_info_5;
// -- Table: invent_Path.@info.6
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_205_invent_Path_info_6 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<200,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_205_invent_Path_info_6;
// -- Table: invent_Path.@info.7
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_206_invent_Path_info_7 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<201,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_206_invent_Path_info_7;
// -- Table: invent_Path.@info.8
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_207_invent_Path_info_8 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<202,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_207_invent_Path_info_8;
// -- Table: invent_Path.@info.9
std::unique_ptr<t_btree_7__0_1_2_3_4_5_6__127> rel_208_invent_Path_info_9 = std::make_unique<t_btree_7__0_1_2_3_4_5_6__127>();
souffle::RelationWrapper<203,t_btree_7__0_1_2_3_4_5_6__127,Tuple<RamDomain,7>,7> wrapper_rel_208_invent_Path_info_9;
public:
Sf_souffle_small() : 
wrapper_rel_1_Edge(*rel_1_Edge,symTable,"Edge",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_2_Rule(*rel_2_Rule,symTable,"Rule",std::array<const char *,3>{{"i:number","i:number","i:number"}},std::array<const char *,3>{{"n","@rule_number","@level_number"}}),

wrapper_rel_3_invent_Path(*rel_3_invent_Path,symTable,"invent_Path",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_6_SCC(*rel_6_SCC,symTable,"SCC",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_9_SCC_info_1(*rel_9_SCC_info_1,symTable,"SCC.@info.1",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_10_SCC_info_10(*rel_10_SCC_info_10,symTable,"SCC.@info.10",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_11_SCC_info_100(*rel_11_SCC_info_100,symTable,"SCC.@info.100",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_12_SCC_info_101(*rel_12_SCC_info_101,symTable,"SCC.@info.101",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_13_SCC_info_102(*rel_13_SCC_info_102,symTable,"SCC.@info.102",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_14_SCC_info_103(*rel_14_SCC_info_103,symTable,"SCC.@info.103",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_15_SCC_info_104(*rel_15_SCC_info_104,symTable,"SCC.@info.104",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_16_SCC_info_105(*rel_16_SCC_info_105,symTable,"SCC.@info.105",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_17_SCC_info_106(*rel_17_SCC_info_106,symTable,"SCC.@info.106",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_18_SCC_info_107(*rel_18_SCC_info_107,symTable,"SCC.@info.107",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_19_SCC_info_108(*rel_19_SCC_info_108,symTable,"SCC.@info.108",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_20_SCC_info_109(*rel_20_SCC_info_109,symTable,"SCC.@info.109",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_21_SCC_info_11(*rel_21_SCC_info_11,symTable,"SCC.@info.11",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_22_SCC_info_110(*rel_22_SCC_info_110,symTable,"SCC.@info.110",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_23_SCC_info_111(*rel_23_SCC_info_111,symTable,"SCC.@info.111",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_24_SCC_info_112(*rel_24_SCC_info_112,symTable,"SCC.@info.112",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_25_SCC_info_113(*rel_25_SCC_info_113,symTable,"SCC.@info.113",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_26_SCC_info_114(*rel_26_SCC_info_114,symTable,"SCC.@info.114",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_27_SCC_info_115(*rel_27_SCC_info_115,symTable,"SCC.@info.115",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_28_SCC_info_116(*rel_28_SCC_info_116,symTable,"SCC.@info.116",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_29_SCC_info_117(*rel_29_SCC_info_117,symTable,"SCC.@info.117",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_30_SCC_info_118(*rel_30_SCC_info_118,symTable,"SCC.@info.118",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_31_SCC_info_119(*rel_31_SCC_info_119,symTable,"SCC.@info.119",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_32_SCC_info_12(*rel_32_SCC_info_12,symTable,"SCC.@info.12",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_33_SCC_info_120(*rel_33_SCC_info_120,symTable,"SCC.@info.120",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_34_SCC_info_121(*rel_34_SCC_info_121,symTable,"SCC.@info.121",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_35_SCC_info_122(*rel_35_SCC_info_122,symTable,"SCC.@info.122",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_36_SCC_info_123(*rel_36_SCC_info_123,symTable,"SCC.@info.123",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_37_SCC_info_124(*rel_37_SCC_info_124,symTable,"SCC.@info.124",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_38_SCC_info_125(*rel_38_SCC_info_125,symTable,"SCC.@info.125",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_39_SCC_info_126(*rel_39_SCC_info_126,symTable,"SCC.@info.126",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_40_SCC_info_127(*rel_40_SCC_info_127,symTable,"SCC.@info.127",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_41_SCC_info_128(*rel_41_SCC_info_128,symTable,"SCC.@info.128",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_42_SCC_info_129(*rel_42_SCC_info_129,symTable,"SCC.@info.129",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_43_SCC_info_13(*rel_43_SCC_info_13,symTable,"SCC.@info.13",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_44_SCC_info_130(*rel_44_SCC_info_130,symTable,"SCC.@info.130",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_45_SCC_info_131(*rel_45_SCC_info_131,symTable,"SCC.@info.131",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_46_SCC_info_132(*rel_46_SCC_info_132,symTable,"SCC.@info.132",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_47_SCC_info_133(*rel_47_SCC_info_133,symTable,"SCC.@info.133",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_48_SCC_info_134(*rel_48_SCC_info_134,symTable,"SCC.@info.134",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_49_SCC_info_135(*rel_49_SCC_info_135,symTable,"SCC.@info.135",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_50_SCC_info_136(*rel_50_SCC_info_136,symTable,"SCC.@info.136",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_51_SCC_info_137(*rel_51_SCC_info_137,symTable,"SCC.@info.137",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_52_SCC_info_138(*rel_52_SCC_info_138,symTable,"SCC.@info.138",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_53_SCC_info_139(*rel_53_SCC_info_139,symTable,"SCC.@info.139",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_54_SCC_info_14(*rel_54_SCC_info_14,symTable,"SCC.@info.14",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_55_SCC_info_140(*rel_55_SCC_info_140,symTable,"SCC.@info.140",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_56_SCC_info_141(*rel_56_SCC_info_141,symTable,"SCC.@info.141",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_57_SCC_info_142(*rel_57_SCC_info_142,symTable,"SCC.@info.142",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_58_SCC_info_143(*rel_58_SCC_info_143,symTable,"SCC.@info.143",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_59_SCC_info_144(*rel_59_SCC_info_144,symTable,"SCC.@info.144",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_60_SCC_info_145(*rel_60_SCC_info_145,symTable,"SCC.@info.145",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_61_SCC_info_146(*rel_61_SCC_info_146,symTable,"SCC.@info.146",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_62_SCC_info_147(*rel_62_SCC_info_147,symTable,"SCC.@info.147",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_63_SCC_info_148(*rel_63_SCC_info_148,symTable,"SCC.@info.148",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_64_SCC_info_149(*rel_64_SCC_info_149,symTable,"SCC.@info.149",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_65_SCC_info_15(*rel_65_SCC_info_15,symTable,"SCC.@info.15",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_66_SCC_info_150(*rel_66_SCC_info_150,symTable,"SCC.@info.150",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_67_SCC_info_151(*rel_67_SCC_info_151,symTable,"SCC.@info.151",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_68_SCC_info_16(*rel_68_SCC_info_16,symTable,"SCC.@info.16",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_69_SCC_info_17(*rel_69_SCC_info_17,symTable,"SCC.@info.17",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_70_SCC_info_18(*rel_70_SCC_info_18,symTable,"SCC.@info.18",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_71_SCC_info_19(*rel_71_SCC_info_19,symTable,"SCC.@info.19",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_72_SCC_info_2(*rel_72_SCC_info_2,symTable,"SCC.@info.2",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_73_SCC_info_20(*rel_73_SCC_info_20,symTable,"SCC.@info.20",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_74_SCC_info_21(*rel_74_SCC_info_21,symTable,"SCC.@info.21",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_75_SCC_info_22(*rel_75_SCC_info_22,symTable,"SCC.@info.22",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_76_SCC_info_23(*rel_76_SCC_info_23,symTable,"SCC.@info.23",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_77_SCC_info_24(*rel_77_SCC_info_24,symTable,"SCC.@info.24",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_78_SCC_info_25(*rel_78_SCC_info_25,symTable,"SCC.@info.25",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_79_SCC_info_26(*rel_79_SCC_info_26,symTable,"SCC.@info.26",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_80_SCC_info_27(*rel_80_SCC_info_27,symTable,"SCC.@info.27",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_81_SCC_info_28(*rel_81_SCC_info_28,symTable,"SCC.@info.28",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_82_SCC_info_29(*rel_82_SCC_info_29,symTable,"SCC.@info.29",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_83_SCC_info_3(*rel_83_SCC_info_3,symTable,"SCC.@info.3",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_84_SCC_info_30(*rel_84_SCC_info_30,symTable,"SCC.@info.30",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_85_SCC_info_31(*rel_85_SCC_info_31,symTable,"SCC.@info.31",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_86_SCC_info_32(*rel_86_SCC_info_32,symTable,"SCC.@info.32",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_87_SCC_info_33(*rel_87_SCC_info_33,symTable,"SCC.@info.33",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_88_SCC_info_34(*rel_88_SCC_info_34,symTable,"SCC.@info.34",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_89_SCC_info_35(*rel_89_SCC_info_35,symTable,"SCC.@info.35",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_90_SCC_info_36(*rel_90_SCC_info_36,symTable,"SCC.@info.36",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_91_SCC_info_37(*rel_91_SCC_info_37,symTable,"SCC.@info.37",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_92_SCC_info_38(*rel_92_SCC_info_38,symTable,"SCC.@info.38",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_93_SCC_info_39(*rel_93_SCC_info_39,symTable,"SCC.@info.39",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_94_SCC_info_4(*rel_94_SCC_info_4,symTable,"SCC.@info.4",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_95_SCC_info_40(*rel_95_SCC_info_40,symTable,"SCC.@info.40",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_96_SCC_info_41(*rel_96_SCC_info_41,symTable,"SCC.@info.41",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_97_SCC_info_42(*rel_97_SCC_info_42,symTable,"SCC.@info.42",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_98_SCC_info_43(*rel_98_SCC_info_43,symTable,"SCC.@info.43",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_99_SCC_info_44(*rel_99_SCC_info_44,symTable,"SCC.@info.44",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_100_SCC_info_45(*rel_100_SCC_info_45,symTable,"SCC.@info.45",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_101_SCC_info_46(*rel_101_SCC_info_46,symTable,"SCC.@info.46",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_102_SCC_info_47(*rel_102_SCC_info_47,symTable,"SCC.@info.47",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_103_SCC_info_48(*rel_103_SCC_info_48,symTable,"SCC.@info.48",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_104_SCC_info_49(*rel_104_SCC_info_49,symTable,"SCC.@info.49",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_105_SCC_info_5(*rel_105_SCC_info_5,symTable,"SCC.@info.5",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_106_SCC_info_50(*rel_106_SCC_info_50,symTable,"SCC.@info.50",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_107_SCC_info_51(*rel_107_SCC_info_51,symTable,"SCC.@info.51",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_108_SCC_info_52(*rel_108_SCC_info_52,symTable,"SCC.@info.52",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_109_SCC_info_53(*rel_109_SCC_info_53,symTable,"SCC.@info.53",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_110_SCC_info_54(*rel_110_SCC_info_54,symTable,"SCC.@info.54",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_111_SCC_info_55(*rel_111_SCC_info_55,symTable,"SCC.@info.55",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_112_SCC_info_56(*rel_112_SCC_info_56,symTable,"SCC.@info.56",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_113_SCC_info_57(*rel_113_SCC_info_57,symTable,"SCC.@info.57",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_114_SCC_info_58(*rel_114_SCC_info_58,symTable,"SCC.@info.58",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_115_SCC_info_59(*rel_115_SCC_info_59,symTable,"SCC.@info.59",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_116_SCC_info_6(*rel_116_SCC_info_6,symTable,"SCC.@info.6",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_117_SCC_info_60(*rel_117_SCC_info_60,symTable,"SCC.@info.60",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_118_SCC_info_61(*rel_118_SCC_info_61,symTable,"SCC.@info.61",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_119_SCC_info_62(*rel_119_SCC_info_62,symTable,"SCC.@info.62",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_120_SCC_info_63(*rel_120_SCC_info_63,symTable,"SCC.@info.63",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_121_SCC_info_64(*rel_121_SCC_info_64,symTable,"SCC.@info.64",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_122_SCC_info_65(*rel_122_SCC_info_65,symTable,"SCC.@info.65",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_123_SCC_info_66(*rel_123_SCC_info_66,symTable,"SCC.@info.66",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_124_SCC_info_67(*rel_124_SCC_info_67,symTable,"SCC.@info.67",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_125_SCC_info_68(*rel_125_SCC_info_68,symTable,"SCC.@info.68",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_126_SCC_info_69(*rel_126_SCC_info_69,symTable,"SCC.@info.69",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_127_SCC_info_7(*rel_127_SCC_info_7,symTable,"SCC.@info.7",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_128_SCC_info_70(*rel_128_SCC_info_70,symTable,"SCC.@info.70",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_129_SCC_info_71(*rel_129_SCC_info_71,symTable,"SCC.@info.71",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_130_SCC_info_72(*rel_130_SCC_info_72,symTable,"SCC.@info.72",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_131_SCC_info_73(*rel_131_SCC_info_73,symTable,"SCC.@info.73",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_132_SCC_info_74(*rel_132_SCC_info_74,symTable,"SCC.@info.74",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_133_SCC_info_75(*rel_133_SCC_info_75,symTable,"SCC.@info.75",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_134_SCC_info_76(*rel_134_SCC_info_76,symTable,"SCC.@info.76",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_135_SCC_info_77(*rel_135_SCC_info_77,symTable,"SCC.@info.77",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_136_SCC_info_78(*rel_136_SCC_info_78,symTable,"SCC.@info.78",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_137_SCC_info_79(*rel_137_SCC_info_79,symTable,"SCC.@info.79",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_138_SCC_info_8(*rel_138_SCC_info_8,symTable,"SCC.@info.8",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_139_SCC_info_80(*rel_139_SCC_info_80,symTable,"SCC.@info.80",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_140_SCC_info_81(*rel_140_SCC_info_81,symTable,"SCC.@info.81",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_141_SCC_info_82(*rel_141_SCC_info_82,symTable,"SCC.@info.82",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_142_SCC_info_83(*rel_142_SCC_info_83,symTable,"SCC.@info.83",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_143_SCC_info_84(*rel_143_SCC_info_84,symTable,"SCC.@info.84",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_144_SCC_info_85(*rel_144_SCC_info_85,symTable,"SCC.@info.85",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_145_SCC_info_86(*rel_145_SCC_info_86,symTable,"SCC.@info.86",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_146_SCC_info_87(*rel_146_SCC_info_87,symTable,"SCC.@info.87",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_147_SCC_info_88(*rel_147_SCC_info_88,symTable,"SCC.@info.88",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_148_SCC_info_89(*rel_148_SCC_info_89,symTable,"SCC.@info.89",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_149_SCC_info_9(*rel_149_SCC_info_9,symTable,"SCC.@info.9",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_150_SCC_info_90(*rel_150_SCC_info_90,symTable,"SCC.@info.90",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_151_SCC_info_91(*rel_151_SCC_info_91,symTable,"SCC.@info.91",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_152_SCC_info_92(*rel_152_SCC_info_92,symTable,"SCC.@info.92",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_153_SCC_info_93(*rel_153_SCC_info_93,symTable,"SCC.@info.93",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_154_SCC_info_94(*rel_154_SCC_info_94,symTable,"SCC.@info.94",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_155_SCC_info_95(*rel_155_SCC_info_95,symTable,"SCC.@info.95",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_156_SCC_info_96(*rel_156_SCC_info_96,symTable,"SCC.@info.96",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_157_SCC_info_97(*rel_157_SCC_info_97,symTable,"SCC.@info.97",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_158_SCC_info_98(*rel_158_SCC_info_98,symTable,"SCC.@info.98",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_159_SCC_info_99(*rel_159_SCC_info_99,symTable,"SCC.@info.99",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_160_invent_Path_info_1(*rel_160_invent_Path_info_1,symTable,"invent_Path.@info.1",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_161_invent_Path_info_10(*rel_161_invent_Path_info_10,symTable,"invent_Path.@info.10",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_162_invent_Path_info_11(*rel_162_invent_Path_info_11,symTable,"invent_Path.@info.11",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_163_invent_Path_info_12(*rel_163_invent_Path_info_12,symTable,"invent_Path.@info.12",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_164_invent_Path_info_13(*rel_164_invent_Path_info_13,symTable,"invent_Path.@info.13",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_165_invent_Path_info_14(*rel_165_invent_Path_info_14,symTable,"invent_Path.@info.14",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_166_invent_Path_info_15(*rel_166_invent_Path_info_15,symTable,"invent_Path.@info.15",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_167_invent_Path_info_16(*rel_167_invent_Path_info_16,symTable,"invent_Path.@info.16",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_168_invent_Path_info_17(*rel_168_invent_Path_info_17,symTable,"invent_Path.@info.17",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_169_invent_Path_info_18(*rel_169_invent_Path_info_18,symTable,"invent_Path.@info.18",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_170_invent_Path_info_19(*rel_170_invent_Path_info_19,symTable,"invent_Path.@info.19",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_171_invent_Path_info_2(*rel_171_invent_Path_info_2,symTable,"invent_Path.@info.2",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_172_invent_Path_info_20(*rel_172_invent_Path_info_20,symTable,"invent_Path.@info.20",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_173_invent_Path_info_21(*rel_173_invent_Path_info_21,symTable,"invent_Path.@info.21",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_174_invent_Path_info_22(*rel_174_invent_Path_info_22,symTable,"invent_Path.@info.22",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_175_invent_Path_info_23(*rel_175_invent_Path_info_23,symTable,"invent_Path.@info.23",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_176_invent_Path_info_24(*rel_176_invent_Path_info_24,symTable,"invent_Path.@info.24",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_177_invent_Path_info_25(*rel_177_invent_Path_info_25,symTable,"invent_Path.@info.25",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_178_invent_Path_info_26(*rel_178_invent_Path_info_26,symTable,"invent_Path.@info.26",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_179_invent_Path_info_27(*rel_179_invent_Path_info_27,symTable,"invent_Path.@info.27",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_180_invent_Path_info_28(*rel_180_invent_Path_info_28,symTable,"invent_Path.@info.28",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_181_invent_Path_info_29(*rel_181_invent_Path_info_29,symTable,"invent_Path.@info.29",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_182_invent_Path_info_3(*rel_182_invent_Path_info_3,symTable,"invent_Path.@info.3",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_183_invent_Path_info_30(*rel_183_invent_Path_info_30,symTable,"invent_Path.@info.30",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_184_invent_Path_info_31(*rel_184_invent_Path_info_31,symTable,"invent_Path.@info.31",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_185_invent_Path_info_32(*rel_185_invent_Path_info_32,symTable,"invent_Path.@info.32",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_186_invent_Path_info_33(*rel_186_invent_Path_info_33,symTable,"invent_Path.@info.33",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_187_invent_Path_info_34(*rel_187_invent_Path_info_34,symTable,"invent_Path.@info.34",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_188_invent_Path_info_35(*rel_188_invent_Path_info_35,symTable,"invent_Path.@info.35",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_189_invent_Path_info_36(*rel_189_invent_Path_info_36,symTable,"invent_Path.@info.36",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_190_invent_Path_info_37(*rel_190_invent_Path_info_37,symTable,"invent_Path.@info.37",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_191_invent_Path_info_38(*rel_191_invent_Path_info_38,symTable,"invent_Path.@info.38",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_192_invent_Path_info_39(*rel_192_invent_Path_info_39,symTable,"invent_Path.@info.39",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_193_invent_Path_info_4(*rel_193_invent_Path_info_4,symTable,"invent_Path.@info.4",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_194_invent_Path_info_40(*rel_194_invent_Path_info_40,symTable,"invent_Path.@info.40",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_195_invent_Path_info_41(*rel_195_invent_Path_info_41,symTable,"invent_Path.@info.41",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_196_invent_Path_info_42(*rel_196_invent_Path_info_42,symTable,"invent_Path.@info.42",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_197_invent_Path_info_43(*rel_197_invent_Path_info_43,symTable,"invent_Path.@info.43",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_198_invent_Path_info_44(*rel_198_invent_Path_info_44,symTable,"invent_Path.@info.44",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_199_invent_Path_info_45(*rel_199_invent_Path_info_45,symTable,"invent_Path.@info.45",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_200_invent_Path_info_46(*rel_200_invent_Path_info_46,symTable,"invent_Path.@info.46",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_201_invent_Path_info_47(*rel_201_invent_Path_info_47,symTable,"invent_Path.@info.47",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_202_invent_Path_info_48(*rel_202_invent_Path_info_48,symTable,"invent_Path.@info.48",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_203_invent_Path_info_49(*rel_203_invent_Path_info_49,symTable,"invent_Path.@info.49",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_204_invent_Path_info_5(*rel_204_invent_Path_info_5,symTable,"invent_Path.@info.5",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_205_invent_Path_info_6(*rel_205_invent_Path_info_6,symTable,"invent_Path.@info.6",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_206_invent_Path_info_7(*rel_206_invent_Path_info_7,symTable,"invent_Path.@info.7",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_207_invent_Path_info_8(*rel_207_invent_Path_info_8,symTable,"invent_Path.@info.8",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}),

wrapper_rel_208_invent_Path_info_9(*rel_208_invent_Path_info_9,symTable,"invent_Path.@info.9",std::array<const char *,7>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,7>{{"clause_num","head_vars","rel_0","rel_1","rel_2","rel_3","clause_repr"}}){
addRelation("Edge",&wrapper_rel_1_Edge,true,false);
addRelation("Rule",&wrapper_rel_2_Rule,true,false);
addRelation("invent_Path",&wrapper_rel_3_invent_Path,false,true);
addRelation("SCC",&wrapper_rel_6_SCC,false,true);
addRelation("SCC.@info.1",&wrapper_rel_9_SCC_info_1,false,false);
addRelation("SCC.@info.10",&wrapper_rel_10_SCC_info_10,false,false);
addRelation("SCC.@info.100",&wrapper_rel_11_SCC_info_100,false,false);
addRelation("SCC.@info.101",&wrapper_rel_12_SCC_info_101,false,false);
addRelation("SCC.@info.102",&wrapper_rel_13_SCC_info_102,false,false);
addRelation("SCC.@info.103",&wrapper_rel_14_SCC_info_103,false,false);
addRelation("SCC.@info.104",&wrapper_rel_15_SCC_info_104,false,false);
addRelation("SCC.@info.105",&wrapper_rel_16_SCC_info_105,false,false);
addRelation("SCC.@info.106",&wrapper_rel_17_SCC_info_106,false,false);
addRelation("SCC.@info.107",&wrapper_rel_18_SCC_info_107,false,false);
addRelation("SCC.@info.108",&wrapper_rel_19_SCC_info_108,false,false);
addRelation("SCC.@info.109",&wrapper_rel_20_SCC_info_109,false,false);
addRelation("SCC.@info.11",&wrapper_rel_21_SCC_info_11,false,false);
addRelation("SCC.@info.110",&wrapper_rel_22_SCC_info_110,false,false);
addRelation("SCC.@info.111",&wrapper_rel_23_SCC_info_111,false,false);
addRelation("SCC.@info.112",&wrapper_rel_24_SCC_info_112,false,false);
addRelation("SCC.@info.113",&wrapper_rel_25_SCC_info_113,false,false);
addRelation("SCC.@info.114",&wrapper_rel_26_SCC_info_114,false,false);
addRelation("SCC.@info.115",&wrapper_rel_27_SCC_info_115,false,false);
addRelation("SCC.@info.116",&wrapper_rel_28_SCC_info_116,false,false);
addRelation("SCC.@info.117",&wrapper_rel_29_SCC_info_117,false,false);
addRelation("SCC.@info.118",&wrapper_rel_30_SCC_info_118,false,false);
addRelation("SCC.@info.119",&wrapper_rel_31_SCC_info_119,false,false);
addRelation("SCC.@info.12",&wrapper_rel_32_SCC_info_12,false,false);
addRelation("SCC.@info.120",&wrapper_rel_33_SCC_info_120,false,false);
addRelation("SCC.@info.121",&wrapper_rel_34_SCC_info_121,false,false);
addRelation("SCC.@info.122",&wrapper_rel_35_SCC_info_122,false,false);
addRelation("SCC.@info.123",&wrapper_rel_36_SCC_info_123,false,false);
addRelation("SCC.@info.124",&wrapper_rel_37_SCC_info_124,false,false);
addRelation("SCC.@info.125",&wrapper_rel_38_SCC_info_125,false,false);
addRelation("SCC.@info.126",&wrapper_rel_39_SCC_info_126,false,false);
addRelation("SCC.@info.127",&wrapper_rel_40_SCC_info_127,false,false);
addRelation("SCC.@info.128",&wrapper_rel_41_SCC_info_128,false,false);
addRelation("SCC.@info.129",&wrapper_rel_42_SCC_info_129,false,false);
addRelation("SCC.@info.13",&wrapper_rel_43_SCC_info_13,false,false);
addRelation("SCC.@info.130",&wrapper_rel_44_SCC_info_130,false,false);
addRelation("SCC.@info.131",&wrapper_rel_45_SCC_info_131,false,false);
addRelation("SCC.@info.132",&wrapper_rel_46_SCC_info_132,false,false);
addRelation("SCC.@info.133",&wrapper_rel_47_SCC_info_133,false,false);
addRelation("SCC.@info.134",&wrapper_rel_48_SCC_info_134,false,false);
addRelation("SCC.@info.135",&wrapper_rel_49_SCC_info_135,false,false);
addRelation("SCC.@info.136",&wrapper_rel_50_SCC_info_136,false,false);
addRelation("SCC.@info.137",&wrapper_rel_51_SCC_info_137,false,false);
addRelation("SCC.@info.138",&wrapper_rel_52_SCC_info_138,false,false);
addRelation("SCC.@info.139",&wrapper_rel_53_SCC_info_139,false,false);
addRelation("SCC.@info.14",&wrapper_rel_54_SCC_info_14,false,false);
addRelation("SCC.@info.140",&wrapper_rel_55_SCC_info_140,false,false);
addRelation("SCC.@info.141",&wrapper_rel_56_SCC_info_141,false,false);
addRelation("SCC.@info.142",&wrapper_rel_57_SCC_info_142,false,false);
addRelation("SCC.@info.143",&wrapper_rel_58_SCC_info_143,false,false);
addRelation("SCC.@info.144",&wrapper_rel_59_SCC_info_144,false,false);
addRelation("SCC.@info.145",&wrapper_rel_60_SCC_info_145,false,false);
addRelation("SCC.@info.146",&wrapper_rel_61_SCC_info_146,false,false);
addRelation("SCC.@info.147",&wrapper_rel_62_SCC_info_147,false,false);
addRelation("SCC.@info.148",&wrapper_rel_63_SCC_info_148,false,false);
addRelation("SCC.@info.149",&wrapper_rel_64_SCC_info_149,false,false);
addRelation("SCC.@info.15",&wrapper_rel_65_SCC_info_15,false,false);
addRelation("SCC.@info.150",&wrapper_rel_66_SCC_info_150,false,false);
addRelation("SCC.@info.151",&wrapper_rel_67_SCC_info_151,false,false);
addRelation("SCC.@info.16",&wrapper_rel_68_SCC_info_16,false,false);
addRelation("SCC.@info.17",&wrapper_rel_69_SCC_info_17,false,false);
addRelation("SCC.@info.18",&wrapper_rel_70_SCC_info_18,false,false);
addRelation("SCC.@info.19",&wrapper_rel_71_SCC_info_19,false,false);
addRelation("SCC.@info.2",&wrapper_rel_72_SCC_info_2,false,false);
addRelation("SCC.@info.20",&wrapper_rel_73_SCC_info_20,false,false);
addRelation("SCC.@info.21",&wrapper_rel_74_SCC_info_21,false,false);
addRelation("SCC.@info.22",&wrapper_rel_75_SCC_info_22,false,false);
addRelation("SCC.@info.23",&wrapper_rel_76_SCC_info_23,false,false);
addRelation("SCC.@info.24",&wrapper_rel_77_SCC_info_24,false,false);
addRelation("SCC.@info.25",&wrapper_rel_78_SCC_info_25,false,false);
addRelation("SCC.@info.26",&wrapper_rel_79_SCC_info_26,false,false);
addRelation("SCC.@info.27",&wrapper_rel_80_SCC_info_27,false,false);
addRelation("SCC.@info.28",&wrapper_rel_81_SCC_info_28,false,false);
addRelation("SCC.@info.29",&wrapper_rel_82_SCC_info_29,false,false);
addRelation("SCC.@info.3",&wrapper_rel_83_SCC_info_3,false,false);
addRelation("SCC.@info.30",&wrapper_rel_84_SCC_info_30,false,false);
addRelation("SCC.@info.31",&wrapper_rel_85_SCC_info_31,false,false);
addRelation("SCC.@info.32",&wrapper_rel_86_SCC_info_32,false,false);
addRelation("SCC.@info.33",&wrapper_rel_87_SCC_info_33,false,false);
addRelation("SCC.@info.34",&wrapper_rel_88_SCC_info_34,false,false);
addRelation("SCC.@info.35",&wrapper_rel_89_SCC_info_35,false,false);
addRelation("SCC.@info.36",&wrapper_rel_90_SCC_info_36,false,false);
addRelation("SCC.@info.37",&wrapper_rel_91_SCC_info_37,false,false);
addRelation("SCC.@info.38",&wrapper_rel_92_SCC_info_38,false,false);
addRelation("SCC.@info.39",&wrapper_rel_93_SCC_info_39,false,false);
addRelation("SCC.@info.4",&wrapper_rel_94_SCC_info_4,false,false);
addRelation("SCC.@info.40",&wrapper_rel_95_SCC_info_40,false,false);
addRelation("SCC.@info.41",&wrapper_rel_96_SCC_info_41,false,false);
addRelation("SCC.@info.42",&wrapper_rel_97_SCC_info_42,false,false);
addRelation("SCC.@info.43",&wrapper_rel_98_SCC_info_43,false,false);
addRelation("SCC.@info.44",&wrapper_rel_99_SCC_info_44,false,false);
addRelation("SCC.@info.45",&wrapper_rel_100_SCC_info_45,false,false);
addRelation("SCC.@info.46",&wrapper_rel_101_SCC_info_46,false,false);
addRelation("SCC.@info.47",&wrapper_rel_102_SCC_info_47,false,false);
addRelation("SCC.@info.48",&wrapper_rel_103_SCC_info_48,false,false);
addRelation("SCC.@info.49",&wrapper_rel_104_SCC_info_49,false,false);
addRelation("SCC.@info.5",&wrapper_rel_105_SCC_info_5,false,false);
addRelation("SCC.@info.50",&wrapper_rel_106_SCC_info_50,false,false);
addRelation("SCC.@info.51",&wrapper_rel_107_SCC_info_51,false,false);
addRelation("SCC.@info.52",&wrapper_rel_108_SCC_info_52,false,false);
addRelation("SCC.@info.53",&wrapper_rel_109_SCC_info_53,false,false);
addRelation("SCC.@info.54",&wrapper_rel_110_SCC_info_54,false,false);
addRelation("SCC.@info.55",&wrapper_rel_111_SCC_info_55,false,false);
addRelation("SCC.@info.56",&wrapper_rel_112_SCC_info_56,false,false);
addRelation("SCC.@info.57",&wrapper_rel_113_SCC_info_57,false,false);
addRelation("SCC.@info.58",&wrapper_rel_114_SCC_info_58,false,false);
addRelation("SCC.@info.59",&wrapper_rel_115_SCC_info_59,false,false);
addRelation("SCC.@info.6",&wrapper_rel_116_SCC_info_6,false,false);
addRelation("SCC.@info.60",&wrapper_rel_117_SCC_info_60,false,false);
addRelation("SCC.@info.61",&wrapper_rel_118_SCC_info_61,false,false);
addRelation("SCC.@info.62",&wrapper_rel_119_SCC_info_62,false,false);
addRelation("SCC.@info.63",&wrapper_rel_120_SCC_info_63,false,false);
addRelation("SCC.@info.64",&wrapper_rel_121_SCC_info_64,false,false);
addRelation("SCC.@info.65",&wrapper_rel_122_SCC_info_65,false,false);
addRelation("SCC.@info.66",&wrapper_rel_123_SCC_info_66,false,false);
addRelation("SCC.@info.67",&wrapper_rel_124_SCC_info_67,false,false);
addRelation("SCC.@info.68",&wrapper_rel_125_SCC_info_68,false,false);
addRelation("SCC.@info.69",&wrapper_rel_126_SCC_info_69,false,false);
addRelation("SCC.@info.7",&wrapper_rel_127_SCC_info_7,false,false);
addRelation("SCC.@info.70",&wrapper_rel_128_SCC_info_70,false,false);
addRelation("SCC.@info.71",&wrapper_rel_129_SCC_info_71,false,false);
addRelation("SCC.@info.72",&wrapper_rel_130_SCC_info_72,false,false);
addRelation("SCC.@info.73",&wrapper_rel_131_SCC_info_73,false,false);
addRelation("SCC.@info.74",&wrapper_rel_132_SCC_info_74,false,false);
addRelation("SCC.@info.75",&wrapper_rel_133_SCC_info_75,false,false);
addRelation("SCC.@info.76",&wrapper_rel_134_SCC_info_76,false,false);
addRelation("SCC.@info.77",&wrapper_rel_135_SCC_info_77,false,false);
addRelation("SCC.@info.78",&wrapper_rel_136_SCC_info_78,false,false);
addRelation("SCC.@info.79",&wrapper_rel_137_SCC_info_79,false,false);
addRelation("SCC.@info.8",&wrapper_rel_138_SCC_info_8,false,false);
addRelation("SCC.@info.80",&wrapper_rel_139_SCC_info_80,false,false);
addRelation("SCC.@info.81",&wrapper_rel_140_SCC_info_81,false,false);
addRelation("SCC.@info.82",&wrapper_rel_141_SCC_info_82,false,false);
addRelation("SCC.@info.83",&wrapper_rel_142_SCC_info_83,false,false);
addRelation("SCC.@info.84",&wrapper_rel_143_SCC_info_84,false,false);
addRelation("SCC.@info.85",&wrapper_rel_144_SCC_info_85,false,false);
addRelation("SCC.@info.86",&wrapper_rel_145_SCC_info_86,false,false);
addRelation("SCC.@info.87",&wrapper_rel_146_SCC_info_87,false,false);
addRelation("SCC.@info.88",&wrapper_rel_147_SCC_info_88,false,false);
addRelation("SCC.@info.89",&wrapper_rel_148_SCC_info_89,false,false);
addRelation("SCC.@info.9",&wrapper_rel_149_SCC_info_9,false,false);
addRelation("SCC.@info.90",&wrapper_rel_150_SCC_info_90,false,false);
addRelation("SCC.@info.91",&wrapper_rel_151_SCC_info_91,false,false);
addRelation("SCC.@info.92",&wrapper_rel_152_SCC_info_92,false,false);
addRelation("SCC.@info.93",&wrapper_rel_153_SCC_info_93,false,false);
addRelation("SCC.@info.94",&wrapper_rel_154_SCC_info_94,false,false);
addRelation("SCC.@info.95",&wrapper_rel_155_SCC_info_95,false,false);
addRelation("SCC.@info.96",&wrapper_rel_156_SCC_info_96,false,false);
addRelation("SCC.@info.97",&wrapper_rel_157_SCC_info_97,false,false);
addRelation("SCC.@info.98",&wrapper_rel_158_SCC_info_98,false,false);
addRelation("SCC.@info.99",&wrapper_rel_159_SCC_info_99,false,false);
addRelation("invent_Path.@info.1",&wrapper_rel_160_invent_Path_info_1,false,false);
addRelation("invent_Path.@info.10",&wrapper_rel_161_invent_Path_info_10,false,false);
addRelation("invent_Path.@info.11",&wrapper_rel_162_invent_Path_info_11,false,false);
addRelation("invent_Path.@info.12",&wrapper_rel_163_invent_Path_info_12,false,false);
addRelation("invent_Path.@info.13",&wrapper_rel_164_invent_Path_info_13,false,false);
addRelation("invent_Path.@info.14",&wrapper_rel_165_invent_Path_info_14,false,false);
addRelation("invent_Path.@info.15",&wrapper_rel_166_invent_Path_info_15,false,false);
addRelation("invent_Path.@info.16",&wrapper_rel_167_invent_Path_info_16,false,false);
addRelation("invent_Path.@info.17",&wrapper_rel_168_invent_Path_info_17,false,false);
addRelation("invent_Path.@info.18",&wrapper_rel_169_invent_Path_info_18,false,false);
addRelation("invent_Path.@info.19",&wrapper_rel_170_invent_Path_info_19,false,false);
addRelation("invent_Path.@info.2",&wrapper_rel_171_invent_Path_info_2,false,false);
addRelation("invent_Path.@info.20",&wrapper_rel_172_invent_Path_info_20,false,false);
addRelation("invent_Path.@info.21",&wrapper_rel_173_invent_Path_info_21,false,false);
addRelation("invent_Path.@info.22",&wrapper_rel_174_invent_Path_info_22,false,false);
addRelation("invent_Path.@info.23",&wrapper_rel_175_invent_Path_info_23,false,false);
addRelation("invent_Path.@info.24",&wrapper_rel_176_invent_Path_info_24,false,false);
addRelation("invent_Path.@info.25",&wrapper_rel_177_invent_Path_info_25,false,false);
addRelation("invent_Path.@info.26",&wrapper_rel_178_invent_Path_info_26,false,false);
addRelation("invent_Path.@info.27",&wrapper_rel_179_invent_Path_info_27,false,false);
addRelation("invent_Path.@info.28",&wrapper_rel_180_invent_Path_info_28,false,false);
addRelation("invent_Path.@info.29",&wrapper_rel_181_invent_Path_info_29,false,false);
addRelation("invent_Path.@info.3",&wrapper_rel_182_invent_Path_info_3,false,false);
addRelation("invent_Path.@info.30",&wrapper_rel_183_invent_Path_info_30,false,false);
addRelation("invent_Path.@info.31",&wrapper_rel_184_invent_Path_info_31,false,false);
addRelation("invent_Path.@info.32",&wrapper_rel_185_invent_Path_info_32,false,false);
addRelation("invent_Path.@info.33",&wrapper_rel_186_invent_Path_info_33,false,false);
addRelation("invent_Path.@info.34",&wrapper_rel_187_invent_Path_info_34,false,false);
addRelation("invent_Path.@info.35",&wrapper_rel_188_invent_Path_info_35,false,false);
addRelation("invent_Path.@info.36",&wrapper_rel_189_invent_Path_info_36,false,false);
addRelation("invent_Path.@info.37",&wrapper_rel_190_invent_Path_info_37,false,false);
addRelation("invent_Path.@info.38",&wrapper_rel_191_invent_Path_info_38,false,false);
addRelation("invent_Path.@info.39",&wrapper_rel_192_invent_Path_info_39,false,false);
addRelation("invent_Path.@info.4",&wrapper_rel_193_invent_Path_info_4,false,false);
addRelation("invent_Path.@info.40",&wrapper_rel_194_invent_Path_info_40,false,false);
addRelation("invent_Path.@info.41",&wrapper_rel_195_invent_Path_info_41,false,false);
addRelation("invent_Path.@info.42",&wrapper_rel_196_invent_Path_info_42,false,false);
addRelation("invent_Path.@info.43",&wrapper_rel_197_invent_Path_info_43,false,false);
addRelation("invent_Path.@info.44",&wrapper_rel_198_invent_Path_info_44,false,false);
addRelation("invent_Path.@info.45",&wrapper_rel_199_invent_Path_info_45,false,false);
addRelation("invent_Path.@info.46",&wrapper_rel_200_invent_Path_info_46,false,false);
addRelation("invent_Path.@info.47",&wrapper_rel_201_invent_Path_info_47,false,false);
addRelation("invent_Path.@info.48",&wrapper_rel_202_invent_Path_info_48,false,false);
addRelation("invent_Path.@info.49",&wrapper_rel_203_invent_Path_info_49,false,false);
addRelation("invent_Path.@info.5",&wrapper_rel_204_invent_Path_info_5,false,false);
addRelation("invent_Path.@info.6",&wrapper_rel_205_invent_Path_info_6,false,false);
addRelation("invent_Path.@info.7",&wrapper_rel_206_invent_Path_info_7,false,false);
addRelation("invent_Path.@info.8",&wrapper_rel_207_invent_Path_info_8,false,false);
addRelation("invent_Path.@info.9",&wrapper_rel_208_invent_Path_info_9,false,false);
}
~Sf_souffle_small() {
}
private:
void runFunction(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1, bool performIO = false) {
SignalHandler::instance()->set();
std::atomic<size_t> iter(0);

// -- query evaluation --
/* BEGIN STRATUM 0 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Edge.facts"},{"name","Edge"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Edge);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 0 */
/* BEGIN STRATUM 1 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 1 */
/* BEGIN STRATUM 2 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,5,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(117,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   Edge(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [31:1-31:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(117),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(5)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,13,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(99,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   Edge(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [63:1-63:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(99),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(13)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,16,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(118,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   Edge(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [71:1-71:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(118),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(16)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,21,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(9,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [92:1-92:60])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(21)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,24,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(105,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v1,v2,_,@level_num_2),
   Edge(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [100:1-100:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(105),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(24)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,29,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(66,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   Edge(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [125:1-125:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(29)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,30,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(130,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   Edge(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [131:1-131:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(130),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(30)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,31,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(0,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [136:1-136:46])_");
if(((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,32,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [141:1-141:75])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(32)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,34,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(85,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2),
   Edge(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [159:1-159:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,38,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(167,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v1,v2,_,@level_num_2),
   Edge(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [170:1-170:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(167),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(38)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,40,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(148,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v1,_,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [181:1-181:76])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(148),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(40)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,48,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(107,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   Edge(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [212:1-212:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(107),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_3_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
}
}
}
}
}
}
rel_4_delta_invent_Path->insertAll(*rel_3_invent_Path);
iter = 0;
for(;;) {
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,1,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(508,_,@level_num_0),
   invent_Path(v0,_,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [17:1-17:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(508),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,1,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(508,_,@level_num_0),
   invent_Path(v0,_,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [17:1-17:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(508),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,2,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(455,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [20:1-20:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(455),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,2,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(455,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [20:1-20:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(455),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,3,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(503,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [26:1-26:97])_");
if(((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(503),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(3)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,4,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(496,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [28:1-28:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(496),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,4,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(496,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [28:1-28:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(496),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,6,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(604,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v1,_,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [32:1-32:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(604),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,6,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(604,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v1,_,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [32:1-32:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(604),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,7,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(322,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   Edge(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [37:1-37:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(322),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,8,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(544,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [39:1-39:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(544),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,8,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(544,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [39:1-39:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(544),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,8,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(544,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [39:1-39:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(544),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,9,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(380,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [42:1-42:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(380),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,9,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(380,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [42:1-42:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(380),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,10,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(563,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [50:1-50:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(563),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,10,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(563,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [50:1-50:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(563),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,10,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(563,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [50:1-50:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(563),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,11,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(368,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [52:1-52:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(368),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,11,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(368,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [52:1-52:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(368),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,12,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [60:1-60:75])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,12,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [60:1-60:75])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,14,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(209,_,@level_num_0),
   Edge(_,v0,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [65:1-65:83])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(209),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(14)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,15,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(579,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [68:1-68:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,15,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(579,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [68:1-68:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,15,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(579,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [68:1-68:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,17,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(23,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [72:1-72:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(17)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,18,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(247,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v1,v0,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [79:1-79:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(247),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(18)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,19,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(219,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [85:1-85:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(219),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(19)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(523,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v0,_,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [89:1-89:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(523),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(523,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v0,_,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [89:1-89:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(523),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,22,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(555,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [94:1-94:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(555),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,22,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(555,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [94:1-94:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(555),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,22,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(555,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [94:1-94:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(555),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,23,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(574,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [97:1-97:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(574),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,23,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(574,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [97:1-97:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(574),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,23,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(574,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [97:1-97:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(574),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,25,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(302,_,@level_num_0),
   Edge(v1,_,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [104:1-104:83])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(302),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(25)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,26,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(230,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v1,v0,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [110:1-110:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(230),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(26)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,27,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(546,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [111:1-111:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(546),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,27,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(546,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [111:1-111:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(546),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,27,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(546,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [111:1-111:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(546),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,28,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(434,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [124:1-124:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(434),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,28,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(434,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [124:1-124:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(434),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,33,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(307,_,@level_num_0),
   Edge(v1,_,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [152:1-152:83])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(307),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(33)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,35,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(507,_,@level_num_0),
   invent_Path(_,v0,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [163:1-163:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(507),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,35,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(507,_,@level_num_0),
   invent_Path(_,v0,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [163:1-163:97])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(507),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,36,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(645,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [164:1-164:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(645),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,36,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(645,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [164:1-164:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(645),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,36,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(645,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [164:1-164:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(645),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,37,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(636,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [167:1-167:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(636),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,37,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(636,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [167:1-167:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(636),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,37,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(636,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [167:1-167:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(636),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,39,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(433,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [173:1-173:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(433),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,39,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(433,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [173:1-173:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(433),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,41,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(375,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [187:1-187:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(375),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,41,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(375,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [187:1-187:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(375),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,42,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(268,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [197:1-197:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(268),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,43,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(296,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   Edge(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [198:1-198:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(296),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,44,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(392,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [200:1-200:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(392),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,44,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(392,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [200:1-200:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(392),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,45,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(299,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [201:1-201:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(299),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(45)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,46,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(527,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [205:1-205:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(527),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,46,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(527,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [205:1-205:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(527),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,46,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(527,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [205:1-205:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(527),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,47,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(377,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [211:1-211:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(377),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,47,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(377,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [211:1-211:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(377),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,49,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(557,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [213:1-213:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(557),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_delta_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) && (!(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,49,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(557,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [213:1-213:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(557),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_4_delta_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_4_delta_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(invent_Path(v0,v1,49,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(557,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [213:1-213:97])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_4_delta_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt,rel_4_delta_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt,rel_5_new_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(557),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_4_delta_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_4_delta_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_5_new_invent_Path->insert(tuple,READ_OP_CONTEXT(rel_5_new_invent_Path_op_ctxt));
}
}
}
}
}
}
}
if(rel_5_new_invent_Path->empty()) break;
rel_3_invent_Path->insertAll(*rel_5_new_invent_Path);
std::swap(rel_4_delta_invent_Path, rel_5_new_invent_Path);
rel_5_new_invent_Path->purge();
iter++;
}
iter = 0;
if (!isHintsProfilingEnabled()) rel_4_delta_invent_Path->purge();
if (!isHintsProfilingEnabled()) rel_5_new_invent_Path->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./invent_Path.csv"},{"name","invent_Path"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_3_invent_Path);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 2 */
/* BEGIN STRATUM 3 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,3,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(864,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [21:1-21:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(864),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(3)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,4,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(904,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [22:1-22:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(904),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,5,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1702,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [23:1-23:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1702),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(5)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,8,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(852,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(_,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [27:1-27:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(852),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,9,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(783,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   Edge(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [29:1-29:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(783),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,18,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1330,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [43:1-43:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1330),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(18)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,19,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1325,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [44:1-44:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1325),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(19)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,23,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1299,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [48:1-48:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1299),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,24,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1789,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [49:1-49:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1789),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(24)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,25,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1269,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [51:1-51:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1269),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(25)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,26,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(814,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [53:1-53:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(814),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(26)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,27,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1677,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [54:1-54:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1677),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,30,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(903,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   Edge(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [57:1-57:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(903),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(30)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,32,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(952,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [59:1-59:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(952),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(32)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,33,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1727,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [61:1-61:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1727),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(33)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,37,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(749,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   Edge(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [67:1-67:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(749),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,39,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(877,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   Edge(v1,v2,_,@level_num_2),
   Edge(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [70:1-70:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(877),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,41,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(727,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [74:1-74:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(727),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,45,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1288,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [78:1-78:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1288),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(45)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,49,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1683,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [83:1-83:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1683),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,51,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(862,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [86:1-86:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(862),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(51)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,53,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(963,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   Edge(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [88:1-88:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(963),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(53)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,54,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(910,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [90:1-90:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(910),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(54)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,61,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(967,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [101:1-101:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(967),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(61)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,64,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(956,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [105:1-105:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(956),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(64)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,65,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1283,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [106:1-106:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1283),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(65)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,67,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1639,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [108:1-108:90])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1639),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(67)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,71,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(837,_,@level_num_0),
   Edge(v1,_,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [114:1-114:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(837),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(71)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,73,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(665,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [116:1-116:54])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(665),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(73)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,75,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(692,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [118:1-118:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(692),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(75)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,80,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(820,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   Edge(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [123:1-123:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(820),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(80)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,81,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(778,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2),
   Edge(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [126:1-126:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(778),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(81)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,84,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(742,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   Edge(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [129:1-129:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(742),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(84)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,87,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(748,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   Edge(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [133:1-133:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(748),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(87)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,88,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(743,_,@level_num_0),
   Edge(_,v0,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [134:1-134:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(743),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(88)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,96,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(948,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [144:1-144:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(948),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(96)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,101,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1199,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [149:1-149:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1199),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(101)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,104,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(651,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [153:1-153:47])_");
if(((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(651),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(104)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,106,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(811,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [155:1-155:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(811),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(106)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,109,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1779,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [158:1-158:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1779),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(109)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,111,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(988,_,@level_num_0),
   Edge(v1,_,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [161:1-161:75])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(988),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(111)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,113,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1293,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [165:1-165:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1293),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(113)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,116,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1011,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [169:1-169:76])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1011),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(116)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,120,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1752,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [175:1-175:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1752),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(120)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,124,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1662,_,@level_num_0),
   invent_Path(v0,_,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [179:1-179:90])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1662),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(124)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,126,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1200,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [182:1-182:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1200),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(126)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,127,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1244,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [183:1-183:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1244),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(127)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,135,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(983,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   Edge(v1,v2,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [192:1-192:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(983),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(135)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,139,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1698,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [196:1-196:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1698),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(139)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,143,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(880,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [204:1-204:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(880),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(143)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,148,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1688,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   invent_Path(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [210:1-210:90])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1688),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(148)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,149,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1297,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   invent_Path(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [214:1-214:83])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1297),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(149)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,150,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(897,_,@level_num_0),
   Edge(_,v0,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [215:1-215:75])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(897),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(150)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_6_SCC->insert(tuple,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
}
}
}
}
}
rel_7_delta_SCC->insertAll(*rel_6_SCC);
iter = 0;
for(;;) {
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,1,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1381,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [18:1-18:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1381),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,2,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1599,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [19:1-19:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1599),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,2,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1599,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [19:1-19:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1599),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,6,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1997,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [24:1-24:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1997),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,6,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1997,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [24:1-24:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1997),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,7,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1954,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [25:1-25:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1954),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,7,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1954,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [25:1-25:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1954),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,10,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2089,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [30:1-30:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2089),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,10,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2089,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [30:1-30:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2089),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,11,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1891,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [33:1-33:82])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1891),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,12,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1442,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [34:1-34:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1442),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,13,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1123,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   Edge(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [35:1-35:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1123),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(13)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,14,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1386,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [36:1-36:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1386),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(14)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,15,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1886,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [38:1-38:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1886),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,16,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1916,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [40:1-40:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1916),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(16)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,17,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1887,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [41:1-41:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1887),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(17)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2217,_,@level_num_0),
   SCC(_,v1,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [45:1-45:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2217),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2217,_,@level_num_0),
   SCC(_,v1,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [45:1-45:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2217),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,21,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1452,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   invent_Path(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [46:1-46:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1452),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(21)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,22,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1568,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [47:1-47:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1568),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,22,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1568,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [47:1-47:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1568),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,28,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1153,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   Edge(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [55:1-55:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1153),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,29,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1847,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [56:1-56:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1847),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(29)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,31,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2241,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [58:1-58:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2241),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,31,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2241,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [58:1-58:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2241),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,34,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1541,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [62:1-62:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1541),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,34,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1541,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [62:1-62:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1541),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,35,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1505,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [64:1-64:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1505),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,35,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1505,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [64:1-64:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1505),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,36,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2024,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [66:1-66:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2024),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,36,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2024,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [66:1-66:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2024),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,38,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1851,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [69:1-69:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1851),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(38)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,40,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1793,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [73:1-73:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1793),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(40)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,42,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2028,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [75:1-75:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2028),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,42,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2028,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [75:1-75:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2028),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,43,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1596,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [76:1-76:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1596),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,43,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1596,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [76:1-76:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1596),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,44,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1122,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   Edge(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [77:1-77:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1122),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,46,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1849,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [80:1-80:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1849),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,47,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1046,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   Edge(v0,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [81:1-81:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1046),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,48,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2228,_,@level_num_0),
   SCC(v1,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [82:1-82:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2228),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,48,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2228,_,@level_num_0),
   SCC(v1,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [82:1-82:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2228),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,50,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2012,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [84:1-84:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2012),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(50)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,50,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2012,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [84:1-84:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2012),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(50)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,52,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1040,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   Edge(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [87:1-87:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1040),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(52)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,55,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1073,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   Edge(v2,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [91:1-91:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1073),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(55)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,56,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2067,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [93:1-93:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2067),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(56)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,56,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2067,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [93:1-93:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2067),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(56)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,57,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(686,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [95:1-95:53])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(686),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(57)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,58,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2103,_,@level_num_0),
   SCC(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [96:1-96:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2103),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,58,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2103,_,@level_num_0),
   SCC(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [96:1-96:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2103),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,58,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2103,_,@level_num_0),
   SCC(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [96:1-96:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2103),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,59,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1968,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [98:1-98:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1968),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(59)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,59,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1968,_,@level_num_0),
   invent_Path(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [98:1-98:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1968),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(59)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,60,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1520,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [99:1-99:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1520),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(60)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,60,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1520,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [99:1-99:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1520),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(60)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,62,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2059,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [102:1-102:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2059),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(62)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,62,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2059,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [102:1-102:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2059),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(62)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,63,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1037,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   SCC(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [103:1-103:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1037),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(63)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,66,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1099,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   Edge(v1,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [107:1-107:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1099),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(66)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,68,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1531,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [109:1-109:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1531),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(68)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,68,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1531,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [109:1-109:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1531),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(68)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,69,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2068,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   SCC(_,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [112:1-112:74])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2068),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(69)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,70,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2237,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [113:1-113:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2237),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(70)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,70,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2237,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [113:1-113:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2237),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(70)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,72,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1351,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [115:1-115:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1351),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(72)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,74,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1802,_,@level_num_0),
   invent_Path(v0,_,_,@level_num_1),
   SCC(v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [117:1-117:82])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1802),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(74)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,76,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2009,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [119:1-119:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2009),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(76)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,76,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2009,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [119:1-119:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2009),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(76)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,77,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2155,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [120:1-120:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2155),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,77,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2155,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [120:1-120:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2155),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,77,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2155,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [120:1-120:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2155),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,78,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1980,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [121:1-121:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1980),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(78)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,78,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1980,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [121:1-121:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1980),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(78)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,79,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1409,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [122:1-122:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1409),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(79)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,82,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1340,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [127:1-127:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1340),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(82)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,83,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1573,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [128:1-128:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1573),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(83)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,83,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1573,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [128:1-128:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1573),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(83)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,85,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(725,_,@level_num_0),
   SCC(v1,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [130:1-130:52])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(725),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(85)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,85,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(725,_,@level_num_0),
   SCC(v1,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [130:1-130:52])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(725),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(85)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,86,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2098,_,@level_num_0),
   SCC(v0,v1,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [132:1-132:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2098),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(86)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,86,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2098,_,@level_num_0),
   SCC(v0,v1,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [132:1-132:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2098),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(86)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,89,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1985,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [135:1-135:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1985),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(89)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,89,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1985,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [135:1-135:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1985),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(89)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,90,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1387,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v1,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [137:1-137:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1387),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(90)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,91,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1543,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [138:1-138:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1543),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(91)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,91,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1543,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [138:1-138:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1543),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(91)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,92,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2008,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   SCC(v0,v1,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [139:1-139:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2008),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(92)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,92,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2008,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   SCC(v0,v1,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [139:1-139:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2008),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(92)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,93,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1869,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [140:1-140:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1869),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(93)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,94,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1803,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [142:1-142:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1803),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(94)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,95,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1896,_,@level_num_0),
   invent_Path(v0,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [143:1-143:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1896),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(95)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,97,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1350,_,@level_num_0),
   Edge(v1,v0,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [145:1-145:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1350),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(97)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,98,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2052,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [146:1-146:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2052),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(98)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,98,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2052,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [146:1-146:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2052),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(98)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,99,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2230,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [147:1-147:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2230),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(99)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,99,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2230,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [147:1-147:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2230),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(99)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,100,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2118,_,@level_num_0),
   SCC(v0,_,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [148:1-148:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2118),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(100)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,100,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2118,_,@level_num_0),
   SCC(v0,_,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [148:1-148:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2118),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(100)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,102,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1454,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [150:1-150:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1454),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(102)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,103,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1551,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [151:1-151:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1551),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(103)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,103,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1551,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [151:1-151:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1551),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(103)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,105,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1612,_,@level_num_0),
   Edge(v0,v1,_,@level_num_1),
   SCC(_,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [154:1-154:67])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1612),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(105)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,107,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1625,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [156:1-156:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1625),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(107)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,107,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1625,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [156:1-156:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1625),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(107)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,108,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1579,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [157:1-157:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(108)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,108,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1579,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [157:1-157:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(108)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,110,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1947,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [160:1-160:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1947),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(110)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,110,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1947,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [160:1-160:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1947),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(110)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,112,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1131,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [162:1-162:68])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1131),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(112)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,114,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1407,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v0,v1,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [166:1-166:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1407),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(114)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,115,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(714,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [168:1-168:52])_");
if(((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(714),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(115)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,117,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2064,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [171:1-171:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2064),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(117)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,117,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2064,_,@level_num_0),
   invent_Path(v1,v0,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [171:1-171:74])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2064),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(117)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,118,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2156,_,@level_num_0),
   SCC(v0,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [172:1-172:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2156),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,118,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2156,_,@level_num_0),
   SCC(v0,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [172:1-172:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2156),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,118,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2156,_,@level_num_0),
   SCC(v0,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [172:1-172:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2156),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,119,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1471,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [174:1-174:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1471),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(119)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,121,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1479,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v1,v2,_,@level_num_2),
   invent_Path(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [176:1-176:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1479),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(121)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,122,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1602,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [177:1-177:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1602),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(122)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,122,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1602,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [177:1-177:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1602),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(122)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,123,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1379,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [178:1-178:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1379),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(123)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,125,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1462,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [180:1-180:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1462),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(125)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,128,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1082,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v2,v1,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [184:1-184:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1082),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(128)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,129,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2114,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [185:1-185:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2114),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,129,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2114,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [185:1-185:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2114),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,129,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2114,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v0,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [185:1-185:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2114),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env3[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,130,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2129,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [186:1-186:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2129),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,130,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2129,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [186:1-186:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2129),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,130,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2129,_,@level_num_0),
   SCC(v2,v1,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [186:1-186:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2129),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,131,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1879,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [188:1-188:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1879),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(131)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,132,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1098,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [189:1-189:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1098),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(132)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,133,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1926,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   invent_Path(v2,v1,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [190:1-190:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1926),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(133)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,134,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1841,_,@level_num_0),
   invent_Path(v2,v0,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [191:1-191:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1841),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(134)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,136,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2124,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1),
   SCC(_,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [193:1-193:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2124),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(136)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,136,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2124,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1),
   SCC(_,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [193:1-193:66])_");
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2124),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(136)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,137,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1522,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [194:1-194:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1522),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(137)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,137,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1522,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [194:1-194:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1522),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(137)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,138,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1626,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [195:1-195:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1626),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(138)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,138,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1626,_,@level_num_0),
   Edge(v2,v0,_,@level_num_1),
   SCC(v2,v1,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [195:1-195:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1626),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(138)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,140,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1890,_,@level_num_0),
   invent_Path(v2,v1,_,@level_num_1),
   invent_Path(v2,v0,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [199:1-199:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1890),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[1],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(140)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,141,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2147,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [202:1-202:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2147),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,141,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2147,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [202:1-202:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2147),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,141,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(2147,_,@level_num_0),
   SCC(v2,v0,_,@level_num_1),
   SCC(v1,v0,_,@level_num_2),
   SCC(v2,v1,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [202:1-202:66])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2147),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_6_SCC) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env2[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,142,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2100,_,@level_num_0),
   SCC(v1,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [203:1-203:66])_");
if(((!(rel_2_Rule->empty())) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2100),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_7_delta_SCC) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({env0[2], env1[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(142)),static_cast<RamDomain>((std::max({env0[2], env1[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,144,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1577,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [206:1-206:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1577),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((!([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) && (!(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())))) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(144)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,144,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1577,_,@level_num_0),
   Edge(v0,v2,_,@level_num_1),
   SCC(v2,v0,_,@level_num_2),
   SCC(v1,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [206:1-206:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1577),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env3[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env3[0]),static_cast<RamDomain>(RamDomain(144)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,145,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1096,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   Edge(v0,v1,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [207:1-207:68])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1096),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(145)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,146,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1567,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [208:1-208:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_7_delta_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1567),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env2 : range) {
if( !(!rel_7_delta_SCC->equalRange_3(Tuple<RamDomain,4>({{env1[0],env2[0],0,0}}),READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt)).empty())) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(146)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,146,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1567,_,@level_num_0),
   Edge(v2,v1,_,@level_num_1),
   SCC(v0,v2,_,@level_num_2),
   SCC(v2,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [208:1-208:67])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1567),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(146)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,147,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1449,_,@level_num_0),
   Edge(v1,v2,_,@level_num_1),
   invent_Path(v1,v2,_,@level_num_2),
   SCC(v1,v0,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [209:1-209:75])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1449),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_1_Edge) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_delta_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env3[1],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env3[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(147)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(SCC(v0,v1,151,(max(max(max(@level_num_0,@level_num_1),@level_num_2),@level_num_3)+1)) :- 
   Rule(1878,_,@level_num_0),
   invent_Path(v1,v2,_,@level_num_1),
   invent_Path(v0,v2,_,@level_num_2),
   SCC(v0,v2,_,@level_num_3).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/scc_200/rules.small.dl [216:1-216:82])_");
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_7_delta_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_7_delta_SCC_op_ctxt,rel_7_delta_SCC->createContext());
CREATE_OP_CONTEXT(rel_8_new_SCC_op_ctxt,rel_8_new_SCC->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1878),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_invent_Path) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_7_delta_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_7_delta_SCC_op_ctxt));
for(const auto& env3 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{env2[0],env1[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[3] <= (std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,4> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(151)),static_cast<RamDomain>((std::max({std::max({std::max({env0[2], env1[3], }), env2[3], }), env3[3], })) + (RamDomain(1)))}});
rel_8_new_SCC->insert(tuple,READ_OP_CONTEXT(rel_8_new_SCC_op_ctxt));
}
}
}
}
}
}
}
if(rel_8_new_SCC->empty()) break;
rel_6_SCC->insertAll(*rel_8_new_SCC);
std::swap(rel_7_delta_SCC, rel_8_new_SCC);
rel_8_new_SCC->purge();
iter++;
}
iter = 0;
if (!isHintsProfilingEnabled()) rel_7_delta_SCC->purge();
if (!isHintsProfilingEnabled()) rel_8_new_SCC->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./SCC.csv"},{"name","SCC"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_SCC);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 3 */
/* BEGIN STRATUM 4 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.1(1,"v0,v1","Rule","Edge,v0,v1","invent_Path,v1,v2","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1381),
   Edge(v0,v1),
   invent_Path(v1,v2),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_9_SCC_info_1->insert(RamDomain(1),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(3),RamDomain(4),RamDomain(5));
}();
/* END STRATUM 4 */
/* BEGIN STRATUM 5 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.10(10,"v0,v1","Rule","invent_Path,v2,v1","SCC,v2,v1","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(2089),
   invent_Path(v2,v1),
   SCC(v2,v1),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_10_SCC_info_10->insert(RamDomain(10),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(7),RamDomain(27),RamDomain(28));
}();
/* END STRATUM 5 */
/* BEGIN STRATUM 6 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.100(100,"v0,v1","Rule","SCC,v0","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2118),
   SCC(v0,_),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_11_SCC_info_100->insert(RamDomain(100),RamDomain(0),RamDomain(1),RamDomain(123),RamDomain(8),RamDomain(124));
}();
/* END STRATUM 6 */
/* BEGIN STRATUM 7 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.101(101,"v0,v1","Rule","Edge,v2,v0","invent_Path,v2,v0","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1199),
   Edge(v2,v0),
   invent_Path(v2,v0),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_12_SCC_info_101->insert(RamDomain(101),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(16),RamDomain(13),RamDomain(125));
}();
/* END STRATUM 7 */
/* BEGIN STRATUM 8 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.102(102,"v0,v1","Rule","Edge,v2,v1","invent_Path,v2,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1454),
   Edge(v2,v1),
   invent_Path(v2,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_13_SCC_info_102->insert(RamDomain(102),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(26),RamDomain(8),RamDomain(126));
}();
/* END STRATUM 8 */
/* BEGIN STRATUM 9 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.103(103,"v0,v1","Rule","Edge,v0,v1","SCC,v1,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1551),
   Edge(v0,v1),
   SCC(v1,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_14_SCC_info_103->insert(RamDomain(103),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(30),RamDomain(27),RamDomain(127));
}();
/* END STRATUM 9 */
/* BEGIN STRATUM 10 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.104(104,"v0,v1","Rule","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(651),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_15_SCC_info_104->insert(RamDomain(104),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(128));
}();
/* END STRATUM 10 */
/* BEGIN STRATUM 11 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.105(105,"v0,v1","Rule","Edge,v0,v1","SCC,v1","SCC(v0,v1) :- 
   Rule(1612),
   Edge(v0,v1),
   SCC(_,v1).").
in file  [0:0-0:0])_");
rel_16_SCC_info_105->insert(RamDomain(105),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(39),RamDomain(129));
}();
/* END STRATUM 11 */
/* BEGIN STRATUM 12 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.106(106,"v0,v1","Rule","Edge,v0,v2","Edge,v2,v1","SCC(v0,v1) :- 
   Rule(811),
   Edge(v0,v2),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_17_SCC_info_106->insert(RamDomain(106),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(24),RamDomain(130));
}();
/* END STRATUM 12 */
/* BEGIN STRATUM 13 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.107(107,"v0,v1","Rule","Edge,v1,v2","SCC,v2,v1","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1625),
   Edge(v1,v2),
   SCC(v2,v1),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_18_SCC_info_107->insert(RamDomain(107),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(7),RamDomain(4),RamDomain(131));
}();
/* END STRATUM 13 */
/* BEGIN STRATUM 14 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.108(108,"v0,v1","Rule","Edge,v2,v0","SCC,v2,v0","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1579),
   Edge(v2,v0),
   SCC(v2,v0),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_19_SCC_info_108->insert(RamDomain(108),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(27),RamDomain(30),RamDomain(132));
}();
/* END STRATUM 14 */
/* BEGIN STRATUM 15 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.109(109,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v1,v2","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(1779),
   invent_Path(v2,v1),
   invent_Path(v1,v2),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_20_SCC_info_109->insert(RamDomain(109),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(3),RamDomain(16),RamDomain(133));
}();
/* END STRATUM 15 */
/* BEGIN STRATUM 16 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.11(11,"v0,v1","Rule","invent_Path,v2,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1891),
   invent_Path(v2,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_21_SCC_info_11->insert(RamDomain(11),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(7),RamDomain(29));
}();
/* END STRATUM 16 */
/* BEGIN STRATUM 17 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.110(110,"v0,v1","Rule","invent_Path,v1,v0","SCC,v1,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1947),
   invent_Path(v1,v0),
   SCC(v1,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_22_SCC_info_110->insert(RamDomain(110),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(8),RamDomain(20),RamDomain(134));
}();
/* END STRATUM 17 */
/* BEGIN STRATUM 18 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.111(111,"v0,v1","Rule","Edge,v1","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(988),
   Edge(v1,_),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_23_SCC_info_111->insert(RamDomain(111),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(13),RamDomain(135));
}();
/* END STRATUM 18 */
/* BEGIN STRATUM 19 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.112(112,"v0,v1","Rule","Edge,v2,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1131),
   Edge(v2,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_24_SCC_info_112->insert(RamDomain(112),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(7),RamDomain(136));
}();
/* END STRATUM 19 */
/* BEGIN STRATUM 20 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.113(113,"v0,v1","Rule","Edge,v1,v2","invent_Path,v1,v2","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1293),
   Edge(v1,v2),
   invent_Path(v1,v2),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_25_SCC_info_113->insert(RamDomain(113),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(3),RamDomain(13),RamDomain(137));
}();
/* END STRATUM 20 */
/* BEGIN STRATUM 21 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.114(114,"v0,v1","Rule","Edge,v0,v2","invent_Path,v0,v1","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1407),
   Edge(v0,v2),
   invent_Path(v0,v1),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_26_SCC_info_114->insert(RamDomain(114),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(13),RamDomain(30),RamDomain(138));
}();
/* END STRATUM 21 */
/* BEGIN STRATUM 22 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.115(115,"v0,v1","Rule","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(714),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_27_SCC_info_115->insert(RamDomain(115),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(139));
}();
/* END STRATUM 22 */
/* BEGIN STRATUM 23 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.116(116,"v0,v1","Rule","Edge,v1,v2","Edge,v2,v1","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(1011),
   Edge(v1,v2),
   Edge(v2,v1),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_28_SCC_info_116->insert(RamDomain(116),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(24),RamDomain(16),RamDomain(140));
}();
/* END STRATUM 23 */
/* BEGIN STRATUM 24 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.117(117,"v0,v1","Rule","invent_Path,v1,v0","SCC,v1,v2","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(2064),
   invent_Path(v1,v0),
   SCC(v1,v2),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_29_SCC_info_117->insert(RamDomain(117),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(30),RamDomain(7),RamDomain(141));
}();
/* END STRATUM 24 */
/* BEGIN STRATUM 25 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.118(118,"v0,v1","Rule","SCC,v0,v2","SCC,v2,v1","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(2156),
   SCC(v0,v2),
   SCC(v2,v1),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_30_SCC_info_118->insert(RamDomain(118),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(7),RamDomain(20),RamDomain(142));
}();
/* END STRATUM 25 */
/* BEGIN STRATUM 26 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.119(119,"v0,v1","Rule","Edge,v1,v2","SCC,v2,v1","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(1471),
   Edge(v1,v2),
   SCC(v2,v1),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_31_SCC_info_119->insert(RamDomain(119),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(7),RamDomain(16),RamDomain(143));
}();
/* END STRATUM 26 */
/* BEGIN STRATUM 27 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.12(12,"v0,v1","Rule","Edge,v0,v1","invent_Path,v1,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1442),
   Edge(v0,v1),
   invent_Path(v1,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_32_SCC_info_12->insert(RamDomain(12),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(3),RamDomain(30),RamDomain(31));
}();
/* END STRATUM 27 */
/* BEGIN STRATUM 28 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.120(120,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v2,v1","invent_Path,v1,v2","SCC(v0,v1) :- 
   Rule(1752),
   invent_Path(v1,v0),
   invent_Path(v2,v1),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_33_SCC_info_120->insert(RamDomain(120),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(26),RamDomain(3),RamDomain(144));
}();
/* END STRATUM 28 */
/* BEGIN STRATUM 29 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.121(121,"v0,v1","Rule","Edge,v2,v1","SCC,v1,v2","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(1479),
   Edge(v2,v1),
   SCC(v1,v2),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_34_SCC_info_121->insert(RamDomain(121),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(30),RamDomain(16),RamDomain(145));
}();
/* END STRATUM 29 */
/* BEGIN STRATUM 30 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.122(122,"v0,v1","Rule","Edge,v1,v2","SCC,v2,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1602),
   Edge(v1,v2),
   SCC(v2,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_35_SCC_info_122->insert(RamDomain(122),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(7),RamDomain(8),RamDomain(146));
}();
/* END STRATUM 30 */
/* BEGIN STRATUM 31 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.123(123,"v0,v1","Rule","Edge,v2,v0","invent_Path,v2,v1","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1379),
   Edge(v2,v0),
   invent_Path(v2,v1),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_36_SCC_info_123->insert(RamDomain(123),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(26),RamDomain(20),RamDomain(147));
}();
/* END STRATUM 31 */
/* BEGIN STRATUM 32 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.124(124,"v0,v1","Rule","invent_Path,v0","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(1662),
   invent_Path(v0,_),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_37_SCC_info_124->insert(RamDomain(124),RamDomain(0),RamDomain(1),RamDomain(95),RamDomain(15),RamDomain(148));
}();
/* END STRATUM 32 */
/* BEGIN STRATUM 33 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.125(125,"v0,v1","Rule","Edge,v0,v2","invent_Path,v1,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1462),
   Edge(v0,v2),
   invent_Path(v1,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_38_SCC_info_125->insert(RamDomain(125),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(3),RamDomain(30),RamDomain(149));
}();
/* END STRATUM 33 */
/* BEGIN STRATUM 34 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.126(126,"v0,v1","Rule","Edge,v0,v2","invent_Path,v0,v2","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(1200),
   Edge(v0,v2),
   invent_Path(v0,v2),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_39_SCC_info_126->insert(RamDomain(126),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(19),RamDomain(15),RamDomain(150));
}();
/* END STRATUM 34 */
/* BEGIN STRATUM 35 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.127(127,"v0,v1","Rule","Edge,v0,v2","invent_Path,v2,v1","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1244),
   Edge(v0,v2),
   invent_Path(v2,v1),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_40_SCC_info_127->insert(RamDomain(127),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(26),RamDomain(13),RamDomain(151));
}();
/* END STRATUM 35 */
/* BEGIN STRATUM 36 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.128(128,"v0,v1","Rule","Edge,v2,v0","Edge,v2,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1082),
   Edge(v2,v0),
   Edge(v2,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_41_SCC_info_128->insert(RamDomain(128),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(8),RamDomain(152));
}();
/* END STRATUM 36 */
/* BEGIN STRATUM 37 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.129(129,"v0,v1","Rule","SCC,v2,v0","SCC,v0,v2","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(2114),
   SCC(v2,v0),
   SCC(v0,v2),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_42_SCC_info_129->insert(RamDomain(129),RamDomain(0),RamDomain(1),RamDomain(27),RamDomain(4),RamDomain(20),RamDomain(153));
}();
/* END STRATUM 37 */
/* BEGIN STRATUM 38 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.13(13,"v0,v1","Rule","Edge,v2,v0","SCC,v2,v0","Edge,v1,v2","SCC(v0,v1) :- 
   Rule(1123),
   Edge(v2,v0),
   SCC(v2,v0),
   Edge(v1,v2).").
in file  [0:0-0:0])_");
rel_43_SCC_info_13->insert(RamDomain(13),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(27),RamDomain(6),RamDomain(32));
}();
/* END STRATUM 38 */
/* BEGIN STRATUM 39 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.130(130,"v0,v1","Rule","SCC,v2,v1","SCC,v0,v2","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2129),
   SCC(v2,v1),
   SCC(v0,v2),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_44_SCC_info_130->insert(RamDomain(130),RamDomain(0),RamDomain(1),RamDomain(7),RamDomain(4),RamDomain(8),RamDomain(154));
}();
/* END STRATUM 39 */
/* BEGIN STRATUM 40 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.131(131,"v0,v1","Rule","invent_Path,v1,v2","invent_Path,v0,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1879),
   invent_Path(v1,v2),
   invent_Path(v0,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_45_SCC_info_131->insert(RamDomain(131),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(19),RamDomain(27),RamDomain(155));
}();
/* END STRATUM 40 */
/* BEGIN STRATUM 41 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.132(132,"v0,v1","Rule","Edge,v2,v0","Edge,v0,v1","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1098),
   Edge(v2,v0),
   Edge(v0,v1),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_46_SCC_info_132->insert(RamDomain(132),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(2),RamDomain(7),RamDomain(156));
}();
/* END STRATUM 41 */
/* BEGIN STRATUM 42 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.133(133,"v0,v1","Rule","invent_Path,v2,v0","invent_Path,v2,v1","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1926),
   invent_Path(v2,v0),
   invent_Path(v2,v1),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_47_SCC_info_133->insert(RamDomain(133),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(26),RamDomain(7),RamDomain(157));
}();
/* END STRATUM 42 */
/* BEGIN STRATUM 43 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.134(134,"v0,v1","Rule","invent_Path,v2,v0","invent_Path,v1,v2","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1841),
   invent_Path(v2,v0),
   invent_Path(v1,v2),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_48_SCC_info_134->insert(RamDomain(134),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(3),RamDomain(8),RamDomain(158));
}();
/* END STRATUM 43 */
/* BEGIN STRATUM 44 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.135(135,"v0,v1","Rule","Edge,v2,v1","Edge,v1,v2","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(983),
   Edge(v2,v1),
   Edge(v1,v2),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_49_SCC_info_135->insert(RamDomain(135),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(6),RamDomain(13),RamDomain(159));
}();
/* END STRATUM 44 */
/* BEGIN STRATUM 45 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.136(136,"v0,v1","Rule","SCC,v1,v0","SCC,v0","SCC(v0,v1) :- 
   Rule(2124),
   SCC(v1,v0),
   SCC(_,v0).").
in file  [0:0-0:0])_");
rel_50_SCC_info_136->insert(RamDomain(136),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(123),RamDomain(160));
}();
/* END STRATUM 45 */
/* BEGIN STRATUM 46 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.137(137,"v0,v1","Rule","Edge,v1,v2","SCC,v0,v2","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1522),
   Edge(v1,v2),
   SCC(v0,v2),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_51_SCC_info_137->insert(RamDomain(137),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(4),RamDomain(8),RamDomain(161));
}();
/* END STRATUM 46 */
/* BEGIN STRATUM 47 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.138(138,"v0,v1","Rule","Edge,v2,v0","SCC,v2,v1","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1626),
   Edge(v2,v0),
   SCC(v2,v1),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_52_SCC_info_138->insert(RamDomain(138),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(7),RamDomain(30),RamDomain(162));
}();
/* END STRATUM 47 */
/* BEGIN STRATUM 48 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.139(139,"v0,v1","Rule","invent_Path,v0,v2","invent_Path,v1,v2","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1698),
   invent_Path(v0,v2),
   invent_Path(v1,v2),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_53_SCC_info_139->insert(RamDomain(139),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(3),RamDomain(13),RamDomain(163));
}();
/* END STRATUM 48 */
/* BEGIN STRATUM 49 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.14(14,"v0,v1","Rule","Edge,v2,v0","invent_Path,v2,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1386),
   Edge(v2,v0),
   invent_Path(v2,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_54_SCC_info_14->insert(RamDomain(14),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(26),RamDomain(8),RamDomain(33));
}();
/* END STRATUM 49 */
/* BEGIN STRATUM 50 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.140(140,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v2,v0","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1890),
   invent_Path(v2,v1),
   invent_Path(v2,v0),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_55_SCC_info_140->insert(RamDomain(140),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(16),RamDomain(27),RamDomain(164));
}();
/* END STRATUM 50 */
/* BEGIN STRATUM 51 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.141(141,"v0,v1","Rule","SCC,v2,v0","SCC,v1,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(2147),
   SCC(v2,v0),
   SCC(v1,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_56_SCC_info_141->insert(RamDomain(141),RamDomain(0),RamDomain(1),RamDomain(27),RamDomain(8),RamDomain(7),RamDomain(165));
}();
/* END STRATUM 51 */
/* BEGIN STRATUM 52 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.142(142,"v0,v1","Rule","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2100),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_57_SCC_info_142->insert(RamDomain(142),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(166));
}();
/* END STRATUM 52 */
/* BEGIN STRATUM 53 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.143(143,"v0,v1","Rule","Edge,v1,v0","Edge,v0,v1","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(880),
   Edge(v1,v0),
   Edge(v0,v1),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_58_SCC_info_143->insert(RamDomain(143),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(2),RamDomain(15),RamDomain(167));
}();
/* END STRATUM 53 */
/* BEGIN STRATUM 54 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.144(144,"v0,v1","Rule","Edge,v0,v2","SCC,v2,v0","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1577),
   Edge(v0,v2),
   SCC(v2,v0),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_59_SCC_info_144->insert(RamDomain(144),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(27),RamDomain(30),RamDomain(168));
}();
/* END STRATUM 54 */
/* BEGIN STRATUM 55 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.145(145,"v0,v1","Rule","Edge,v1,v2","Edge,v0,v1","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1096),
   Edge(v1,v2),
   Edge(v0,v1),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_60_SCC_info_145->insert(RamDomain(145),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(2),RamDomain(27),RamDomain(169));
}();
/* END STRATUM 55 */
/* BEGIN STRATUM 56 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.146(146,"v0,v1","Rule","Edge,v2,v1","SCC,v0,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1567),
   Edge(v2,v1),
   SCC(v0,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_61_SCC_info_146->insert(RamDomain(146),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(4),RamDomain(27),RamDomain(170));
}();
/* END STRATUM 56 */
/* BEGIN STRATUM 57 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.147(147,"v0,v1","Rule","Edge,v1,v2","invent_Path,v1,v2","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1449),
   Edge(v1,v2),
   invent_Path(v1,v2),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_62_SCC_info_147->insert(RamDomain(147),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(3),RamDomain(8),RamDomain(171));
}();
/* END STRATUM 57 */
/* BEGIN STRATUM 58 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.148(148,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v1,v0","invent_Path,v0,v2","SCC(v0,v1) :- 
   Rule(1688),
   invent_Path(v2,v1),
   invent_Path(v1,v0),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_63_SCC_info_148->insert(RamDomain(148),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(15),RamDomain(19),RamDomain(172));
}();
/* END STRATUM 58 */
/* BEGIN STRATUM 59 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.149(149,"v0,v1","Rule","Edge,v1,v2","invent_Path,v1,v2","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(1297),
   Edge(v1,v2),
   invent_Path(v1,v2),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_64_SCC_info_149->insert(RamDomain(149),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(3),RamDomain(15),RamDomain(173));
}();
/* END STRATUM 59 */
/* BEGIN STRATUM 60 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.15(15,"v0,v1","Rule","invent_Path,v1,v2","invent_Path,v2,v0","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1886),
   invent_Path(v1,v2),
   invent_Path(v2,v0),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_65_SCC_info_15->insert(RamDomain(15),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(16),RamDomain(4),RamDomain(34));
}();
/* END STRATUM 60 */
/* BEGIN STRATUM 61 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.150(150,"v0,v1","Rule","Edge,v0","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(897),
   Edge(_,v0),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_66_SCC_info_150->insert(RamDomain(150),RamDomain(0),RamDomain(1),RamDomain(110),RamDomain(15),RamDomain(174));
}();
/* END STRATUM 61 */
/* BEGIN STRATUM 62 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.151(151,"v0,v1","Rule","invent_Path,v1,v2","invent_Path,v0,v2","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1878),
   invent_Path(v1,v2),
   invent_Path(v0,v2),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_67_SCC_info_151->insert(RamDomain(151),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(19),RamDomain(4),RamDomain(175));
}();
/* END STRATUM 62 */
/* BEGIN STRATUM 63 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.16(16,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v2,v1","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1916),
   invent_Path(v0,v1),
   invent_Path(v2,v1),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_68_SCC_info_16->insert(RamDomain(16),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(26),RamDomain(7),RamDomain(35));
}();
/* END STRATUM 63 */
/* BEGIN STRATUM 64 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.17(17,"v0,v1","Rule","invent_Path,v1,v2","invent_Path,v2,v0","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1887),
   invent_Path(v1,v2),
   invent_Path(v2,v0),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_69_SCC_info_17->insert(RamDomain(17),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(16),RamDomain(27),RamDomain(36));
}();
/* END STRATUM 64 */
/* BEGIN STRATUM 65 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.18(18,"v0,v1","Rule","Edge,v2,v1","invent_Path,v2,v1","invent_Path,v0,v2","SCC(v0,v1) :- 
   Rule(1330),
   Edge(v2,v1),
   invent_Path(v2,v1),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_70_SCC_info_18->insert(RamDomain(18),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(26),RamDomain(19),RamDomain(37));
}();
/* END STRATUM 65 */
/* BEGIN STRATUM 66 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.19(19,"v0,v1","Rule","Edge,v2,v1","invent_Path,v2,v1","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(1325),
   Edge(v2,v1),
   invent_Path(v2,v1),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_71_SCC_info_19->insert(RamDomain(19),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(26),RamDomain(16),RamDomain(38));
}();
/* END STRATUM 66 */
/* BEGIN STRATUM 67 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.2(2,"v0,v1","Rule","Edge,v1,v2","SCC,v2,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1599),
   Edge(v1,v2),
   SCC(v2,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_72_SCC_info_2->insert(RamDomain(2),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(7),RamDomain(8),RamDomain(9));
}();
/* END STRATUM 67 */
/* BEGIN STRATUM 68 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.20(20,"v0,v1","Rule","SCC,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2217),
   SCC(_,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_73_SCC_info_20->insert(RamDomain(20),RamDomain(0),RamDomain(1),RamDomain(39),RamDomain(8),RamDomain(40));
}();
/* END STRATUM 68 */
/* BEGIN STRATUM 69 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.21(21,"v0,v1","Rule","Edge,v2,v1","SCC,v2,v1","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1452),
   Edge(v2,v1),
   SCC(v2,v1),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_74_SCC_info_21->insert(RamDomain(21),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(7),RamDomain(13),RamDomain(41));
}();
/* END STRATUM 69 */
/* BEGIN STRATUM 70 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.22(22,"v0,v1","Rule","Edge,v0,v2","SCC,v0,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1568),
   Edge(v0,v2),
   SCC(v0,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_75_SCC_info_22->insert(RamDomain(22),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(4),RamDomain(30),RamDomain(42));
}();
/* END STRATUM 70 */
/* BEGIN STRATUM 71 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.23(23,"v0,v1","Rule","Edge,v2,v1","invent_Path,v2,v1","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1299),
   Edge(v2,v1),
   invent_Path(v2,v1),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_76_SCC_info_23->insert(RamDomain(23),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(26),RamDomain(13),RamDomain(43));
}();
/* END STRATUM 71 */
/* BEGIN STRATUM 72 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.24(24,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v1,v2","invent_Path,v0,v2","SCC(v0,v1) :- 
   Rule(1789),
   invent_Path(v2,v1),
   invent_Path(v1,v2),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_77_SCC_info_24->insert(RamDomain(24),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(3),RamDomain(19),RamDomain(44));
}();
/* END STRATUM 72 */
/* BEGIN STRATUM 73 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.25(25,"v0,v1","Rule","Edge,v2,v0","invent_Path,v0,v2","invent_Path,v1,v2","SCC(v0,v1) :- 
   Rule(1269),
   Edge(v2,v0),
   invent_Path(v0,v2),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_78_SCC_info_25->insert(RamDomain(25),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(19),RamDomain(3),RamDomain(45));
}();
/* END STRATUM 73 */
/* BEGIN STRATUM 74 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.26(26,"v0,v1","Rule","Edge,v1,v2","Edge,v0,v2","SCC(v0,v1) :- 
   Rule(814),
   Edge(v1,v2),
   Edge(v0,v2).").
in file  [0:0-0:0])_");
rel_79_SCC_info_26->insert(RamDomain(26),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(46));
}();
/* END STRATUM 74 */
/* BEGIN STRATUM 75 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.27(27,"v0,v1","Rule","invent_Path,v1,v2","invent_Path,v0,v1","invent_Path,v0,v2","SCC(v0,v1) :- 
   Rule(1677),
   invent_Path(v1,v2),
   invent_Path(v0,v1),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_80_SCC_info_27->insert(RamDomain(27),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(13),RamDomain(19),RamDomain(47));
}();
/* END STRATUM 75 */
/* BEGIN STRATUM 76 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.28(28,"v0,v1","Rule","Edge,v2,v1","SCC,v2,v1","Edge,v1,v0","SCC(v0,v1) :- 
   Rule(1153),
   Edge(v2,v1),
   SCC(v2,v1),
   Edge(v1,v0).").
in file  [0:0-0:0])_");
rel_81_SCC_info_28->insert(RamDomain(28),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(7),RamDomain(48),RamDomain(49));
}();
/* END STRATUM 76 */
/* BEGIN STRATUM 77 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.29(29,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v2,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1847),
   invent_Path(v2,v1),
   invent_Path(v2,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_82_SCC_info_29->insert(RamDomain(29),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(16),RamDomain(20),RamDomain(50));
}();
/* END STRATUM 77 */
/* BEGIN STRATUM 78 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.3(3,"v0,v1","Rule","Edge,v2,v0","Edge,v1,v2","SCC(v0,v1) :- 
   Rule(864),
   Edge(v2,v0),
   Edge(v1,v2).").
in file  [0:0-0:0])_");
rel_83_SCC_info_3->insert(RamDomain(3),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(6),RamDomain(11));
}();
/* END STRATUM 78 */
/* BEGIN STRATUM 79 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.30(30,"v0,v1","Rule","Edge,v0,v2","invent_Path,v2,v0","Edge,v1,v0","SCC(v0,v1) :- 
   Rule(903),
   Edge(v0,v2),
   invent_Path(v2,v0),
   Edge(v1,v0).").
in file  [0:0-0:0])_");
rel_84_SCC_info_30->insert(RamDomain(30),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(16),RamDomain(48),RamDomain(51));
}();
/* END STRATUM 79 */
/* BEGIN STRATUM 80 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.31(31,"v0,v1","Rule","SCC,v2,v1","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(2241),
   SCC(v2,v1),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_85_SCC_info_31->insert(RamDomain(31),RamDomain(0),RamDomain(1),RamDomain(7),RamDomain(27),RamDomain(52));
}();
/* END STRATUM 80 */
/* BEGIN STRATUM 81 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.32(32,"v0,v1","Rule","Edge,v1,v2","Edge,v0,v2","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(952),
   Edge(v1,v2),
   Edge(v0,v2),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_86_SCC_info_32->insert(RamDomain(32),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(13),RamDomain(53));
}();
/* END STRATUM 81 */
/* BEGIN STRATUM 82 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.33(33,"v0,v1","Rule","invent_Path,v1,v2","invent_Path,v0,v2","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(1727),
   invent_Path(v1,v2),
   invent_Path(v0,v2),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_87_SCC_info_33->insert(RamDomain(33),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(19),RamDomain(16),RamDomain(54));
}();
/* END STRATUM 82 */
/* BEGIN STRATUM 83 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.34(34,"v0,v1","Rule","Edge,v1,v2","SCC,v1,v0","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1541),
   Edge(v1,v2),
   SCC(v1,v0),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_88_SCC_info_34->insert(RamDomain(34),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(8),RamDomain(4),RamDomain(55));
}();
/* END STRATUM 83 */
/* BEGIN STRATUM 84 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.35(35,"v0,v1","Rule","Edge,v2,v0","SCC,v2,v0","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1505),
   Edge(v2,v0),
   SCC(v2,v0),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_89_SCC_info_35->insert(RamDomain(35),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(27),RamDomain(8),RamDomain(56));
}();
/* END STRATUM 84 */
/* BEGIN STRATUM 85 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.36(36,"v0,v1","Rule","invent_Path,v0,v2","SCC,v0,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(2024),
   invent_Path(v0,v2),
   SCC(v0,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_90_SCC_info_36->insert(RamDomain(36),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(4),RamDomain(30),RamDomain(57));
}();
/* END STRATUM 85 */
/* BEGIN STRATUM 86 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.37(37,"v0,v1","Rule","Edge,v2,v0","Edge,v0,v2","Edge,v1,v0","SCC(v0,v1) :- 
   Rule(749),
   Edge(v2,v0),
   Edge(v0,v2),
   Edge(v1,v0).").
in file  [0:0-0:0])_");
rel_91_SCC_info_37->insert(RamDomain(37),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(12),RamDomain(48),RamDomain(58));
}();
/* END STRATUM 86 */
/* BEGIN STRATUM 87 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.38(38,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v1,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1851),
   invent_Path(v1,v0),
   invent_Path(v1,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_92_SCC_info_38->insert(RamDomain(38),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(3),RamDomain(27),RamDomain(59));
}();
/* END STRATUM 87 */
/* BEGIN STRATUM 88 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.39(39,"v0,v1","Rule","Edge,v2,v1","Edge,v1,v2","Edge,v0,v2","SCC(v0,v1) :- 
   Rule(877),
   Edge(v2,v1),
   Edge(v1,v2),
   Edge(v0,v2).").
in file  [0:0-0:0])_");
rel_93_SCC_info_39->insert(RamDomain(39),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(6),RamDomain(12),RamDomain(60));
}();
/* END STRATUM 88 */
/* BEGIN STRATUM 89 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.4(4,"v0,v1","Rule","Edge,v0,v2","Edge,v2,v0","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(904),
   Edge(v0,v2),
   Edge(v2,v0),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_94_SCC_info_4->insert(RamDomain(4),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(10),RamDomain(13),RamDomain(14));
}();
/* END STRATUM 89 */
/* BEGIN STRATUM 90 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.40(40,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v1,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1793),
   invent_Path(v0,v1),
   invent_Path(v1,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_95_SCC_info_40->insert(RamDomain(40),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(15),RamDomain(20),RamDomain(61));
}();
/* END STRATUM 90 */
/* BEGIN STRATUM 91 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.41(41,"v0,v1","Rule","Edge,v1,v0","Edge,v0,v1","SCC(v0,v1) :- 
   Rule(727),
   Edge(v1,v0),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_96_SCC_info_41->insert(RamDomain(41),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(2),RamDomain(62));
}();
/* END STRATUM 91 */
/* BEGIN STRATUM 92 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.42(42,"v0,v1","Rule","invent_Path,v0,v2","SCC,v2,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(2028),
   invent_Path(v0,v2),
   SCC(v2,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_97_SCC_info_42->insert(RamDomain(42),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(27),RamDomain(7),RamDomain(63));
}();
/* END STRATUM 92 */
/* BEGIN STRATUM 93 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.43(43,"v0,v1","Rule","Edge,v1,v2","SCC,v1,v2","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1596),
   Edge(v1,v2),
   SCC(v1,v2),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_98_SCC_info_43->insert(RamDomain(43),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(30),RamDomain(20),RamDomain(64));
}();
/* END STRATUM 93 */
/* BEGIN STRATUM 94 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.44(44,"v0,v1","Rule","Edge,v2,v0","SCC,v0,v2","Edge,v1,v2","SCC(v0,v1) :- 
   Rule(1122),
   Edge(v2,v0),
   SCC(v0,v2),
   Edge(v1,v2).").
in file  [0:0-0:0])_");
rel_99_SCC_info_44->insert(RamDomain(44),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(4),RamDomain(6),RamDomain(65));
}();
/* END STRATUM 94 */
/* BEGIN STRATUM 95 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.45(45,"v0,v1","Rule","Edge,v0,v1","invent_Path,v2,v1","invent_Path,v1,v2","SCC(v0,v1) :- 
   Rule(1288),
   Edge(v0,v1),
   invent_Path(v2,v1),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_100_SCC_info_45->insert(RamDomain(45),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(26),RamDomain(3),RamDomain(66));
}();
/* END STRATUM 95 */
/* BEGIN STRATUM 96 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.46(46,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v0,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1849),
   invent_Path(v0,v1),
   invent_Path(v0,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_101_SCC_info_46->insert(RamDomain(46),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(19),RamDomain(30),RamDomain(67));
}();
/* END STRATUM 96 */
/* BEGIN STRATUM 97 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.47(47,"v0,v1","Rule","Edge,v1,v0","Edge,v0,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1046),
   Edge(v1,v0),
   Edge(v0,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_102_SCC_info_47->insert(RamDomain(47),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(12),RamDomain(27),RamDomain(68));
}();
/* END STRATUM 97 */
/* BEGIN STRATUM 98 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.48(48,"v0,v1","Rule","SCC,v1,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(2228),
   SCC(v1,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_103_SCC_info_48->insert(RamDomain(48),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(27),RamDomain(69));
}();
/* END STRATUM 98 */
/* BEGIN STRATUM 99 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.49(49,"v0,v1","Rule","invent_Path,v2,v0","invent_Path,v2,v1","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1683),
   invent_Path(v2,v0),
   invent_Path(v2,v1),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_104_SCC_info_49->insert(RamDomain(49),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(26),RamDomain(13),RamDomain(70));
}();
/* END STRATUM 99 */
/* BEGIN STRATUM 100 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.5(5,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v2,v0","invent_Path,v1,v2","SCC(v0,v1) :- 
   Rule(1702),
   invent_Path(v1,v0),
   invent_Path(v2,v0),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_105_SCC_info_5->insert(RamDomain(5),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(16),RamDomain(3),RamDomain(17));
}();
/* END STRATUM 100 */
/* BEGIN STRATUM 101 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.50(50,"v0,v1","Rule","invent_Path,v0,v2","SCC,v2,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2012),
   invent_Path(v0,v2),
   SCC(v2,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_106_SCC_info_50->insert(RamDomain(50),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(7),RamDomain(8),RamDomain(71));
}();
/* END STRATUM 101 */
/* BEGIN STRATUM 102 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.51(51,"v0,v1","Rule","Edge,v2,v0","Edge,v2,v1","SCC(v0,v1) :- 
   Rule(862),
   Edge(v2,v0),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_107_SCC_info_51->insert(RamDomain(51),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(72));
}();
/* END STRATUM 102 */
/* BEGIN STRATUM 103 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.52(52,"v0,v1","Rule","Edge,v2,v0","SCC,v0,v2","Edge,v1,v0","SCC(v0,v1) :- 
   Rule(1040),
   Edge(v2,v0),
   SCC(v0,v2),
   Edge(v1,v0).").
in file  [0:0-0:0])_");
rel_108_SCC_info_52->insert(RamDomain(52),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(4),RamDomain(48),RamDomain(73));
}();
/* END STRATUM 103 */
/* BEGIN STRATUM 104 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.53(53,"v0,v1","Rule","Edge,v0,v2","invent_Path,v0,v2","Edge,v2,v1","SCC(v0,v1) :- 
   Rule(963),
   Edge(v0,v2),
   invent_Path(v0,v2),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_109_SCC_info_53->insert(RamDomain(53),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(19),RamDomain(24),RamDomain(74));
}();
/* END STRATUM 104 */
/* BEGIN STRATUM 105 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.54(54,"v0,v1","Rule","Edge,v1,v0","Edge,v0,v2","invent_Path,v1,v2","SCC(v0,v1) :- 
   Rule(910),
   Edge(v1,v0),
   Edge(v0,v2),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_110_SCC_info_54->insert(RamDomain(54),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(12),RamDomain(3),RamDomain(75));
}();
/* END STRATUM 105 */
/* BEGIN STRATUM 106 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.55(55,"v0,v1","Rule","Edge,v0,v1","Edge,v2,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1073),
   Edge(v0,v1),
   Edge(v2,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_111_SCC_info_55->insert(RamDomain(55),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(10),RamDomain(7),RamDomain(76));
}();
/* END STRATUM 106 */
/* BEGIN STRATUM 107 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.56(56,"v0,v1","Rule","invent_Path,v2,v1","SCC,v1,v2","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2067),
   invent_Path(v2,v1),
   SCC(v1,v2),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_112_SCC_info_56->insert(RamDomain(56),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(30),RamDomain(8),RamDomain(77));
}();
/* END STRATUM 107 */
/* BEGIN STRATUM 108 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.57(57,"v0,v1","Rule","Edge,v0,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(686),
   Edge(v0,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_113_SCC_info_57->insert(RamDomain(57),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(30),RamDomain(78));
}();
/* END STRATUM 108 */
/* BEGIN STRATUM 109 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.58(58,"v0,v1","Rule","SCC,v0,v2","SCC,v2,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(2103),
   SCC(v0,v2),
   SCC(v2,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_114_SCC_info_58->insert(RamDomain(58),RamDomain(0),RamDomain(1),RamDomain(4),RamDomain(27),RamDomain(20),RamDomain(79));
}();
/* END STRATUM 109 */
/* BEGIN STRATUM 110 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.59(59,"v0,v1","Rule","invent_Path,v0,v2","SCC,v2,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1968),
   invent_Path(v0,v2),
   SCC(v2,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_115_SCC_info_59->insert(RamDomain(59),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(27),RamDomain(20),RamDomain(80));
}();
/* END STRATUM 110 */
/* BEGIN STRATUM 111 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.6(6,"v0,v1","Rule","invent_Path,v1,v2","SCC,v1,v0","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1997),
   invent_Path(v1,v2),
   SCC(v1,v0),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_116_SCC_info_6->insert(RamDomain(6),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(8),RamDomain(4),RamDomain(18));
}();
/* END STRATUM 111 */
/* BEGIN STRATUM 112 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.60(60,"v0,v1","Rule","Edge,v1,v0","SCC,v1,v2","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1520),
   Edge(v1,v0),
   SCC(v1,v2),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_117_SCC_info_60->insert(RamDomain(60),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(30),RamDomain(4),RamDomain(81));
}();
/* END STRATUM 112 */
/* BEGIN STRATUM 113 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.61(61,"v0,v1","Rule","Edge,v1,v2","Edge,v0,v2","invent_Path,v2,v0","SCC(v0,v1) :- 
   Rule(967),
   Edge(v1,v2),
   Edge(v0,v2),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_118_SCC_info_61->insert(RamDomain(61),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(16),RamDomain(82));
}();
/* END STRATUM 113 */
/* BEGIN STRATUM 114 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.62(62,"v0,v1","Rule","invent_Path,v2,v1","SCC,v2,v1","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(2059),
   invent_Path(v2,v1),
   SCC(v2,v1),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_119_SCC_info_62->insert(RamDomain(62),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(7),RamDomain(20),RamDomain(83));
}();
/* END STRATUM 114 */
/* BEGIN STRATUM 115 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.63(63,"v0,v1","Rule","Edge,v0,v1","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1037),
   Edge(v0,v1),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_120_SCC_info_63->insert(RamDomain(63),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(20),RamDomain(84));
}();
/* END STRATUM 115 */
/* BEGIN STRATUM 116 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.64(64,"v0,v1","Rule","Edge,v1,v0","Edge,v2,v0","invent_Path,v2,v1","SCC(v0,v1) :- 
   Rule(956),
   Edge(v1,v0),
   Edge(v2,v0),
   invent_Path(v2,v1).").
in file  [0:0-0:0])_");
rel_121_SCC_info_64->insert(RamDomain(64),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(10),RamDomain(26),RamDomain(85));
}();
/* END STRATUM 116 */
/* BEGIN STRATUM 117 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.65(65,"v0,v1","Rule","Edge,v2,v0","invent_Path,v2,v0","invent_Path,v2,v1","SCC(v0,v1) :- 
   Rule(1283),
   Edge(v2,v0),
   invent_Path(v2,v0),
   invent_Path(v2,v1).").
in file  [0:0-0:0])_");
rel_122_SCC_info_65->insert(RamDomain(65),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(16),RamDomain(26),RamDomain(86));
}();
/* END STRATUM 117 */
/* BEGIN STRATUM 118 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.66(66,"v0,v1","Rule","Edge,v0,v2","Edge,v1,v2","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1099),
   Edge(v0,v2),
   Edge(v1,v2),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_123_SCC_info_66->insert(RamDomain(66),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(6),RamDomain(8),RamDomain(87));
}();
/* END STRATUM 118 */
/* BEGIN STRATUM 119 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.67(67,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v0,v1","SCC(v0,v1) :- 
   Rule(1639),
   invent_Path(v1,v0),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_124_SCC_info_67->insert(RamDomain(67),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(13),RamDomain(88));
}();
/* END STRATUM 119 */
/* BEGIN STRATUM 120 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.68(68,"v0,v1","Rule","Edge,v2,v0","SCC,v2,v1","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1531),
   Edge(v2,v0),
   SCC(v2,v1),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_125_SCC_info_68->insert(RamDomain(68),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(7),RamDomain(20),RamDomain(89));
}();
/* END STRATUM 120 */
/* BEGIN STRATUM 121 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.69(69,"v0,v1","Rule","invent_Path,v0,v1","SCC,v1","SCC(v0,v1) :- 
   Rule(2068),
   invent_Path(v0,v1),
   SCC(_,v1).").
in file  [0:0-0:0])_");
rel_126_SCC_info_69->insert(RamDomain(69),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(39),RamDomain(90));
}();
/* END STRATUM 121 */
/* BEGIN STRATUM 122 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.7(7,"v0,v1","Rule","invent_Path,v0,v2","SCC,v0,v2","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1954),
   invent_Path(v0,v2),
   SCC(v0,v2),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_127_SCC_info_7->insert(RamDomain(7),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(4),RamDomain(20),RamDomain(21));
}();
/* END STRATUM 122 */
/* BEGIN STRATUM 123 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.70(70,"v0,v1","Rule","SCC,v2,v1","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(2237),
   SCC(v2,v1),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_128_SCC_info_70->insert(RamDomain(70),RamDomain(0),RamDomain(1),RamDomain(7),RamDomain(27),RamDomain(91));
}();
/* END STRATUM 123 */
/* BEGIN STRATUM 124 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.71(71,"v0,v1","Rule","Edge,v1","Edge,v0,v1","SCC(v0,v1) :- 
   Rule(837),
   Edge(v1,_),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_129_SCC_info_71->insert(RamDomain(71),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(2),RamDomain(92));
}();
/* END STRATUM 124 */
/* BEGIN STRATUM 125 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.72(72,"v0,v1","Rule","Edge,v2,v0","invent_Path,v2,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1351),
   Edge(v2,v0),
   invent_Path(v2,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_130_SCC_info_72->insert(RamDomain(72),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(16),RamDomain(20),RamDomain(93));
}();
/* END STRATUM 125 */
/* BEGIN STRATUM 126 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.73(73,"v0,v1","Rule","Edge,v1,v2","Edge,v0,v2","SCC(v0,v1) :- 
   Rule(665),
   Edge(v1,v2),
   Edge(v0,v2).").
in file  [0:0-0:0])_");
rel_131_SCC_info_73->insert(RamDomain(73),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(12),RamDomain(94));
}();
/* END STRATUM 126 */
/* BEGIN STRATUM 127 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.74(74,"v0,v1","Rule","invent_Path,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1802),
   invent_Path(v0,_),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_132_SCC_info_74->insert(RamDomain(74),RamDomain(0),RamDomain(1),RamDomain(95),RamDomain(20),RamDomain(96));
}();
/* END STRATUM 127 */
/* BEGIN STRATUM 128 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.75(75,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(692),
   invent_Path(v0,v1),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_133_SCC_info_75->insert(RamDomain(75),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(15),RamDomain(97));
}();
/* END STRATUM 128 */
/* BEGIN STRATUM 129 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.76(76,"v0,v1","Rule","invent_Path,v2,v1","SCC,v2,v0","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2009),
   invent_Path(v2,v1),
   SCC(v2,v0),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_134_SCC_info_76->insert(RamDomain(76),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(27),RamDomain(8),RamDomain(98));
}();
/* END STRATUM 129 */
/* BEGIN STRATUM 130 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.77(77,"v0,v1","Rule","SCC,v1,v0","SCC,v1,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(2155),
   SCC(v1,v0),
   SCC(v1,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_135_SCC_info_77->insert(RamDomain(77),RamDomain(0),RamDomain(1),RamDomain(8),RamDomain(30),RamDomain(27),RamDomain(99));
}();
/* END STRATUM 130 */
/* BEGIN STRATUM 131 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.78(78,"v0,v1","Rule","invent_Path,v2,v0","SCC,v1,v0","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1980),
   invent_Path(v2,v0),
   SCC(v1,v0),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_136_SCC_info_78->insert(RamDomain(78),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(8),RamDomain(30),RamDomain(100));
}();
/* END STRATUM 131 */
/* BEGIN STRATUM 132 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.79(79,"v0,v1","Rule","Edge,v2,v1","invent_Path,v1,v0","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1409),
   Edge(v2,v1),
   invent_Path(v1,v0),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_137_SCC_info_79->insert(RamDomain(79),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(15),RamDomain(27),RamDomain(101));
}();
/* END STRATUM 132 */
/* BEGIN STRATUM 133 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.8(8,"v0,v1","Rule","Edge,v0,v1","Edge,v1","SCC(v0,v1) :- 
   Rule(852),
   Edge(v0,v1),
   Edge(_,v1).").
in file  [0:0-0:0])_");
rel_138_SCC_info_8->insert(RamDomain(8),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(22),RamDomain(23));
}();
/* END STRATUM 133 */
/* BEGIN STRATUM 134 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.80(80,"v0,v1","Rule","Edge,v2,v0","Edge,v0,v2","Edge,v2,v1","SCC(v0,v1) :- 
   Rule(820),
   Edge(v2,v0),
   Edge(v0,v2),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_139_SCC_info_80->insert(RamDomain(80),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(12),RamDomain(24),RamDomain(102));
}();
/* END STRATUM 134 */
/* BEGIN STRATUM 135 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.81(81,"v0,v1","Rule","Edge,v2,v0","Edge,v2,v1","Edge,v1,v0","SCC(v0,v1) :- 
   Rule(778),
   Edge(v2,v0),
   Edge(v2,v1),
   Edge(v1,v0).").
in file  [0:0-0:0])_");
rel_140_SCC_info_81->insert(RamDomain(81),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(48),RamDomain(103));
}();
/* END STRATUM 135 */
/* BEGIN STRATUM 136 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.82(82,"v0,v1","Rule","Edge,v1,v0","invent_Path,v1,v0","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(1340),
   Edge(v1,v0),
   invent_Path(v1,v0),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_141_SCC_info_82->insert(RamDomain(82),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(15),RamDomain(8),RamDomain(104));
}();
/* END STRATUM 136 */
/* BEGIN STRATUM 137 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.83(83,"v0,v1","Rule","Edge,v2,v0","SCC,v0,v2","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1573),
   Edge(v2,v0),
   SCC(v0,v2),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_142_SCC_info_83->insert(RamDomain(83),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(4),RamDomain(30),RamDomain(105));
}();
/* END STRATUM 137 */
/* BEGIN STRATUM 138 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.84(84,"v0,v1","Rule","Edge,v1,v0","Edge,v0,v2","Edge,v2,v0","SCC(v0,v1) :- 
   Rule(742),
   Edge(v1,v0),
   Edge(v0,v2),
   Edge(v2,v0).").
in file  [0:0-0:0])_");
rel_143_SCC_info_84->insert(RamDomain(84),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(12),RamDomain(10),RamDomain(106));
}();
/* END STRATUM 138 */
/* BEGIN STRATUM 139 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.85(85,"v0,v1","Rule","SCC,v1,v2","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(725),
   SCC(v1,v2),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_144_SCC_info_85->insert(RamDomain(85),RamDomain(0),RamDomain(1),RamDomain(30),RamDomain(4),RamDomain(107));
}();
/* END STRATUM 139 */
/* BEGIN STRATUM 140 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.86(86,"v0,v1","Rule","SCC,v0,v1","SCC,v1,v0","SCC(v0,v1) :- 
   Rule(2098),
   SCC(v0,v1),
   SCC(v1,v0).").
in file  [0:0-0:0])_");
rel_145_SCC_info_86->insert(RamDomain(86),RamDomain(0),RamDomain(1),RamDomain(20),RamDomain(8),RamDomain(108));
}();
/* END STRATUM 140 */
/* BEGIN STRATUM 141 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.87(87,"v0,v1","Rule","Edge,v2,v0","Edge,v0,v2","Edge,v0,v1","SCC(v0,v1) :- 
   Rule(748),
   Edge(v2,v0),
   Edge(v0,v2),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_146_SCC_info_87->insert(RamDomain(87),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(12),RamDomain(2),RamDomain(109));
}();
/* END STRATUM 141 */
/* BEGIN STRATUM 142 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.88(88,"v0,v1","Rule","Edge,v0","Edge,v0,v1","SCC(v0,v1) :- 
   Rule(743),
   Edge(_,v0),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_147_SCC_info_88->insert(RamDomain(88),RamDomain(0),RamDomain(1),RamDomain(110),RamDomain(2),RamDomain(111));
}();
/* END STRATUM 142 */
/* BEGIN STRATUM 143 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.89(89,"v0,v1","Rule","invent_Path,v0,v1","SCC,v2,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1985),
   invent_Path(v0,v1),
   SCC(v2,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_148_SCC_info_89->insert(RamDomain(89),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(27),RamDomain(7),RamDomain(112));
}();
/* END STRATUM 143 */
/* BEGIN STRATUM 144 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.9(9,"v0,v1","Rule","Edge,v2,v1","Edge,v2,v0","Edge,v0,v1","SCC(v0,v1) :- 
   Rule(783),
   Edge(v2,v1),
   Edge(v2,v0),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_149_SCC_info_9->insert(RamDomain(9),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(10),RamDomain(2),RamDomain(25));
}();
/* END STRATUM 144 */
/* BEGIN STRATUM 145 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.90(90,"v0,v1","Rule","Edge,v2,v0","invent_Path,v1,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(1387),
   Edge(v2,v0),
   invent_Path(v1,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_150_SCC_info_90->insert(RamDomain(90),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(15),RamDomain(7),RamDomain(113));
}();
/* END STRATUM 145 */
/* BEGIN STRATUM 146 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.91(91,"v0,v1","Rule","Edge,v2,v1","SCC,v2,v0","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(1543),
   Edge(v2,v1),
   SCC(v2,v0),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_151_SCC_info_91->insert(RamDomain(91),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(27),RamDomain(20),RamDomain(114));
}();
/* END STRATUM 146 */
/* BEGIN STRATUM 147 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.92(92,"v0,v1","Rule","invent_Path,v1,v2","SCC,v0,v1","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(2008),
   invent_Path(v1,v2),
   SCC(v0,v1),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_152_SCC_info_92->insert(RamDomain(92),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(20),RamDomain(27),RamDomain(115));
}();
/* END STRATUM 147 */
/* BEGIN STRATUM 148 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.93(93,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v2,v1","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1869),
   invent_Path(v1,v0),
   invent_Path(v2,v1),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_153_SCC_info_93->insert(RamDomain(93),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(26),RamDomain(27),RamDomain(116));
}();
/* END STRATUM 148 */
/* BEGIN STRATUM 149 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.94(94,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v2,v0","SCC,v0,v2","SCC(v0,v1) :- 
   Rule(1803),
   invent_Path(v0,v1),
   invent_Path(v2,v0),
   SCC(v0,v2).").
in file  [0:0-0:0])_");
rel_154_SCC_info_94->insert(RamDomain(94),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(16),RamDomain(4),RamDomain(117));
}();
/* END STRATUM 149 */
/* BEGIN STRATUM 150 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.95(95,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v2,v1","SCC,v1,v2","SCC(v0,v1) :- 
   Rule(1896),
   invent_Path(v0,v1),
   invent_Path(v2,v1),
   SCC(v1,v2).").
in file  [0:0-0:0])_");
rel_155_SCC_info_95->insert(RamDomain(95),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(26),RamDomain(30),RamDomain(118));
}();
/* END STRATUM 150 */
/* BEGIN STRATUM 151 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.96(96,"v0,v1","Rule","Edge,v0,v2","Edge,v2,v1","invent_Path,v1,v0","SCC(v0,v1) :- 
   Rule(948),
   Edge(v0,v2),
   Edge(v2,v1),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_156_SCC_info_96->insert(RamDomain(96),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(24),RamDomain(15),RamDomain(119));
}();
/* END STRATUM 151 */
/* BEGIN STRATUM 152 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.97(97,"v0,v1","Rule","Edge,v1,v0","invent_Path,v0,v2","SCC,v2,v0","SCC(v0,v1) :- 
   Rule(1350),
   Edge(v1,v0),
   invent_Path(v0,v2),
   SCC(v2,v0).").
in file  [0:0-0:0])_");
rel_157_SCC_info_97->insert(RamDomain(97),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(19),RamDomain(27),RamDomain(120));
}();
/* END STRATUM 152 */
/* BEGIN STRATUM 153 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.98(98,"v0,v1","Rule","invent_Path,v1,v2","SCC,v1,v2","SCC,v0,v1","SCC(v0,v1) :- 
   Rule(2052),
   invent_Path(v1,v2),
   SCC(v1,v2),
   SCC(v0,v1).").
in file  [0:0-0:0])_");
rel_158_SCC_info_98->insert(RamDomain(98),RamDomain(0),RamDomain(1),RamDomain(3),RamDomain(30),RamDomain(20),RamDomain(121));
}();
/* END STRATUM 153 */
/* BEGIN STRATUM 154 */
[&]() {
SignalHandler::instance()->setMsg(R"_(SCC.@info.99(99,"v0,v1","Rule","SCC,v2,v0","SCC,v2,v1","SCC(v0,v1) :- 
   Rule(2230),
   SCC(v2,v0),
   SCC(v2,v1).").
in file  [0:0-0:0])_");
rel_159_SCC_info_99->insert(RamDomain(99),RamDomain(0),RamDomain(1),RamDomain(27),RamDomain(7),RamDomain(122));
}();
/* END STRATUM 154 */
/* BEGIN STRATUM 155 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.1(1,"v0,v1","Rule","invent_Path,v0","invent_Path,v0,v1","invent_Path(v0,v1) :- 
   Rule(508),
   invent_Path(v0,_),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_160_invent_Path_info_1->insert(RamDomain(1),RamDomain(0),RamDomain(1),RamDomain(95),RamDomain(13),RamDomain(176));
}();
/* END STRATUM 155 */
/* BEGIN STRATUM 156 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.10(10,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v2,v0","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(563),
   invent_Path(v2,v1),
   invent_Path(v2,v0),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_161_invent_Path_info_10->insert(RamDomain(10),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(16),RamDomain(15),RamDomain(186));
}();
/* END STRATUM 156 */
/* BEGIN STRATUM 157 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.11(11,"v0,v1","Rule","Edge,v0,v2","invent_Path,v0,v2","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(368),
   Edge(v0,v2),
   invent_Path(v0,v2),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_162_invent_Path_info_11->insert(RamDomain(11),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(19),RamDomain(15),RamDomain(187));
}();
/* END STRATUM 157 */
/* BEGIN STRATUM 158 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.12(12,"v0,v1","Rule","invent_Path,v0,v2","invent_Path,v1,v2","invent_Path(v0,v1) :- 
   Rule(36),
   invent_Path(v0,v2),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_163_invent_Path_info_12->insert(RamDomain(12),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(3),RamDomain(188));
}();
/* END STRATUM 158 */
/* BEGIN STRATUM 159 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.13(13,"v0,v1","Rule","Edge,v0,v1","Edge,v0,v2","Edge,v1,v2","invent_Path(v0,v1) :- 
   Rule(99),
   Edge(v0,v1),
   Edge(v0,v2),
   Edge(v1,v2).").
in file  [0:0-0:0])_");
rel_164_invent_Path_info_13->insert(RamDomain(13),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(12),RamDomain(6),RamDomain(189));
}();
/* END STRATUM 159 */
/* BEGIN STRATUM 160 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.14(14,"v0,v1","Rule","Edge,v0","invent_Path,v0,v1","invent_Path(v0,v1) :- 
   Rule(209),
   Edge(_,v0),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_165_invent_Path_info_14->insert(RamDomain(14),RamDomain(0),RamDomain(1),RamDomain(110),RamDomain(13),RamDomain(190));
}();
/* END STRATUM 160 */
/* BEGIN STRATUM 161 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.15(15,"v0,v1","Rule","invent_Path,v0,v2","invent_Path,v2,v0","invent_Path,v1,v2","invent_Path(v0,v1) :- 
   Rule(579),
   invent_Path(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_166_invent_Path_info_15->insert(RamDomain(15),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(16),RamDomain(3),RamDomain(191));
}();
/* END STRATUM 161 */
/* BEGIN STRATUM 162 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.16(16,"v0,v1","Rule","Edge,v1,v0","Edge,v2,v0","Edge,v2,v1","invent_Path(v0,v1) :- 
   Rule(118),
   Edge(v1,v0),
   Edge(v2,v0),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_167_invent_Path_info_16->insert(RamDomain(16),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(10),RamDomain(24),RamDomain(192));
}();
/* END STRATUM 162 */
/* BEGIN STRATUM 163 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.17(17,"v0,v1","Rule","Edge,v0,v2","invent_Path,v2,v1","invent_Path(v0,v1) :- 
   Rule(23),
   Edge(v0,v2),
   invent_Path(v2,v1).").
in file  [0:0-0:0])_");
rel_168_invent_Path_info_17->insert(RamDomain(17),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(26),RamDomain(193));
}();
/* END STRATUM 163 */
/* BEGIN STRATUM 164 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.18(18,"v0,v1","Rule","Edge,v1,v2","Edge,v1,v0","invent_Path,v0,v2","invent_Path(v0,v1) :- 
   Rule(247),
   Edge(v1,v2),
   Edge(v1,v0),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_169_invent_Path_info_18->insert(RamDomain(18),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(48),RamDomain(19),RamDomain(194));
}();
/* END STRATUM 164 */
/* BEGIN STRATUM 165 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.19(19,"v0,v1","Rule","Edge,v0,v1","Edge,v0,v2","invent_Path,v0,v2","invent_Path(v0,v1) :- 
   Rule(219),
   Edge(v0,v1),
   Edge(v0,v2),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_170_invent_Path_info_19->insert(RamDomain(19),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(12),RamDomain(19),RamDomain(195));
}();
/* END STRATUM 165 */
/* BEGIN STRATUM 166 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.2(2,"v0,v1","Rule","Edge,v1,v2","invent_Path,v1,v2","invent_Path,v0,v1","invent_Path(v0,v1) :- 
   Rule(455),
   Edge(v1,v2),
   invent_Path(v1,v2),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_171_invent_Path_info_2->insert(RamDomain(2),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(3),RamDomain(13),RamDomain(177));
}();
/* END STRATUM 166 */
/* BEGIN STRATUM 167 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.20(20,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v0","invent_Path(v0,v1) :- 
   Rule(523),
   invent_Path(v0,v1),
   invent_Path(v0,_).").
in file  [0:0-0:0])_");
rel_172_invent_Path_info_20->insert(RamDomain(20),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(95),RamDomain(196));
}();
/* END STRATUM 167 */
/* BEGIN STRATUM 168 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.21(21,"v0,v1","Rule","Edge,v2,v1","Edge,v0,v2","invent_Path(v0,v1) :- 
   Rule(9),
   Edge(v2,v1),
   Edge(v0,v2).").
in file  [0:0-0:0])_");
rel_173_invent_Path_info_21->insert(RamDomain(21),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(12),RamDomain(197));
}();
/* END STRATUM 168 */
/* BEGIN STRATUM 169 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.22(22,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v0,v2","invent_Path,v1,v2","invent_Path(v0,v1) :- 
   Rule(555),
   invent_Path(v0,v1),
   invent_Path(v0,v2),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_174_invent_Path_info_22->insert(RamDomain(22),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(19),RamDomain(3),RamDomain(198));
}();
/* END STRATUM 169 */
/* BEGIN STRATUM 170 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.23(23,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v2,v0","invent_Path,v2,v1","invent_Path(v0,v1) :- 
   Rule(574),
   invent_Path(v1,v0),
   invent_Path(v2,v0),
   invent_Path(v2,v1).").
in file  [0:0-0:0])_");
rel_175_invent_Path_info_23->insert(RamDomain(23),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(16),RamDomain(26),RamDomain(199));
}();
/* END STRATUM 170 */
/* BEGIN STRATUM 171 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.24(24,"v0,v1","Rule","Edge,v0,v1","Edge,v1,v2","Edge,v2,v0","invent_Path(v0,v1) :- 
   Rule(105),
   Edge(v0,v1),
   Edge(v1,v2),
   Edge(v2,v0).").
in file  [0:0-0:0])_");
rel_176_invent_Path_info_24->insert(RamDomain(24),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(10),RamDomain(200));
}();
/* END STRATUM 171 */
/* BEGIN STRATUM 172 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.25(25,"v0,v1","Rule","Edge,v1","invent_Path,v0,v1","invent_Path(v0,v1) :- 
   Rule(302),
   Edge(v1,_),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_177_invent_Path_info_25->insert(RamDomain(25),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(13),RamDomain(201));
}();
/* END STRATUM 172 */
/* BEGIN STRATUM 173 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.26(26,"v0,v1","Rule","Edge,v2,v0","Edge,v1,v0","invent_Path,v1,v2","invent_Path(v0,v1) :- 
   Rule(230),
   Edge(v2,v0),
   Edge(v1,v0),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_178_invent_Path_info_26->insert(RamDomain(26),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(48),RamDomain(3),RamDomain(202));
}();
/* END STRATUM 173 */
/* BEGIN STRATUM 174 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.27(27,"v0,v1","Rule","invent_Path,v2,v1","invent_Path,v1,v0","invent_Path,v0,v2","invent_Path(v0,v1) :- 
   Rule(546),
   invent_Path(v2,v1),
   invent_Path(v1,v0),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_179_invent_Path_info_27->insert(RamDomain(27),RamDomain(0),RamDomain(1),RamDomain(26),RamDomain(15),RamDomain(19),RamDomain(203));
}();
/* END STRATUM 174 */
/* BEGIN STRATUM 175 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.28(28,"v0,v1","Rule","Edge,v0,v2","invent_Path,v2,v0","invent_Path,v2,v1","invent_Path(v0,v1) :- 
   Rule(434),
   Edge(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v2,v1).").
in file  [0:0-0:0])_");
rel_180_invent_Path_info_28->insert(RamDomain(28),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(16),RamDomain(26),RamDomain(204));
}();
/* END STRATUM 175 */
/* BEGIN STRATUM 176 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.29(29,"v0,v1","Rule","Edge,v0,v2","Edge,v2,v0","Edge,v0,v1","invent_Path(v0,v1) :- 
   Rule(66),
   Edge(v0,v2),
   Edge(v2,v0),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_181_invent_Path_info_29->insert(RamDomain(29),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(10),RamDomain(2),RamDomain(205));
}();
/* END STRATUM 176 */
/* BEGIN STRATUM 177 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.3(3,"v0,v1","Rule","invent_Path,v0,v1","invent_Path(v0,v1) :- 
   Rule(503),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_182_invent_Path_info_3->insert(RamDomain(3),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(178));
}();
/* END STRATUM 177 */
/* BEGIN STRATUM 178 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.30(30,"v0,v1","Rule","Edge,v0,v2","Edge,v2,v0","Edge,v2,v1","invent_Path(v0,v1) :- 
   Rule(130),
   Edge(v0,v2),
   Edge(v2,v0),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_183_invent_Path_info_30->insert(RamDomain(30),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(10),RamDomain(24),RamDomain(206));
}();
/* END STRATUM 178 */
/* BEGIN STRATUM 179 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.31(31,"v0,v1","Rule","Edge,v0,v1","invent_Path(v0,v1) :- 
   Rule(0),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_184_invent_Path_info_31->insert(RamDomain(31),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(207));
}();
/* END STRATUM 179 */
/* BEGIN STRATUM 180 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.32(32,"v0,v1","Rule","Edge,v1,v0","Edge,v0,v1","invent_Path(v0,v1) :- 
   Rule(42),
   Edge(v1,v0),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_185_invent_Path_info_32->insert(RamDomain(32),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(2),RamDomain(208));
}();
/* END STRATUM 180 */
/* BEGIN STRATUM 181 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.33(33,"v0,v1","Rule","Edge,v1","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(307),
   Edge(v1,_),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_186_invent_Path_info_33->insert(RamDomain(33),RamDomain(0),RamDomain(1),RamDomain(22),RamDomain(15),RamDomain(209));
}();
/* END STRATUM 181 */
/* BEGIN STRATUM 182 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.34(34,"v0,v1","Rule","Edge,v2,v0","Edge,v2,v1","Edge,v0,v1","invent_Path(v0,v1) :- 
   Rule(85),
   Edge(v2,v0),
   Edge(v2,v1),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_187_invent_Path_info_34->insert(RamDomain(34),RamDomain(0),RamDomain(1),RamDomain(10),RamDomain(24),RamDomain(2),RamDomain(210));
}();
/* END STRATUM 182 */
/* BEGIN STRATUM 183 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.35(35,"v0,v1","Rule","invent_Path,v0","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(507),
   invent_Path(_,v0),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_188_invent_Path_info_35->insert(RamDomain(35),RamDomain(0),RamDomain(1),RamDomain(95),RamDomain(15),RamDomain(211));
}();
/* END STRATUM 183 */
/* BEGIN STRATUM 184 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.36(36,"v0,v1","Rule","invent_Path,v0,v2","invent_Path,v1,v2","invent_Path,v2,v1","invent_Path(v0,v1) :- 
   Rule(645),
   invent_Path(v0,v2),
   invent_Path(v1,v2),
   invent_Path(v2,v1).").
in file  [0:0-0:0])_");
rel_189_invent_Path_info_36->insert(RamDomain(36),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(3),RamDomain(26),RamDomain(212));
}();
/* END STRATUM 184 */
/* BEGIN STRATUM 185 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.37(37,"v0,v1","Rule","invent_Path,v2,v0","invent_Path,v2,v1","invent_Path,v1,v2","invent_Path(v0,v1) :- 
   Rule(636),
   invent_Path(v2,v0),
   invent_Path(v2,v1),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_190_invent_Path_info_37->insert(RamDomain(37),RamDomain(0),RamDomain(1),RamDomain(16),RamDomain(26),RamDomain(3),RamDomain(213));
}();
/* END STRATUM 185 */
/* BEGIN STRATUM 186 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.38(38,"v0,v1","Rule","Edge,v0,v1","Edge,v1,v2","Edge,v2,v1","invent_Path(v0,v1) :- 
   Rule(167),
   Edge(v0,v1),
   Edge(v1,v2),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_191_invent_Path_info_38->insert(RamDomain(38),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(24),RamDomain(214));
}();
/* END STRATUM 186 */
/* BEGIN STRATUM 187 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.39(39,"v0,v1","Rule","Edge,v1,v2","invent_Path,v0,v2","invent_Path,v2,v0","invent_Path(v0,v1) :- 
   Rule(433),
   Edge(v1,v2),
   invent_Path(v0,v2),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_192_invent_Path_info_39->insert(RamDomain(39),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(19),RamDomain(16),RamDomain(215));
}();
/* END STRATUM 187 */
/* BEGIN STRATUM 188 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.4(4,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(496),
   invent_Path(v0,v1),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_193_invent_Path_info_4->insert(RamDomain(4),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(15),RamDomain(179));
}();
/* END STRATUM 188 */
/* BEGIN STRATUM 189 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.40(40,"v0,v1","Rule","Edge,v0,v1","Edge,v1","invent_Path(v0,v1) :- 
   Rule(148),
   Edge(v0,v1),
   Edge(v1,_).").
in file  [0:0-0:0])_");
rel_194_invent_Path_info_40->insert(RamDomain(40),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(22),RamDomain(216));
}();
/* END STRATUM 189 */
/* BEGIN STRATUM 190 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.41(41,"v0,v1","Rule","Edge,v0,v2","invent_Path,v2,v0","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(375),
   Edge(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_195_invent_Path_info_41->insert(RamDomain(41),RamDomain(0),RamDomain(1),RamDomain(12),RamDomain(16),RamDomain(15),RamDomain(217));
}();
/* END STRATUM 190 */
/* BEGIN STRATUM 191 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.42(42,"v0,v1","Rule","Edge,v0,v1","Edge,v2,v0","invent_Path,v1,v2","invent_Path(v0,v1) :- 
   Rule(268),
   Edge(v0,v1),
   Edge(v2,v0),
   invent_Path(v1,v2).").
in file  [0:0-0:0])_");
rel_196_invent_Path_info_42->insert(RamDomain(42),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(10),RamDomain(3),RamDomain(218));
}();
/* END STRATUM 191 */
/* BEGIN STRATUM 192 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.43(43,"v0,v1","Rule","Edge,v1,v2","invent_Path,v2,v1","Edge,v0,v1","invent_Path(v0,v1) :- 
   Rule(296),
   Edge(v1,v2),
   invent_Path(v2,v1),
   Edge(v0,v1).").
in file  [0:0-0:0])_");
rel_197_invent_Path_info_43->insert(RamDomain(43),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(26),RamDomain(2),RamDomain(219));
}();
/* END STRATUM 192 */
/* BEGIN STRATUM 193 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.44(44,"v0,v1","Rule","Edge,v1,v0","invent_Path,v2,v1","invent_Path,v0,v2","invent_Path(v0,v1) :- 
   Rule(392),
   Edge(v1,v0),
   invent_Path(v2,v1),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_198_invent_Path_info_44->insert(RamDomain(44),RamDomain(0),RamDomain(1),RamDomain(48),RamDomain(26),RamDomain(19),RamDomain(220));
}();
/* END STRATUM 193 */
/* BEGIN STRATUM 194 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.45(45,"v0,v1","Rule","Edge,v1,v2","Edge,v2,v1","invent_Path,v0,v1","invent_Path(v0,v1) :- 
   Rule(299),
   Edge(v1,v2),
   Edge(v2,v1),
   invent_Path(v0,v1).").
in file  [0:0-0:0])_");
rel_199_invent_Path_info_45->insert(RamDomain(45),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(24),RamDomain(13),RamDomain(221));
}();
/* END STRATUM 194 */
/* BEGIN STRATUM 195 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.46(46,"v0,v1","Rule","invent_Path,v0,v2","invent_Path,v2,v0","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(527),
   invent_Path(v0,v2),
   invent_Path(v2,v0),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_200_invent_Path_info_46->insert(RamDomain(46),RamDomain(0),RamDomain(1),RamDomain(19),RamDomain(16),RamDomain(15),RamDomain(222));
}();
/* END STRATUM 195 */
/* BEGIN STRATUM 196 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.47(47,"v0,v1","Rule","Edge,v1,v2","invent_Path,v1,v0","invent_Path,v2,v0","invent_Path(v0,v1) :- 
   Rule(377),
   Edge(v1,v2),
   invent_Path(v1,v0),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_201_invent_Path_info_47->insert(RamDomain(47),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(15),RamDomain(16),RamDomain(223));
}();
/* END STRATUM 196 */
/* BEGIN STRATUM 197 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.48(48,"v0,v1","Rule","Edge,v2,v1","Edge,v2,v0","Edge,v1,v0","invent_Path(v0,v1) :- 
   Rule(107),
   Edge(v2,v1),
   Edge(v2,v0),
   Edge(v1,v0).").
in file  [0:0-0:0])_");
rel_202_invent_Path_info_48->insert(RamDomain(48),RamDomain(0),RamDomain(1),RamDomain(24),RamDomain(10),RamDomain(48),RamDomain(224));
}();
/* END STRATUM 197 */
/* BEGIN STRATUM 198 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.49(49,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v1,v2","invent_Path,v2,v0","invent_Path(v0,v1) :- 
   Rule(557),
   invent_Path(v1,v0),
   invent_Path(v1,v2),
   invent_Path(v2,v0).").
in file  [0:0-0:0])_");
rel_203_invent_Path_info_49->insert(RamDomain(49),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(3),RamDomain(16),RamDomain(225));
}();
/* END STRATUM 198 */
/* BEGIN STRATUM 199 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.5(5,"v0,v1","Rule","Edge,v0,v1","Edge,v0,v2","Edge,v2,v1","invent_Path(v0,v1) :- 
   Rule(117),
   Edge(v0,v1),
   Edge(v0,v2),
   Edge(v2,v1).").
in file  [0:0-0:0])_");
rel_204_invent_Path_info_5->insert(RamDomain(5),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(12),RamDomain(24),RamDomain(180));
}();
/* END STRATUM 199 */
/* BEGIN STRATUM 200 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.6(6,"v0,v1","Rule","invent_Path,v0,v1","invent_Path,v1","invent_Path(v0,v1) :- 
   Rule(604),
   invent_Path(v0,v1),
   invent_Path(v1,_).").
in file  [0:0-0:0])_");
rel_205_invent_Path_info_6->insert(RamDomain(6),RamDomain(0),RamDomain(1),RamDomain(13),RamDomain(181),RamDomain(182));
}();
/* END STRATUM 200 */
/* BEGIN STRATUM 201 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.7(7,"v0,v1","Rule","Edge,v1,v2","invent_Path,v1,v2","Edge,v2,v0","invent_Path(v0,v1) :- 
   Rule(322),
   Edge(v1,v2),
   invent_Path(v1,v2),
   Edge(v2,v0).").
in file  [0:0-0:0])_");
rel_206_invent_Path_info_7->insert(RamDomain(7),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(3),RamDomain(10),RamDomain(183));
}();
/* END STRATUM 201 */
/* BEGIN STRATUM 202 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.8(8,"v0,v1","Rule","invent_Path,v1,v0","invent_Path,v2,v1","invent_Path,v0,v2","invent_Path(v0,v1) :- 
   Rule(544),
   invent_Path(v1,v0),
   invent_Path(v2,v1),
   invent_Path(v0,v2).").
in file  [0:0-0:0])_");
rel_207_invent_Path_info_8->insert(RamDomain(8),RamDomain(0),RamDomain(1),RamDomain(15),RamDomain(26),RamDomain(19),RamDomain(184));
}();
/* END STRATUM 202 */
/* BEGIN STRATUM 203 */
[&]() {
SignalHandler::instance()->setMsg(R"_(invent_Path.@info.9(9,"v0,v1","Rule","Edge,v1,v2","invent_Path,v0,v2","invent_Path,v1,v0","invent_Path(v0,v1) :- 
   Rule(380),
   Edge(v1,v2),
   invent_Path(v0,v2),
   invent_Path(v1,v0).").
in file  [0:0-0:0])_");
rel_208_invent_Path_info_9->insert(RamDomain(9),RamDomain(0),RamDomain(1),RamDomain(6),RamDomain(19),RamDomain(15),RamDomain(185));
}();
/* END STRATUM 203 */

// -- relation hint statistics --
if(isHintsProfilingEnabled()) {
std::cout << " -- Operation Hint Statistics --\n";
std::cout << "Relation rel_1_Edge:\n";
rel_1_Edge->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_2_Rule:\n";
rel_2_Rule->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_3_invent_Path:\n";
rel_3_invent_Path->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_4_delta_invent_Path:\n";
rel_4_delta_invent_Path->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_5_new_invent_Path:\n";
rel_5_new_invent_Path->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_6_SCC:\n";
rel_6_SCC->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_7_delta_SCC:\n";
rel_7_delta_SCC->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_8_new_SCC:\n";
rel_8_new_SCC->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_9_SCC_info_1:\n";
rel_9_SCC_info_1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_10_SCC_info_10:\n";
rel_10_SCC_info_10->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_11_SCC_info_100:\n";
rel_11_SCC_info_100->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_12_SCC_info_101:\n";
rel_12_SCC_info_101->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_13_SCC_info_102:\n";
rel_13_SCC_info_102->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_14_SCC_info_103:\n";
rel_14_SCC_info_103->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_15_SCC_info_104:\n";
rel_15_SCC_info_104->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_16_SCC_info_105:\n";
rel_16_SCC_info_105->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_17_SCC_info_106:\n";
rel_17_SCC_info_106->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_18_SCC_info_107:\n";
rel_18_SCC_info_107->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_19_SCC_info_108:\n";
rel_19_SCC_info_108->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_20_SCC_info_109:\n";
rel_20_SCC_info_109->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_21_SCC_info_11:\n";
rel_21_SCC_info_11->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_22_SCC_info_110:\n";
rel_22_SCC_info_110->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_23_SCC_info_111:\n";
rel_23_SCC_info_111->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_24_SCC_info_112:\n";
rel_24_SCC_info_112->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_25_SCC_info_113:\n";
rel_25_SCC_info_113->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_26_SCC_info_114:\n";
rel_26_SCC_info_114->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_27_SCC_info_115:\n";
rel_27_SCC_info_115->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_28_SCC_info_116:\n";
rel_28_SCC_info_116->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_29_SCC_info_117:\n";
rel_29_SCC_info_117->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_30_SCC_info_118:\n";
rel_30_SCC_info_118->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_31_SCC_info_119:\n";
rel_31_SCC_info_119->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_32_SCC_info_12:\n";
rel_32_SCC_info_12->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_33_SCC_info_120:\n";
rel_33_SCC_info_120->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_34_SCC_info_121:\n";
rel_34_SCC_info_121->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_35_SCC_info_122:\n";
rel_35_SCC_info_122->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_36_SCC_info_123:\n";
rel_36_SCC_info_123->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_37_SCC_info_124:\n";
rel_37_SCC_info_124->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_38_SCC_info_125:\n";
rel_38_SCC_info_125->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_39_SCC_info_126:\n";
rel_39_SCC_info_126->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_40_SCC_info_127:\n";
rel_40_SCC_info_127->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_41_SCC_info_128:\n";
rel_41_SCC_info_128->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_42_SCC_info_129:\n";
rel_42_SCC_info_129->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_43_SCC_info_13:\n";
rel_43_SCC_info_13->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_44_SCC_info_130:\n";
rel_44_SCC_info_130->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_45_SCC_info_131:\n";
rel_45_SCC_info_131->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_46_SCC_info_132:\n";
rel_46_SCC_info_132->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_47_SCC_info_133:\n";
rel_47_SCC_info_133->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_48_SCC_info_134:\n";
rel_48_SCC_info_134->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_49_SCC_info_135:\n";
rel_49_SCC_info_135->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_50_SCC_info_136:\n";
rel_50_SCC_info_136->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_51_SCC_info_137:\n";
rel_51_SCC_info_137->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_52_SCC_info_138:\n";
rel_52_SCC_info_138->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_53_SCC_info_139:\n";
rel_53_SCC_info_139->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_54_SCC_info_14:\n";
rel_54_SCC_info_14->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_55_SCC_info_140:\n";
rel_55_SCC_info_140->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_56_SCC_info_141:\n";
rel_56_SCC_info_141->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_57_SCC_info_142:\n";
rel_57_SCC_info_142->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_58_SCC_info_143:\n";
rel_58_SCC_info_143->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_59_SCC_info_144:\n";
rel_59_SCC_info_144->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_60_SCC_info_145:\n";
rel_60_SCC_info_145->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_61_SCC_info_146:\n";
rel_61_SCC_info_146->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_62_SCC_info_147:\n";
rel_62_SCC_info_147->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_63_SCC_info_148:\n";
rel_63_SCC_info_148->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_64_SCC_info_149:\n";
rel_64_SCC_info_149->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_65_SCC_info_15:\n";
rel_65_SCC_info_15->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_66_SCC_info_150:\n";
rel_66_SCC_info_150->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_67_SCC_info_151:\n";
rel_67_SCC_info_151->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_68_SCC_info_16:\n";
rel_68_SCC_info_16->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_69_SCC_info_17:\n";
rel_69_SCC_info_17->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_70_SCC_info_18:\n";
rel_70_SCC_info_18->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_71_SCC_info_19:\n";
rel_71_SCC_info_19->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_72_SCC_info_2:\n";
rel_72_SCC_info_2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_73_SCC_info_20:\n";
rel_73_SCC_info_20->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_74_SCC_info_21:\n";
rel_74_SCC_info_21->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_75_SCC_info_22:\n";
rel_75_SCC_info_22->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_76_SCC_info_23:\n";
rel_76_SCC_info_23->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_77_SCC_info_24:\n";
rel_77_SCC_info_24->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_78_SCC_info_25:\n";
rel_78_SCC_info_25->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_79_SCC_info_26:\n";
rel_79_SCC_info_26->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_80_SCC_info_27:\n";
rel_80_SCC_info_27->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_81_SCC_info_28:\n";
rel_81_SCC_info_28->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_82_SCC_info_29:\n";
rel_82_SCC_info_29->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_83_SCC_info_3:\n";
rel_83_SCC_info_3->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_84_SCC_info_30:\n";
rel_84_SCC_info_30->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_85_SCC_info_31:\n";
rel_85_SCC_info_31->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_86_SCC_info_32:\n";
rel_86_SCC_info_32->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_87_SCC_info_33:\n";
rel_87_SCC_info_33->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_88_SCC_info_34:\n";
rel_88_SCC_info_34->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_89_SCC_info_35:\n";
rel_89_SCC_info_35->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_90_SCC_info_36:\n";
rel_90_SCC_info_36->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_91_SCC_info_37:\n";
rel_91_SCC_info_37->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_92_SCC_info_38:\n";
rel_92_SCC_info_38->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_93_SCC_info_39:\n";
rel_93_SCC_info_39->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_94_SCC_info_4:\n";
rel_94_SCC_info_4->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_95_SCC_info_40:\n";
rel_95_SCC_info_40->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_96_SCC_info_41:\n";
rel_96_SCC_info_41->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_97_SCC_info_42:\n";
rel_97_SCC_info_42->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_98_SCC_info_43:\n";
rel_98_SCC_info_43->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_99_SCC_info_44:\n";
rel_99_SCC_info_44->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_100_SCC_info_45:\n";
rel_100_SCC_info_45->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_101_SCC_info_46:\n";
rel_101_SCC_info_46->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_102_SCC_info_47:\n";
rel_102_SCC_info_47->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_103_SCC_info_48:\n";
rel_103_SCC_info_48->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_104_SCC_info_49:\n";
rel_104_SCC_info_49->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_105_SCC_info_5:\n";
rel_105_SCC_info_5->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_106_SCC_info_50:\n";
rel_106_SCC_info_50->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_107_SCC_info_51:\n";
rel_107_SCC_info_51->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_108_SCC_info_52:\n";
rel_108_SCC_info_52->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_109_SCC_info_53:\n";
rel_109_SCC_info_53->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_110_SCC_info_54:\n";
rel_110_SCC_info_54->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_111_SCC_info_55:\n";
rel_111_SCC_info_55->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_112_SCC_info_56:\n";
rel_112_SCC_info_56->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_113_SCC_info_57:\n";
rel_113_SCC_info_57->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_114_SCC_info_58:\n";
rel_114_SCC_info_58->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_115_SCC_info_59:\n";
rel_115_SCC_info_59->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_116_SCC_info_6:\n";
rel_116_SCC_info_6->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_117_SCC_info_60:\n";
rel_117_SCC_info_60->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_118_SCC_info_61:\n";
rel_118_SCC_info_61->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_119_SCC_info_62:\n";
rel_119_SCC_info_62->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_120_SCC_info_63:\n";
rel_120_SCC_info_63->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_121_SCC_info_64:\n";
rel_121_SCC_info_64->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_122_SCC_info_65:\n";
rel_122_SCC_info_65->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_123_SCC_info_66:\n";
rel_123_SCC_info_66->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_124_SCC_info_67:\n";
rel_124_SCC_info_67->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_125_SCC_info_68:\n";
rel_125_SCC_info_68->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_126_SCC_info_69:\n";
rel_126_SCC_info_69->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_127_SCC_info_7:\n";
rel_127_SCC_info_7->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_128_SCC_info_70:\n";
rel_128_SCC_info_70->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_129_SCC_info_71:\n";
rel_129_SCC_info_71->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_130_SCC_info_72:\n";
rel_130_SCC_info_72->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_131_SCC_info_73:\n";
rel_131_SCC_info_73->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_132_SCC_info_74:\n";
rel_132_SCC_info_74->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_133_SCC_info_75:\n";
rel_133_SCC_info_75->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_134_SCC_info_76:\n";
rel_134_SCC_info_76->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_135_SCC_info_77:\n";
rel_135_SCC_info_77->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_136_SCC_info_78:\n";
rel_136_SCC_info_78->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_137_SCC_info_79:\n";
rel_137_SCC_info_79->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_138_SCC_info_8:\n";
rel_138_SCC_info_8->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_139_SCC_info_80:\n";
rel_139_SCC_info_80->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_140_SCC_info_81:\n";
rel_140_SCC_info_81->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_141_SCC_info_82:\n";
rel_141_SCC_info_82->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_142_SCC_info_83:\n";
rel_142_SCC_info_83->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_143_SCC_info_84:\n";
rel_143_SCC_info_84->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_144_SCC_info_85:\n";
rel_144_SCC_info_85->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_145_SCC_info_86:\n";
rel_145_SCC_info_86->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_146_SCC_info_87:\n";
rel_146_SCC_info_87->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_147_SCC_info_88:\n";
rel_147_SCC_info_88->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_148_SCC_info_89:\n";
rel_148_SCC_info_89->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_149_SCC_info_9:\n";
rel_149_SCC_info_9->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_150_SCC_info_90:\n";
rel_150_SCC_info_90->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_151_SCC_info_91:\n";
rel_151_SCC_info_91->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_152_SCC_info_92:\n";
rel_152_SCC_info_92->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_153_SCC_info_93:\n";
rel_153_SCC_info_93->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_154_SCC_info_94:\n";
rel_154_SCC_info_94->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_155_SCC_info_95:\n";
rel_155_SCC_info_95->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_156_SCC_info_96:\n";
rel_156_SCC_info_96->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_157_SCC_info_97:\n";
rel_157_SCC_info_97->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_158_SCC_info_98:\n";
rel_158_SCC_info_98->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_159_SCC_info_99:\n";
rel_159_SCC_info_99->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_160_invent_Path_info_1:\n";
rel_160_invent_Path_info_1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_161_invent_Path_info_10:\n";
rel_161_invent_Path_info_10->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_162_invent_Path_info_11:\n";
rel_162_invent_Path_info_11->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_163_invent_Path_info_12:\n";
rel_163_invent_Path_info_12->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_164_invent_Path_info_13:\n";
rel_164_invent_Path_info_13->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_165_invent_Path_info_14:\n";
rel_165_invent_Path_info_14->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_166_invent_Path_info_15:\n";
rel_166_invent_Path_info_15->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_167_invent_Path_info_16:\n";
rel_167_invent_Path_info_16->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_168_invent_Path_info_17:\n";
rel_168_invent_Path_info_17->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_169_invent_Path_info_18:\n";
rel_169_invent_Path_info_18->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_170_invent_Path_info_19:\n";
rel_170_invent_Path_info_19->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_171_invent_Path_info_2:\n";
rel_171_invent_Path_info_2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_172_invent_Path_info_20:\n";
rel_172_invent_Path_info_20->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_173_invent_Path_info_21:\n";
rel_173_invent_Path_info_21->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_174_invent_Path_info_22:\n";
rel_174_invent_Path_info_22->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_175_invent_Path_info_23:\n";
rel_175_invent_Path_info_23->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_176_invent_Path_info_24:\n";
rel_176_invent_Path_info_24->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_177_invent_Path_info_25:\n";
rel_177_invent_Path_info_25->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_178_invent_Path_info_26:\n";
rel_178_invent_Path_info_26->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_179_invent_Path_info_27:\n";
rel_179_invent_Path_info_27->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_180_invent_Path_info_28:\n";
rel_180_invent_Path_info_28->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_181_invent_Path_info_29:\n";
rel_181_invent_Path_info_29->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_182_invent_Path_info_3:\n";
rel_182_invent_Path_info_3->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_183_invent_Path_info_30:\n";
rel_183_invent_Path_info_30->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_184_invent_Path_info_31:\n";
rel_184_invent_Path_info_31->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_185_invent_Path_info_32:\n";
rel_185_invent_Path_info_32->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_186_invent_Path_info_33:\n";
rel_186_invent_Path_info_33->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_187_invent_Path_info_34:\n";
rel_187_invent_Path_info_34->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_188_invent_Path_info_35:\n";
rel_188_invent_Path_info_35->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_189_invent_Path_info_36:\n";
rel_189_invent_Path_info_36->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_190_invent_Path_info_37:\n";
rel_190_invent_Path_info_37->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_191_invent_Path_info_38:\n";
rel_191_invent_Path_info_38->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_192_invent_Path_info_39:\n";
rel_192_invent_Path_info_39->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_193_invent_Path_info_4:\n";
rel_193_invent_Path_info_4->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_194_invent_Path_info_40:\n";
rel_194_invent_Path_info_40->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_195_invent_Path_info_41:\n";
rel_195_invent_Path_info_41->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_196_invent_Path_info_42:\n";
rel_196_invent_Path_info_42->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_197_invent_Path_info_43:\n";
rel_197_invent_Path_info_43->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_198_invent_Path_info_44:\n";
rel_198_invent_Path_info_44->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_199_invent_Path_info_45:\n";
rel_199_invent_Path_info_45->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_200_invent_Path_info_46:\n";
rel_200_invent_Path_info_46->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_201_invent_Path_info_47:\n";
rel_201_invent_Path_info_47->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_202_invent_Path_info_48:\n";
rel_202_invent_Path_info_48->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_203_invent_Path_info_49:\n";
rel_203_invent_Path_info_49->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_204_invent_Path_info_5:\n";
rel_204_invent_Path_info_5->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_205_invent_Path_info_6:\n";
rel_205_invent_Path_info_6->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_206_invent_Path_info_7:\n";
rel_206_invent_Path_info_7->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_207_invent_Path_info_8:\n";
rel_207_invent_Path_info_8->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_208_invent_Path_info_9:\n";
rel_208_invent_Path_info_9->printHintStatistics(std::cout,"  ");
std::cout << "\n";
}
SignalHandler::instance()->reset();
}
public:
void run(size_t stratumIndex = (size_t) -1) override { runFunction(".", ".", stratumIndex, false); }
public:
void runAll(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1) override { runFunction(inputDirectory, outputDirectory, stratumIndex, true);
}
public:
void printAll(std::string outputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./invent_Path.csv"},{"name","invent_Path"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_3_invent_Path);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1"},{"filename","./SCC.csv"},{"name","SCC"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_SCC);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string inputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Edge.facts"},{"name","Edge"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Edge);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
public:
void dumpInputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_1_Edge");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_1_Edge);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_2_Rule");
IOSystem::getInstance().getWriter(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->writeAll(*rel_2_Rule);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_3_invent_Path");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_3_invent_Path);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_6_SCC");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_SCC);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
SymbolTable& getSymbolTable() override {
return symTable;
}
void executeSubroutine(std::string name, const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) override {
if (name == "SCC_100_negation_subproof") {
subproof_0(args, ret, err);
}
if (name == "SCC_100_subproof") {
subproof_1(args, ret, err);
}
if (name == "SCC_101_negation_subproof") {
subproof_2(args, ret, err);
}
if (name == "SCC_101_subproof") {
subproof_3(args, ret, err);
}
if (name == "SCC_102_negation_subproof") {
subproof_4(args, ret, err);
}
if (name == "SCC_102_subproof") {
subproof_5(args, ret, err);
}
if (name == "SCC_103_negation_subproof") {
subproof_6(args, ret, err);
}
if (name == "SCC_103_subproof") {
subproof_7(args, ret, err);
}
if (name == "SCC_104_negation_subproof") {
subproof_8(args, ret, err);
}
if (name == "SCC_104_subproof") {
subproof_9(args, ret, err);
}
if (name == "SCC_105_negation_subproof") {
subproof_10(args, ret, err);
}
if (name == "SCC_105_subproof") {
subproof_11(args, ret, err);
}
if (name == "SCC_106_negation_subproof") {
subproof_12(args, ret, err);
}
if (name == "SCC_106_subproof") {
subproof_13(args, ret, err);
}
if (name == "SCC_107_negation_subproof") {
subproof_14(args, ret, err);
}
if (name == "SCC_107_subproof") {
subproof_15(args, ret, err);
}
if (name == "SCC_108_negation_subproof") {
subproof_16(args, ret, err);
}
if (name == "SCC_108_subproof") {
subproof_17(args, ret, err);
}
if (name == "SCC_109_negation_subproof") {
subproof_18(args, ret, err);
}
if (name == "SCC_109_subproof") {
subproof_19(args, ret, err);
}
if (name == "SCC_10_negation_subproof") {
subproof_20(args, ret, err);
}
if (name == "SCC_10_subproof") {
subproof_21(args, ret, err);
}
if (name == "SCC_110_negation_subproof") {
subproof_22(args, ret, err);
}
if (name == "SCC_110_subproof") {
subproof_23(args, ret, err);
}
if (name == "SCC_111_negation_subproof") {
subproof_24(args, ret, err);
}
if (name == "SCC_111_subproof") {
subproof_25(args, ret, err);
}
if (name == "SCC_112_negation_subproof") {
subproof_26(args, ret, err);
}
if (name == "SCC_112_subproof") {
subproof_27(args, ret, err);
}
if (name == "SCC_113_negation_subproof") {
subproof_28(args, ret, err);
}
if (name == "SCC_113_subproof") {
subproof_29(args, ret, err);
}
if (name == "SCC_114_negation_subproof") {
subproof_30(args, ret, err);
}
if (name == "SCC_114_subproof") {
subproof_31(args, ret, err);
}
if (name == "SCC_115_negation_subproof") {
subproof_32(args, ret, err);
}
if (name == "SCC_115_subproof") {
subproof_33(args, ret, err);
}
if (name == "SCC_116_negation_subproof") {
subproof_34(args, ret, err);
}
if (name == "SCC_116_subproof") {
subproof_35(args, ret, err);
}
if (name == "SCC_117_negation_subproof") {
subproof_36(args, ret, err);
}
if (name == "SCC_117_subproof") {
subproof_37(args, ret, err);
}
if (name == "SCC_118_negation_subproof") {
subproof_38(args, ret, err);
}
if (name == "SCC_118_subproof") {
subproof_39(args, ret, err);
}
if (name == "SCC_119_negation_subproof") {
subproof_40(args, ret, err);
}
if (name == "SCC_119_subproof") {
subproof_41(args, ret, err);
}
if (name == "SCC_11_negation_subproof") {
subproof_42(args, ret, err);
}
if (name == "SCC_11_subproof") {
subproof_43(args, ret, err);
}
if (name == "SCC_120_negation_subproof") {
subproof_44(args, ret, err);
}
if (name == "SCC_120_subproof") {
subproof_45(args, ret, err);
}
if (name == "SCC_121_negation_subproof") {
subproof_46(args, ret, err);
}
if (name == "SCC_121_subproof") {
subproof_47(args, ret, err);
}
if (name == "SCC_122_negation_subproof") {
subproof_48(args, ret, err);
}
if (name == "SCC_122_subproof") {
subproof_49(args, ret, err);
}
if (name == "SCC_123_negation_subproof") {
subproof_50(args, ret, err);
}
if (name == "SCC_123_subproof") {
subproof_51(args, ret, err);
}
if (name == "SCC_124_negation_subproof") {
subproof_52(args, ret, err);
}
if (name == "SCC_124_subproof") {
subproof_53(args, ret, err);
}
if (name == "SCC_125_negation_subproof") {
subproof_54(args, ret, err);
}
if (name == "SCC_125_subproof") {
subproof_55(args, ret, err);
}
if (name == "SCC_126_negation_subproof") {
subproof_56(args, ret, err);
}
if (name == "SCC_126_subproof") {
subproof_57(args, ret, err);
}
if (name == "SCC_127_negation_subproof") {
subproof_58(args, ret, err);
}
if (name == "SCC_127_subproof") {
subproof_59(args, ret, err);
}
if (name == "SCC_128_negation_subproof") {
subproof_60(args, ret, err);
}
if (name == "SCC_128_subproof") {
subproof_61(args, ret, err);
}
if (name == "SCC_129_negation_subproof") {
subproof_62(args, ret, err);
}
if (name == "SCC_129_subproof") {
subproof_63(args, ret, err);
}
if (name == "SCC_12_negation_subproof") {
subproof_64(args, ret, err);
}
if (name == "SCC_12_subproof") {
subproof_65(args, ret, err);
}
if (name == "SCC_130_negation_subproof") {
subproof_66(args, ret, err);
}
if (name == "SCC_130_subproof") {
subproof_67(args, ret, err);
}
if (name == "SCC_131_negation_subproof") {
subproof_68(args, ret, err);
}
if (name == "SCC_131_subproof") {
subproof_69(args, ret, err);
}
if (name == "SCC_132_negation_subproof") {
subproof_70(args, ret, err);
}
if (name == "SCC_132_subproof") {
subproof_71(args, ret, err);
}
if (name == "SCC_133_negation_subproof") {
subproof_72(args, ret, err);
}
if (name == "SCC_133_subproof") {
subproof_73(args, ret, err);
}
if (name == "SCC_134_negation_subproof") {
subproof_74(args, ret, err);
}
if (name == "SCC_134_subproof") {
subproof_75(args, ret, err);
}
if (name == "SCC_135_negation_subproof") {
subproof_76(args, ret, err);
}
if (name == "SCC_135_subproof") {
subproof_77(args, ret, err);
}
if (name == "SCC_136_negation_subproof") {
subproof_78(args, ret, err);
}
if (name == "SCC_136_subproof") {
subproof_79(args, ret, err);
}
if (name == "SCC_137_negation_subproof") {
subproof_80(args, ret, err);
}
if (name == "SCC_137_subproof") {
subproof_81(args, ret, err);
}
if (name == "SCC_138_negation_subproof") {
subproof_82(args, ret, err);
}
if (name == "SCC_138_subproof") {
subproof_83(args, ret, err);
}
if (name == "SCC_139_negation_subproof") {
subproof_84(args, ret, err);
}
if (name == "SCC_139_subproof") {
subproof_85(args, ret, err);
}
if (name == "SCC_13_negation_subproof") {
subproof_86(args, ret, err);
}
if (name == "SCC_13_subproof") {
subproof_87(args, ret, err);
}
if (name == "SCC_140_negation_subproof") {
subproof_88(args, ret, err);
}
if (name == "SCC_140_subproof") {
subproof_89(args, ret, err);
}
if (name == "SCC_141_negation_subproof") {
subproof_90(args, ret, err);
}
if (name == "SCC_141_subproof") {
subproof_91(args, ret, err);
}
if (name == "SCC_142_negation_subproof") {
subproof_92(args, ret, err);
}
if (name == "SCC_142_subproof") {
subproof_93(args, ret, err);
}
if (name == "SCC_143_negation_subproof") {
subproof_94(args, ret, err);
}
if (name == "SCC_143_subproof") {
subproof_95(args, ret, err);
}
if (name == "SCC_144_negation_subproof") {
subproof_96(args, ret, err);
}
if (name == "SCC_144_subproof") {
subproof_97(args, ret, err);
}
if (name == "SCC_145_negation_subproof") {
subproof_98(args, ret, err);
}
if (name == "SCC_145_subproof") {
subproof_99(args, ret, err);
}
if (name == "SCC_146_negation_subproof") {
subproof_100(args, ret, err);
}
if (name == "SCC_146_subproof") {
subproof_101(args, ret, err);
}
if (name == "SCC_147_negation_subproof") {
subproof_102(args, ret, err);
}
if (name == "SCC_147_subproof") {
subproof_103(args, ret, err);
}
if (name == "SCC_148_negation_subproof") {
subproof_104(args, ret, err);
}
if (name == "SCC_148_subproof") {
subproof_105(args, ret, err);
}
if (name == "SCC_149_negation_subproof") {
subproof_106(args, ret, err);
}
if (name == "SCC_149_subproof") {
subproof_107(args, ret, err);
}
if (name == "SCC_14_negation_subproof") {
subproof_108(args, ret, err);
}
if (name == "SCC_14_subproof") {
subproof_109(args, ret, err);
}
if (name == "SCC_150_negation_subproof") {
subproof_110(args, ret, err);
}
if (name == "SCC_150_subproof") {
subproof_111(args, ret, err);
}
if (name == "SCC_151_negation_subproof") {
subproof_112(args, ret, err);
}
if (name == "SCC_151_subproof") {
subproof_113(args, ret, err);
}
if (name == "SCC_15_negation_subproof") {
subproof_114(args, ret, err);
}
if (name == "SCC_15_subproof") {
subproof_115(args, ret, err);
}
if (name == "SCC_16_negation_subproof") {
subproof_116(args, ret, err);
}
if (name == "SCC_16_subproof") {
subproof_117(args, ret, err);
}
if (name == "SCC_17_negation_subproof") {
subproof_118(args, ret, err);
}
if (name == "SCC_17_subproof") {
subproof_119(args, ret, err);
}
if (name == "SCC_18_negation_subproof") {
subproof_120(args, ret, err);
}
if (name == "SCC_18_subproof") {
subproof_121(args, ret, err);
}
if (name == "SCC_19_negation_subproof") {
subproof_122(args, ret, err);
}
if (name == "SCC_19_subproof") {
subproof_123(args, ret, err);
}
if (name == "SCC_1_negation_subproof") {
subproof_124(args, ret, err);
}
if (name == "SCC_1_subproof") {
subproof_125(args, ret, err);
}
if (name == "SCC_20_negation_subproof") {
subproof_126(args, ret, err);
}
if (name == "SCC_20_subproof") {
subproof_127(args, ret, err);
}
if (name == "SCC_21_negation_subproof") {
subproof_128(args, ret, err);
}
if (name == "SCC_21_subproof") {
subproof_129(args, ret, err);
}
if (name == "SCC_22_negation_subproof") {
subproof_130(args, ret, err);
}
if (name == "SCC_22_subproof") {
subproof_131(args, ret, err);
}
if (name == "SCC_23_negation_subproof") {
subproof_132(args, ret, err);
}
if (name == "SCC_23_subproof") {
subproof_133(args, ret, err);
}
if (name == "SCC_24_negation_subproof") {
subproof_134(args, ret, err);
}
if (name == "SCC_24_subproof") {
subproof_135(args, ret, err);
}
if (name == "SCC_25_negation_subproof") {
subproof_136(args, ret, err);
}
if (name == "SCC_25_subproof") {
subproof_137(args, ret, err);
}
if (name == "SCC_26_negation_subproof") {
subproof_138(args, ret, err);
}
if (name == "SCC_26_subproof") {
subproof_139(args, ret, err);
}
if (name == "SCC_27_negation_subproof") {
subproof_140(args, ret, err);
}
if (name == "SCC_27_subproof") {
subproof_141(args, ret, err);
}
if (name == "SCC_28_negation_subproof") {
subproof_142(args, ret, err);
}
if (name == "SCC_28_subproof") {
subproof_143(args, ret, err);
}
if (name == "SCC_29_negation_subproof") {
subproof_144(args, ret, err);
}
if (name == "SCC_29_subproof") {
subproof_145(args, ret, err);
}
if (name == "SCC_2_negation_subproof") {
subproof_146(args, ret, err);
}
if (name == "SCC_2_subproof") {
subproof_147(args, ret, err);
}
if (name == "SCC_30_negation_subproof") {
subproof_148(args, ret, err);
}
if (name == "SCC_30_subproof") {
subproof_149(args, ret, err);
}
if (name == "SCC_31_negation_subproof") {
subproof_150(args, ret, err);
}
if (name == "SCC_31_subproof") {
subproof_151(args, ret, err);
}
if (name == "SCC_32_negation_subproof") {
subproof_152(args, ret, err);
}
if (name == "SCC_32_subproof") {
subproof_153(args, ret, err);
}
if (name == "SCC_33_negation_subproof") {
subproof_154(args, ret, err);
}
if (name == "SCC_33_subproof") {
subproof_155(args, ret, err);
}
if (name == "SCC_34_negation_subproof") {
subproof_156(args, ret, err);
}
if (name == "SCC_34_subproof") {
subproof_157(args, ret, err);
}
if (name == "SCC_35_negation_subproof") {
subproof_158(args, ret, err);
}
if (name == "SCC_35_subproof") {
subproof_159(args, ret, err);
}
if (name == "SCC_36_negation_subproof") {
subproof_160(args, ret, err);
}
if (name == "SCC_36_subproof") {
subproof_161(args, ret, err);
}
if (name == "SCC_37_negation_subproof") {
subproof_162(args, ret, err);
}
if (name == "SCC_37_subproof") {
subproof_163(args, ret, err);
}
if (name == "SCC_38_negation_subproof") {
subproof_164(args, ret, err);
}
if (name == "SCC_38_subproof") {
subproof_165(args, ret, err);
}
if (name == "SCC_39_negation_subproof") {
subproof_166(args, ret, err);
}
if (name == "SCC_39_subproof") {
subproof_167(args, ret, err);
}
if (name == "SCC_3_negation_subproof") {
subproof_168(args, ret, err);
}
if (name == "SCC_3_subproof") {
subproof_169(args, ret, err);
}
if (name == "SCC_40_negation_subproof") {
subproof_170(args, ret, err);
}
if (name == "SCC_40_subproof") {
subproof_171(args, ret, err);
}
if (name == "SCC_41_negation_subproof") {
subproof_172(args, ret, err);
}
if (name == "SCC_41_subproof") {
subproof_173(args, ret, err);
}
if (name == "SCC_42_negation_subproof") {
subproof_174(args, ret, err);
}
if (name == "SCC_42_subproof") {
subproof_175(args, ret, err);
}
if (name == "SCC_43_negation_subproof") {
subproof_176(args, ret, err);
}
if (name == "SCC_43_subproof") {
subproof_177(args, ret, err);
}
if (name == "SCC_44_negation_subproof") {
subproof_178(args, ret, err);
}
if (name == "SCC_44_subproof") {
subproof_179(args, ret, err);
}
if (name == "SCC_45_negation_subproof") {
subproof_180(args, ret, err);
}
if (name == "SCC_45_subproof") {
subproof_181(args, ret, err);
}
if (name == "SCC_46_negation_subproof") {
subproof_182(args, ret, err);
}
if (name == "SCC_46_subproof") {
subproof_183(args, ret, err);
}
if (name == "SCC_47_negation_subproof") {
subproof_184(args, ret, err);
}
if (name == "SCC_47_subproof") {
subproof_185(args, ret, err);
}
if (name == "SCC_48_negation_subproof") {
subproof_186(args, ret, err);
}
if (name == "SCC_48_subproof") {
subproof_187(args, ret, err);
}
if (name == "SCC_49_negation_subproof") {
subproof_188(args, ret, err);
}
if (name == "SCC_49_subproof") {
subproof_189(args, ret, err);
}
if (name == "SCC_4_negation_subproof") {
subproof_190(args, ret, err);
}
if (name == "SCC_4_subproof") {
subproof_191(args, ret, err);
}
if (name == "SCC_50_negation_subproof") {
subproof_192(args, ret, err);
}
if (name == "SCC_50_subproof") {
subproof_193(args, ret, err);
}
if (name == "SCC_51_negation_subproof") {
subproof_194(args, ret, err);
}
if (name == "SCC_51_subproof") {
subproof_195(args, ret, err);
}
if (name == "SCC_52_negation_subproof") {
subproof_196(args, ret, err);
}
if (name == "SCC_52_subproof") {
subproof_197(args, ret, err);
}
if (name == "SCC_53_negation_subproof") {
subproof_198(args, ret, err);
}
if (name == "SCC_53_subproof") {
subproof_199(args, ret, err);
}
if (name == "SCC_54_negation_subproof") {
subproof_200(args, ret, err);
}
if (name == "SCC_54_subproof") {
subproof_201(args, ret, err);
}
if (name == "SCC_55_negation_subproof") {
subproof_202(args, ret, err);
}
if (name == "SCC_55_subproof") {
subproof_203(args, ret, err);
}
if (name == "SCC_56_negation_subproof") {
subproof_204(args, ret, err);
}
if (name == "SCC_56_subproof") {
subproof_205(args, ret, err);
}
if (name == "SCC_57_negation_subproof") {
subproof_206(args, ret, err);
}
if (name == "SCC_57_subproof") {
subproof_207(args, ret, err);
}
if (name == "SCC_58_negation_subproof") {
subproof_208(args, ret, err);
}
if (name == "SCC_58_subproof") {
subproof_209(args, ret, err);
}
if (name == "SCC_59_negation_subproof") {
subproof_210(args, ret, err);
}
if (name == "SCC_59_subproof") {
subproof_211(args, ret, err);
}
if (name == "SCC_5_negation_subproof") {
subproof_212(args, ret, err);
}
if (name == "SCC_5_subproof") {
subproof_213(args, ret, err);
}
if (name == "SCC_60_negation_subproof") {
subproof_214(args, ret, err);
}
if (name == "SCC_60_subproof") {
subproof_215(args, ret, err);
}
if (name == "SCC_61_negation_subproof") {
subproof_216(args, ret, err);
}
if (name == "SCC_61_subproof") {
subproof_217(args, ret, err);
}
if (name == "SCC_62_negation_subproof") {
subproof_218(args, ret, err);
}
if (name == "SCC_62_subproof") {
subproof_219(args, ret, err);
}
if (name == "SCC_63_negation_subproof") {
subproof_220(args, ret, err);
}
if (name == "SCC_63_subproof") {
subproof_221(args, ret, err);
}
if (name == "SCC_64_negation_subproof") {
subproof_222(args, ret, err);
}
if (name == "SCC_64_subproof") {
subproof_223(args, ret, err);
}
if (name == "SCC_65_negation_subproof") {
subproof_224(args, ret, err);
}
if (name == "SCC_65_subproof") {
subproof_225(args, ret, err);
}
if (name == "SCC_66_negation_subproof") {
subproof_226(args, ret, err);
}
if (name == "SCC_66_subproof") {
subproof_227(args, ret, err);
}
if (name == "SCC_67_negation_subproof") {
subproof_228(args, ret, err);
}
if (name == "SCC_67_subproof") {
subproof_229(args, ret, err);
}
if (name == "SCC_68_negation_subproof") {
subproof_230(args, ret, err);
}
if (name == "SCC_68_subproof") {
subproof_231(args, ret, err);
}
if (name == "SCC_69_negation_subproof") {
subproof_232(args, ret, err);
}
if (name == "SCC_69_subproof") {
subproof_233(args, ret, err);
}
if (name == "SCC_6_negation_subproof") {
subproof_234(args, ret, err);
}
if (name == "SCC_6_subproof") {
subproof_235(args, ret, err);
}
if (name == "SCC_70_negation_subproof") {
subproof_236(args, ret, err);
}
if (name == "SCC_70_subproof") {
subproof_237(args, ret, err);
}
if (name == "SCC_71_negation_subproof") {
subproof_238(args, ret, err);
}
if (name == "SCC_71_subproof") {
subproof_239(args, ret, err);
}
if (name == "SCC_72_negation_subproof") {
subproof_240(args, ret, err);
}
if (name == "SCC_72_subproof") {
subproof_241(args, ret, err);
}
if (name == "SCC_73_negation_subproof") {
subproof_242(args, ret, err);
}
if (name == "SCC_73_subproof") {
subproof_243(args, ret, err);
}
if (name == "SCC_74_negation_subproof") {
subproof_244(args, ret, err);
}
if (name == "SCC_74_subproof") {
subproof_245(args, ret, err);
}
if (name == "SCC_75_negation_subproof") {
subproof_246(args, ret, err);
}
if (name == "SCC_75_subproof") {
subproof_247(args, ret, err);
}
if (name == "SCC_76_negation_subproof") {
subproof_248(args, ret, err);
}
if (name == "SCC_76_subproof") {
subproof_249(args, ret, err);
}
if (name == "SCC_77_negation_subproof") {
subproof_250(args, ret, err);
}
if (name == "SCC_77_subproof") {
subproof_251(args, ret, err);
}
if (name == "SCC_78_negation_subproof") {
subproof_252(args, ret, err);
}
if (name == "SCC_78_subproof") {
subproof_253(args, ret, err);
}
if (name == "SCC_79_negation_subproof") {
subproof_254(args, ret, err);
}
if (name == "SCC_79_subproof") {
subproof_255(args, ret, err);
}
if (name == "SCC_7_negation_subproof") {
subproof_256(args, ret, err);
}
if (name == "SCC_7_subproof") {
subproof_257(args, ret, err);
}
if (name == "SCC_80_negation_subproof") {
subproof_258(args, ret, err);
}
if (name == "SCC_80_subproof") {
subproof_259(args, ret, err);
}
if (name == "SCC_81_negation_subproof") {
subproof_260(args, ret, err);
}
if (name == "SCC_81_subproof") {
subproof_261(args, ret, err);
}
if (name == "SCC_82_negation_subproof") {
subproof_262(args, ret, err);
}
if (name == "SCC_82_subproof") {
subproof_263(args, ret, err);
}
if (name == "SCC_83_negation_subproof") {
subproof_264(args, ret, err);
}
if (name == "SCC_83_subproof") {
subproof_265(args, ret, err);
}
if (name == "SCC_84_negation_subproof") {
subproof_266(args, ret, err);
}
if (name == "SCC_84_subproof") {
subproof_267(args, ret, err);
}
if (name == "SCC_85_negation_subproof") {
subproof_268(args, ret, err);
}
if (name == "SCC_85_subproof") {
subproof_269(args, ret, err);
}
if (name == "SCC_86_negation_subproof") {
subproof_270(args, ret, err);
}
if (name == "SCC_86_subproof") {
subproof_271(args, ret, err);
}
if (name == "SCC_87_negation_subproof") {
subproof_272(args, ret, err);
}
if (name == "SCC_87_subproof") {
subproof_273(args, ret, err);
}
if (name == "SCC_88_negation_subproof") {
subproof_274(args, ret, err);
}
if (name == "SCC_88_subproof") {
subproof_275(args, ret, err);
}
if (name == "SCC_89_negation_subproof") {
subproof_276(args, ret, err);
}
if (name == "SCC_89_subproof") {
subproof_277(args, ret, err);
}
if (name == "SCC_8_negation_subproof") {
subproof_278(args, ret, err);
}
if (name == "SCC_8_subproof") {
subproof_279(args, ret, err);
}
if (name == "SCC_90_negation_subproof") {
subproof_280(args, ret, err);
}
if (name == "SCC_90_subproof") {
subproof_281(args, ret, err);
}
if (name == "SCC_91_negation_subproof") {
subproof_282(args, ret, err);
}
if (name == "SCC_91_subproof") {
subproof_283(args, ret, err);
}
if (name == "SCC_92_negation_subproof") {
subproof_284(args, ret, err);
}
if (name == "SCC_92_subproof") {
subproof_285(args, ret, err);
}
if (name == "SCC_93_negation_subproof") {
subproof_286(args, ret, err);
}
if (name == "SCC_93_subproof") {
subproof_287(args, ret, err);
}
if (name == "SCC_94_negation_subproof") {
subproof_288(args, ret, err);
}
if (name == "SCC_94_subproof") {
subproof_289(args, ret, err);
}
if (name == "SCC_95_negation_subproof") {
subproof_290(args, ret, err);
}
if (name == "SCC_95_subproof") {
subproof_291(args, ret, err);
}
if (name == "SCC_96_negation_subproof") {
subproof_292(args, ret, err);
}
if (name == "SCC_96_subproof") {
subproof_293(args, ret, err);
}
if (name == "SCC_97_negation_subproof") {
subproof_294(args, ret, err);
}
if (name == "SCC_97_subproof") {
subproof_295(args, ret, err);
}
if (name == "SCC_98_negation_subproof") {
subproof_296(args, ret, err);
}
if (name == "SCC_98_subproof") {
subproof_297(args, ret, err);
}
if (name == "SCC_99_negation_subproof") {
subproof_298(args, ret, err);
}
if (name == "SCC_99_subproof") {
subproof_299(args, ret, err);
}
if (name == "SCC_9_negation_subproof") {
subproof_300(args, ret, err);
}
if (name == "SCC_9_subproof") {
subproof_301(args, ret, err);
}
if (name == "invent_Path_10_negation_subproof") {
subproof_302(args, ret, err);
}
if (name == "invent_Path_10_subproof") {
subproof_303(args, ret, err);
}
if (name == "invent_Path_11_negation_subproof") {
subproof_304(args, ret, err);
}
if (name == "invent_Path_11_subproof") {
subproof_305(args, ret, err);
}
if (name == "invent_Path_12_negation_subproof") {
subproof_306(args, ret, err);
}
if (name == "invent_Path_12_subproof") {
subproof_307(args, ret, err);
}
if (name == "invent_Path_13_negation_subproof") {
subproof_308(args, ret, err);
}
if (name == "invent_Path_13_subproof") {
subproof_309(args, ret, err);
}
if (name == "invent_Path_14_negation_subproof") {
subproof_310(args, ret, err);
}
if (name == "invent_Path_14_subproof") {
subproof_311(args, ret, err);
}
if (name == "invent_Path_15_negation_subproof") {
subproof_312(args, ret, err);
}
if (name == "invent_Path_15_subproof") {
subproof_313(args, ret, err);
}
if (name == "invent_Path_16_negation_subproof") {
subproof_314(args, ret, err);
}
if (name == "invent_Path_16_subproof") {
subproof_315(args, ret, err);
}
if (name == "invent_Path_17_negation_subproof") {
subproof_316(args, ret, err);
}
if (name == "invent_Path_17_subproof") {
subproof_317(args, ret, err);
}
if (name == "invent_Path_18_negation_subproof") {
subproof_318(args, ret, err);
}
if (name == "invent_Path_18_subproof") {
subproof_319(args, ret, err);
}
if (name == "invent_Path_19_negation_subproof") {
subproof_320(args, ret, err);
}
if (name == "invent_Path_19_subproof") {
subproof_321(args, ret, err);
}
if (name == "invent_Path_1_negation_subproof") {
subproof_322(args, ret, err);
}
if (name == "invent_Path_1_subproof") {
subproof_323(args, ret, err);
}
if (name == "invent_Path_20_negation_subproof") {
subproof_324(args, ret, err);
}
if (name == "invent_Path_20_subproof") {
subproof_325(args, ret, err);
}
if (name == "invent_Path_21_negation_subproof") {
subproof_326(args, ret, err);
}
if (name == "invent_Path_21_subproof") {
subproof_327(args, ret, err);
}
if (name == "invent_Path_22_negation_subproof") {
subproof_328(args, ret, err);
}
if (name == "invent_Path_22_subproof") {
subproof_329(args, ret, err);
}
if (name == "invent_Path_23_negation_subproof") {
subproof_330(args, ret, err);
}
if (name == "invent_Path_23_subproof") {
subproof_331(args, ret, err);
}
if (name == "invent_Path_24_negation_subproof") {
subproof_332(args, ret, err);
}
if (name == "invent_Path_24_subproof") {
subproof_333(args, ret, err);
}
if (name == "invent_Path_25_negation_subproof") {
subproof_334(args, ret, err);
}
if (name == "invent_Path_25_subproof") {
subproof_335(args, ret, err);
}
if (name == "invent_Path_26_negation_subproof") {
subproof_336(args, ret, err);
}
if (name == "invent_Path_26_subproof") {
subproof_337(args, ret, err);
}
if (name == "invent_Path_27_negation_subproof") {
subproof_338(args, ret, err);
}
if (name == "invent_Path_27_subproof") {
subproof_339(args, ret, err);
}
if (name == "invent_Path_28_negation_subproof") {
subproof_340(args, ret, err);
}
if (name == "invent_Path_28_subproof") {
subproof_341(args, ret, err);
}
if (name == "invent_Path_29_negation_subproof") {
subproof_342(args, ret, err);
}
if (name == "invent_Path_29_subproof") {
subproof_343(args, ret, err);
}
if (name == "invent_Path_2_negation_subproof") {
subproof_344(args, ret, err);
}
if (name == "invent_Path_2_subproof") {
subproof_345(args, ret, err);
}
if (name == "invent_Path_30_negation_subproof") {
subproof_346(args, ret, err);
}
if (name == "invent_Path_30_subproof") {
subproof_347(args, ret, err);
}
if (name == "invent_Path_31_negation_subproof") {
subproof_348(args, ret, err);
}
if (name == "invent_Path_31_subproof") {
subproof_349(args, ret, err);
}
if (name == "invent_Path_32_negation_subproof") {
subproof_350(args, ret, err);
}
if (name == "invent_Path_32_subproof") {
subproof_351(args, ret, err);
}
if (name == "invent_Path_33_negation_subproof") {
subproof_352(args, ret, err);
}
if (name == "invent_Path_33_subproof") {
subproof_353(args, ret, err);
}
if (name == "invent_Path_34_negation_subproof") {
subproof_354(args, ret, err);
}
if (name == "invent_Path_34_subproof") {
subproof_355(args, ret, err);
}
if (name == "invent_Path_35_negation_subproof") {
subproof_356(args, ret, err);
}
if (name == "invent_Path_35_subproof") {
subproof_357(args, ret, err);
}
if (name == "invent_Path_36_negation_subproof") {
subproof_358(args, ret, err);
}
if (name == "invent_Path_36_subproof") {
subproof_359(args, ret, err);
}
if (name == "invent_Path_37_negation_subproof") {
subproof_360(args, ret, err);
}
if (name == "invent_Path_37_subproof") {
subproof_361(args, ret, err);
}
if (name == "invent_Path_38_negation_subproof") {
subproof_362(args, ret, err);
}
if (name == "invent_Path_38_subproof") {
subproof_363(args, ret, err);
}
if (name == "invent_Path_39_negation_subproof") {
subproof_364(args, ret, err);
}
if (name == "invent_Path_39_subproof") {
subproof_365(args, ret, err);
}
if (name == "invent_Path_3_negation_subproof") {
subproof_366(args, ret, err);
}
if (name == "invent_Path_3_subproof") {
subproof_367(args, ret, err);
}
if (name == "invent_Path_40_negation_subproof") {
subproof_368(args, ret, err);
}
if (name == "invent_Path_40_subproof") {
subproof_369(args, ret, err);
}
if (name == "invent_Path_41_negation_subproof") {
subproof_370(args, ret, err);
}
if (name == "invent_Path_41_subproof") {
subproof_371(args, ret, err);
}
if (name == "invent_Path_42_negation_subproof") {
subproof_372(args, ret, err);
}
if (name == "invent_Path_42_subproof") {
subproof_373(args, ret, err);
}
if (name == "invent_Path_43_negation_subproof") {
subproof_374(args, ret, err);
}
if (name == "invent_Path_43_subproof") {
subproof_375(args, ret, err);
}
if (name == "invent_Path_44_negation_subproof") {
subproof_376(args, ret, err);
}
if (name == "invent_Path_44_subproof") {
subproof_377(args, ret, err);
}
if (name == "invent_Path_45_negation_subproof") {
subproof_378(args, ret, err);
}
if (name == "invent_Path_45_subproof") {
subproof_379(args, ret, err);
}
if (name == "invent_Path_46_negation_subproof") {
subproof_380(args, ret, err);
}
if (name == "invent_Path_46_subproof") {
subproof_381(args, ret, err);
}
if (name == "invent_Path_47_negation_subproof") {
subproof_382(args, ret, err);
}
if (name == "invent_Path_47_subproof") {
subproof_383(args, ret, err);
}
if (name == "invent_Path_48_negation_subproof") {
subproof_384(args, ret, err);
}
if (name == "invent_Path_48_subproof") {
subproof_385(args, ret, err);
}
if (name == "invent_Path_49_negation_subproof") {
subproof_386(args, ret, err);
}
if (name == "invent_Path_49_subproof") {
subproof_387(args, ret, err);
}
if (name == "invent_Path_4_negation_subproof") {
subproof_388(args, ret, err);
}
if (name == "invent_Path_4_subproof") {
subproof_389(args, ret, err);
}
if (name == "invent_Path_5_negation_subproof") {
subproof_390(args, ret, err);
}
if (name == "invent_Path_5_subproof") {
subproof_391(args, ret, err);
}
if (name == "invent_Path_6_negation_subproof") {
subproof_392(args, ret, err);
}
if (name == "invent_Path_6_subproof") {
subproof_393(args, ret, err);
}
if (name == "invent_Path_7_negation_subproof") {
subproof_394(args, ret, err);
}
if (name == "invent_Path_7_subproof") {
subproof_395(args, ret, err);
}
if (name == "invent_Path_8_negation_subproof") {
subproof_396(args, ret, err);
}
if (name == "invent_Path_8_subproof") {
subproof_397(args, ret, err);
}
if (name == "invent_Path_9_negation_subproof") {
subproof_398(args, ret, err);
}
if (name == "invent_Path_9_subproof") {
subproof_399(args, ret, err);
}
}
void subproof_0(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2118),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2118));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_1(Tuple<RamDomain,4>({{(args)[0],0,0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_1(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2118),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2118));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_2(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1199),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1199));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_3(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1199),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1199));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_4(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1454),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1454));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_5(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1454),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1454));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_6(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1551),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1551));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_7(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1551),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1551));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_8(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(651),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(651));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_9(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(651),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(651));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_10(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1612),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1612));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_2(Tuple<RamDomain,4>({{0,(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_11(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1612),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1612));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_12(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(811),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(811));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_13(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(811),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(811));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_14(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1625),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1625));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_15(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1625),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1625));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_16(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1579),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1579));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_17(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1579));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_18(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1779),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1779));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_19(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1779),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1779));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_20(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2089),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2089));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_21(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2089),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2089));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_22(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1947),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1947));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_23(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1947),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1947));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_24(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(988),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(988));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_1(Tuple<RamDomain,4>({{(args)[1],0,0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_25(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(988),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(988));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_26(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1131),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1131));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_27(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1131),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1131));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_28(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1293),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1293));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_29(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1293),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1293));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_30(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1407),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1407));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_31(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1407),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1407));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_32(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(714),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(714));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_33(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(714),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(714));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_34(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1011),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1011));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_35(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1011),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1011));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_36(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2064),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2064));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_37(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2064),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2064));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_38(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2156),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2156));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_39(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2156),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2156));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_40(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1471),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1471));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_41(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1471),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1471));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_42(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1891),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1891));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_43(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1891),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1891));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_44(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1752),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1752));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_45(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1752),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1752));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_46(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1479),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1479));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_47(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1479),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1479));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_48(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1602),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1602));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_49(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1602),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1602));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_50(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1379),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1379));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_51(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1379),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1379));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_52(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1662),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1662));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_1(Tuple<RamDomain,4>({{(args)[0],0,0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_53(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1662),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1662));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_54(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1462),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1462));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_55(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1462),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1462));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_56(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1200),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1200));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_57(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1200),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1200));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_58(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1244),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1244));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_59(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1244),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1244));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_60(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1082),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1082));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_61(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1082),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1082));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_62(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2114),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2114));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_63(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2114),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2114));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_64(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1442),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1442));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_65(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1442),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1442));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_66(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2129),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2129));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_67(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2129),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2129));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_68(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1879),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1879));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_69(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1879),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1879));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_70(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1098),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1098));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_71(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1098),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1098));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_72(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1926),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1926));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_73(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1926),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1926));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_74(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1841),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1841));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_75(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1841),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1841));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_76(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(983),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(983));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_77(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(983),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(983));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_78(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2124),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2124));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_2(Tuple<RamDomain,4>({{0,(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_79(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2124),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2124));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_80(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1522),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1522));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_81(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1522),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1522));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_82(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1626),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1626));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_83(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1626),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1626));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_84(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1698),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1698));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_85(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1698),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1698));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_86(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1123),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1123));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_87(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1123),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1123));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_88(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1890),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1890));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_89(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1890),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1890));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_90(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2147),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2147));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_91(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2147),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2147));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_92(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2100),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2100));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_93(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2100),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2100));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_94(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(880),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(880));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_95(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(880),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(880));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_96(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1577),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1577));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_97(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1577),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1577));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_98(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1096),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1096));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_99(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1096),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1096));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_100(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1567),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1567));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_101(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1567),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1567));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_102(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1449),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1449));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_103(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1449),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1449));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_104(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1688),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1688));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_105(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1688),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1688));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_106(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1297),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1297));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_107(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1297),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1297));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_108(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1386),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1386));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_109(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1386),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1386));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_110(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(897),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(897));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_2(Tuple<RamDomain,4>({{0,(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_111(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(897),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(897));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_112(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1878),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1878));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_113(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1878),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1878));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_114(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1886),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1886));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_115(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1886),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1886));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_116(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1916),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1916));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_117(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1916),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1916));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_118(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1887),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1887));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_119(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1887),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1887));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_120(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1330),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1330));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_121(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1330),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1330));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_122(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1325),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1325));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_123(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1325),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1325));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_124(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1381),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1381));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_125(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1381),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1381));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_126(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2217),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2217));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_2(Tuple<RamDomain,4>({{0,(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_127(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2217),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2217));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_128(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1452),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1452));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_129(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1452),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1452));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_130(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1568),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1568));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_131(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1568),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1568));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_132(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1299),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1299));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_133(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1299),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1299));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_134(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1789),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1789));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_135(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1789),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1789));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_136(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1269),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1269));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_137(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1269),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1269));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_138(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(814),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(814));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_139(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(814),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(814));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_140(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1677),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1677));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_141(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1677),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1677));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_142(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1153),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1153));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_143(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1153),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1153));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_144(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1847),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1847));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_145(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1847),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1847));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_146(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1599),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1599));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_147(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1599),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1599));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_148(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(903),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(903));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_149(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(903),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(903));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_150(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2241),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2241));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_151(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2241),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2241));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_152(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(952),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(952));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_153(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(952),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(952));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_154(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1727),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1727));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_155(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1727),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1727));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_156(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1541),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1541));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_157(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1541),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1541));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_158(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1505),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1505));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_159(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1505),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1505));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_160(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2024),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2024));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_161(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2024),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2024));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_162(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(749),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(749));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_163(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(749),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(749));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_164(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1851),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1851));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_165(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1851),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1851));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_166(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(877),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(877));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_167(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(877),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(877));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_168(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(864),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(864));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_169(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(864),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(864));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_170(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1793),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1793));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_171(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1793),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1793));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_172(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(727),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(727));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_173(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(727),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(727));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_174(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2028),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2028));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_175(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2028),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2028));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_176(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1596),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1596));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_177(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1596),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1596));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_178(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1122),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1122));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_179(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1122),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1122));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_180(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1288),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1288));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_181(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1288),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1288));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_182(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1849),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1849));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_183(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1849),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1849));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_184(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1046),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1046));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_185(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1046),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1046));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_186(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2228),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2228));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_187(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2228),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2228));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_188(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1683),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1683));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_189(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1683),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1683));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_190(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(904),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(904));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_191(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(904),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(904));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_192(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2012),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2012));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_193(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2012),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2012));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_194(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(862),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(862));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_195(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(862),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(862));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_196(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1040),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1040));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_197(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1040),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1040));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_198(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(963),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(963));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_199(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(963),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(963));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_200(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(910),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(910));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_201(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(910),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(910));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_202(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1073),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1073));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_203(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1073),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1073));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_204(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2067),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2067));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_205(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2067),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2067));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_206(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(686),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(686));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_207(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(686),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(686));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_208(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2103),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2103));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_209(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2103),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2103));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_210(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1968),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1968));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_211(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1968),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1968));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_212(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1702),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1702));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_213(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1702),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1702));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_214(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1520),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1520));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_215(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1520),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1520));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_216(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(967),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(967));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_217(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(967),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(967));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_218(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2059),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2059));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_219(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2059),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2059));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_220(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1037),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1037));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_221(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1037),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1037));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_222(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(956),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(956));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_223(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(956),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(956));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_224(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1283),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1283));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_225(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1283),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1283));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_226(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1099),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1099));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_227(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1099),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1099));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_228(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1639),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1639));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_229(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1639),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1639));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_230(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1531),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1531));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_231(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1531),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1531));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_232(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2068),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2068));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_2(Tuple<RamDomain,4>({{0,(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_233(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2068),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2068));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_234(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1997),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1997));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_235(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1997),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1997));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_236(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2237),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2237));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_237(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2237),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2237));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_238(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(837),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(837));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_1(Tuple<RamDomain,4>({{(args)[1],0,0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_239(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(837),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(837));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_240(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1351),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1351));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_241(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1351),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1351));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_242(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(665),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(665));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_243(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(665),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(665));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_244(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1802),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1802));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_1(Tuple<RamDomain,4>({{(args)[0],0,0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_245(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1802),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1802));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_246(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(692),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(692));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_247(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(692),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(692));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_248(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2009),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2009));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_249(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2009),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2009));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_250(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2155),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2155));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_251(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2155),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2155));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_252(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1980),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1980));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_253(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1980),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1980));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_254(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1409),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1409));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_255(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1409),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1409));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_256(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1954),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1954));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_257(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1954),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1954));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_258(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(820),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(820));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_259(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(820),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(820));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_260(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(778),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(778));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_261(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(778),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(778));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_262(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1340),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1340));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_263(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1340),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1340));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_264(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1573),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1573));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_265(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1573),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1573));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_266(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(742),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(742));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_267(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(742),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(742));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_268(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(725),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(725));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_269(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(725),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_6_SCC->equalRange_1(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(725));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_270(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2098),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2098));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_271(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2098),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2098));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_272(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(748),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(748));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_273(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(748),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(748));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_274(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(743),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(743));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_2(Tuple<RamDomain,4>({{0,(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_275(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(743),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(743));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_276(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1985),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1985));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_277(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1985),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1985));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_278(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(852),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(852));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_2(Tuple<RamDomain,4>({{0,(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_279(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(852),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(852));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_280(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1387),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1387));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_281(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1387),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1387));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_282(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1543),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1543));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_283(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1543),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1543));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_284(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2008),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2008));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_285(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2008),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2008));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_286(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1869),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1869));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_287(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1869),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1869));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_288(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1803),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1803));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_289(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1803),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1803));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_290(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1896),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1896));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_291(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1896),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1896));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_292(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(948),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(948));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_293(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(948),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(948));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_294(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1350),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1350));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_295(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1350),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1350));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_296(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2052),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2052));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_297(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2052),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2052));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_298(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2230),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2230));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
if(!rel_6_SCC->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_6_SCC_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_299(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_6_SCC->empty())))) && (!(rel_6_SCC->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_6_SCC_op_ctxt,rel_6_SCC->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2230),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_6_SCC->equalRange_2(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_6_SCC->equalRange_3(key,READ_OP_CONTEXT(rel_6_SCC_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2230));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_300(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(783),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(783));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_301(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(783),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(783));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_302(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(563),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(563));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_303(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(563),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(563));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_304(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(368),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(368));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_305(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(368),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(368));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_306(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_307(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_308(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(99),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(99));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_309(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(99),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(99));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_310(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(209),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(209));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_2(Tuple<RamDomain,4>({{0,(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_311(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(209),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(209));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_312(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(579),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(579));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_313(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(579),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(579));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_314(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(118),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(118));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_315(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(118),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(118));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_316(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(23),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(23));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_317(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(23));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_318(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(247),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(247));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_319(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(247),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(247));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_320(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(219),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(219));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_321(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(219),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(219));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_322(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(508),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(508));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_1(Tuple<RamDomain,4>({{(args)[0],0,0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_323(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(508),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(508));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_324(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(523),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(523));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_1(Tuple<RamDomain,4>({{(args)[0],0,0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
return;
}
void subproof_325(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(523),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(523));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_326(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_327(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_328(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(555),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(555));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_329(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(555),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(555));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_330(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(574),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(574));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_331(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(574),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(574));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_332(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(105),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(105));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_333(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(105),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(105));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_334(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(302),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(302));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_1(Tuple<RamDomain,4>({{(args)[1],0,0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_335(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(302),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(302));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_336(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(230),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(230));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_337(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(230),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(230));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_338(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(546),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(546));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_339(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(546),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(546));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_340(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(434),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(434));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_341(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(434),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(434));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_342(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(66),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(66));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_343(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(66));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_344(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(455),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(455));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_345(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(455),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(455));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_346(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(130),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(130));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_347(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(130),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(130));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_348(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(0),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(0));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_349(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_350(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_351(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_352(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(307),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(307));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_1(Tuple<RamDomain,4>({{(args)[1],0,0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_353(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(307),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(307));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_354(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_355(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_356(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(507),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(507));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_2(Tuple<RamDomain,4>({{0,(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_357(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(507),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(507));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_358(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(645),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(645));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_359(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(645),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(645));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_360(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(636),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(636));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_361(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(636),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(636));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_362(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(167),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(167));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_363(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(167),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(167));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_364(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(433),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(433));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_365(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(433),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(433));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_366(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(503),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(503));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_367(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(503),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(503));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_368(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(148),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(148));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_1(Tuple<RamDomain,4>({{(args)[1],0,0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
return;
}
void subproof_369(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(148),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(148));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_370(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(375),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(375));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_371(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(375),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(375));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_372(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(268),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(268));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_373(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(268),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(268));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_374(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(296),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(296));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_375(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(296),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(296));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_376(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(392),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(392));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_377(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(392),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(392));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_378(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(299),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(299));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_379(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(299),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(299));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_380(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(527),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(527));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_381(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(527),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(527));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env3[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_382(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(377),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(377));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_383(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(377),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(377));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_384(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(107),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(107));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_385(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(107),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_2(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(107));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_386(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(557),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(557));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_387(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(557),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(557));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_388(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(496),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(496));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_389(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(496),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(496));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_390(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(117),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(117));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_391(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
const Tuple<RamDomain,3> key({{RamDomain(117),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env2[1],env1[1],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(117));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_392(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(604),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(604));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_1(Tuple<RamDomain,4>({{(args)[1],0,0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(0);
err.push_back(true);
}
return;
}
void subproof_393(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(604),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_3_invent_Path->equalRange_1(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(604));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_394(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(322),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(322));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_395(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_1_Edge->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(322),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_1_Edge->equalRange_3(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(322));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env3[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_396(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(544),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(544));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_397(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(544),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{0,env1[0],0,0}});
auto range = rel_3_invent_Path->equalRange_2(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[1],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(544));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
void subproof_398(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
if(!rel_2_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(380),0,0}}),READ_OP_CONTEXT(rel_2_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(380));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
if(!rel_1_Edge->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_1_Edge_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
if(!rel_3_invent_Path->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_399(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((((!(rel_2_Rule->empty())) && (!(rel_1_Edge->empty())))) && (!(rel_3_invent_Path->empty())))) && (!(rel_3_invent_Path->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_Rule_op_ctxt,rel_2_Rule->createContext());
CREATE_OP_CONTEXT(rel_1_Edge_op_ctxt,rel_1_Edge->createContext());
CREATE_OP_CONTEXT(rel_3_invent_Path_op_ctxt,rel_3_invent_Path->createContext());
const Tuple<RamDomain,3> key({{RamDomain(380),0,0}});
auto range = rel_2_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_2_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[1],0,0,0}});
auto range = rel_1_Edge->equalRange_1(key,READ_OP_CONTEXT(rel_1_Edge_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[2]))) {
const Tuple<RamDomain,4> key({{env1[0],env2[0],0,0}});
auto range = rel_3_invent_Path->equalRange_3(key,READ_OP_CONTEXT(rel_3_invent_Path_op_ctxt));
for(const auto& env3 : range) {
if( ((env3[3]) < ((args)[2]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(380));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env3[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env3[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
}
}
}
}
}
}
}
}
}
return;
}
};
SouffleProgram *newInstance_souffle_small(){return new Sf_souffle_small;}
SymbolTable *getST_souffle_small(SouffleProgram *p){return &reinterpret_cast<Sf_souffle_small*>(p)->symTable;}

#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_souffle_small: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_souffle_small();
};
public:
factory_Sf_souffle_small() : ProgramFactory("souffle_small"){}
};
static factory_Sf_souffle_small __factory_Sf_souffle_small_instance;
}
#else
}
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(rules.small.dl)",
R"(.)",
R"(.)",
false,
R"()",
1,
-1);
if (!opt.parse(argc,argv)) return 1;
#if defined(_OPENMP) 
omp_set_nested(true);

#endif
souffle::Sf_souffle_small obj;
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir(), opt.getStratumIndex());
explain(obj, false);
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}

#endif
