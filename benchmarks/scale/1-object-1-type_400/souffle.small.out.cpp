
#include "souffle/CompiledSouffle.h"
#include <mutex>
#include "souffle/Explain.h"

extern "C" {
}

namespace souffle {
using namespace ram;
struct t_btree_3__0_1_2__1__7 {
using t_tuple = Tuple<RamDomain, 3>;
struct updater_t_btree_3__0_1_2__1__7 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[1] = new_t[1];
old_t[2] = new_t[2];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0>, updater_t_btree_3__0_1_2__1__7>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[3];
std::copy(ramDomain, ramDomain + 3, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2) {
RamDomain data[3] = {a0,a1,a2};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_3__0_1_2__1__7& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 3 direct b-tree index [0,1,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<1,2,0,4,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,0>, updater_t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<0,1,2,4,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2>, updater_t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31>;
t_ind_1 ind_1;
using t_ind_2 = btree_set<t_tuple, index_utils::comparator<0,2,1,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,2,1>, updater_t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31>;
t_ind_2 ind_2;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
t_ind_2::operation_hints hints_2;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
ind_2.insert(t, h.hints_2);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
ind_2.insertAll(other.ind_2);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_1::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_2::iterator> equalRange_5(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_2.lower_bound(low, h.hints_2), ind_2.upper_bound(high, h.hints_2));
}
range<t_ind_2::iterator> equalRange_5(const t_tuple& t) const {
context h;
return equalRange_5(t, h);
}
range<t_ind_0::iterator> equalRange_6(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_6(const t_tuple& t) const {
context h;
return equalRange_6(t, h);
}
range<t_ind_1::iterator> equalRange_7(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
range<t_ind_2::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_2.find(t, h.hints_2);
auto fin = ind_2.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_2::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [1,2,0,4,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,4,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
const auto& stats_2 = ind_2.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,2,1,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_2.inserts.getHits() << "/" << stats_2.inserts.getMisses() << "/" << stats_2.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_2.contains.getHits() << "/" << stats_2.contains.getMisses() << "/" << stats_2.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_2.lower_bound.getHits() << "/" << stats_2.lower_bound.getMisses() << "/" << stats_2.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_2.upper_bound.getHits() << "/" << stats_2.upper_bound.getMisses() << "/" << stats_2.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255 {
using t_tuple = Tuple<RamDomain, 8>;
struct updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[6] = new_t[6];
old_t[7] = new_t[7];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<2,3,5,0,1,4,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<2,3,5,0,1,4>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,2,5,3,0,4,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,5,3,0,4>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_1 ind_1;
using t_ind_2 = btree_set<t_tuple, index_utils::comparator<0,2,5,1,3,4,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,2,5,1,3,4>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_2 ind_2;
using t_ind_3 = btree_set<t_tuple, index_utils::comparator<0,1,4,5,2,3,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,4,5,2,3>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_3 ind_3;
using t_ind_4 = btree_set<t_tuple, index_utils::comparator<0,2,4,5,1,3,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,2,4,5,1,3>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_4 ind_4;
using t_ind_5 = btree_set<t_tuple, index_utils::comparator<1,2,4,5,0,3,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,4,5,0,3>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_5 ind_5;
using t_ind_6 = btree_set<t_tuple, index_utils::comparator<0,1,4,2,5,3,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,4,2,5,3>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_6 ind_6;
using t_ind_7 = btree_set<t_tuple, index_utils::comparator<0,3,4,5,1,2,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,3,4,5,1,2>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_7 ind_7;
using t_ind_8 = btree_set<t_tuple, index_utils::comparator<1,3,4,5,0,2,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,3,4,5,0,2>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_8 ind_8;
using t_ind_9 = btree_set<t_tuple, index_utils::comparator<0,1,3,4,5,2,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,3,4,5,2>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_9 ind_9;
using t_ind_10 = btree_set<t_tuple, index_utils::comparator<2,3,4,5,0,1,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<2,3,4,5,0,1>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_10 ind_10;
using t_ind_11 = btree_set<t_tuple, index_utils::comparator<0,2,3,4,5,1,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,2,3,4,5,1>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_11 ind_11;
using t_ind_12 = btree_set<t_tuple, index_utils::comparator<1,2,4,3,5,0,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,4,3,5,0>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_12 ind_12;
using t_ind_13 = btree_set<t_tuple, index_utils::comparator<1,2,0,3,4,5,7,6>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,0,3,4,5>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_13 ind_13;
using t_ind_14 = btree_set<t_tuple, index_utils::comparator<0,1,3,5,2,4,6,7>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,3,5,2,4>, updater_t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>;
t_ind_14 ind_14;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
t_ind_2::operation_hints hints_2;
t_ind_3::operation_hints hints_3;
t_ind_4::operation_hints hints_4;
t_ind_5::operation_hints hints_5;
t_ind_6::operation_hints hints_6;
t_ind_7::operation_hints hints_7;
t_ind_8::operation_hints hints_8;
t_ind_9::operation_hints hints_9;
t_ind_10::operation_hints hints_10;
t_ind_11::operation_hints hints_11;
t_ind_12::operation_hints hints_12;
t_ind_13::operation_hints hints_13;
t_ind_14::operation_hints hints_14;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
ind_2.insert(t, h.hints_2);
ind_3.insert(t, h.hints_3);
ind_4.insert(t, h.hints_4);
ind_5.insert(t, h.hints_5);
ind_6.insert(t, h.hints_6);
ind_7.insert(t, h.hints_7);
ind_8.insert(t, h.hints_8);
ind_9.insert(t, h.hints_9);
ind_10.insert(t, h.hints_10);
ind_11.insert(t, h.hints_11);
ind_12.insert(t, h.hints_12);
ind_13.insert(t, h.hints_13);
ind_14.insert(t, h.hints_14);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[8];
std::copy(ramDomain, ramDomain + 8, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5,RamDomain a6,RamDomain a7) {
RamDomain data[8] = {a0,a1,a2,a3,a4,a5,a6,a7};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
ind_2.insertAll(other.ind_2);
ind_3.insertAll(other.ind_3);
ind_4.insertAll(other.ind_4);
ind_5.insertAll(other.ind_5);
ind_6.insertAll(other.ind_6);
ind_7.insertAll(other.ind_7);
ind_8.insertAll(other.ind_8);
ind_9.insertAll(other.ind_9);
ind_10.insertAll(other.ind_10);
ind_11.insertAll(other.ind_11);
ind_12.insertAll(other.ind_12);
ind_13.insertAll(other.ind_13);
ind_14.insertAll(other.ind_14);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_13::iterator> equalRange_6(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_13.lower_bound(low, h.hints_13), ind_13.upper_bound(high, h.hints_13));
}
range<t_ind_13::iterator> equalRange_6(const t_tuple& t) const {
context h;
return equalRange_6(t, h);
}
range<t_ind_13::iterator> equalRange_7(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_13.lower_bound(low, h.hints_13), ind_13.upper_bound(high, h.hints_13));
}
range<t_ind_13::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
range<t_ind_9::iterator> equalRange_11(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_9.lower_bound(low, h.hints_9), ind_9.upper_bound(high, h.hints_9));
}
range<t_ind_9::iterator> equalRange_11(const t_tuple& t) const {
context h;
return equalRange_11(t, h);
}
range<t_ind_11::iterator> equalRange_13(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_11.lower_bound(low, h.hints_11), ind_11.upper_bound(high, h.hints_11));
}
range<t_ind_11::iterator> equalRange_13(const t_tuple& t) const {
context h;
return equalRange_13(t, h);
}
range<t_ind_13::iterator> equalRange_15(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_13.lower_bound(low, h.hints_13), ind_13.upper_bound(high, h.hints_13));
}
range<t_ind_13::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
range<t_ind_6::iterator> equalRange_19(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_6.lower_bound(low, h.hints_6), ind_6.upper_bound(high, h.hints_6));
}
range<t_ind_6::iterator> equalRange_19(const t_tuple& t) const {
context h;
return equalRange_19(t, h);
}
range<t_ind_4::iterator> equalRange_21(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_4.lower_bound(low, h.hints_4), ind_4.upper_bound(high, h.hints_4));
}
range<t_ind_4::iterator> equalRange_21(const t_tuple& t) const {
context h;
return equalRange_21(t, h);
}
range<t_ind_12::iterator> equalRange_22(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_12.lower_bound(low, h.hints_12), ind_12.upper_bound(high, h.hints_12));
}
range<t_ind_12::iterator> equalRange_22(const t_tuple& t) const {
context h;
return equalRange_22(t, h);
}
range<t_ind_6::iterator> equalRange_23(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_6.lower_bound(low, h.hints_6), ind_6.upper_bound(high, h.hints_6));
}
range<t_ind_6::iterator> equalRange_23(const t_tuple& t) const {
context h;
return equalRange_23(t, h);
}
range<t_ind_7::iterator> equalRange_25(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_7.lower_bound(low, h.hints_7), ind_7.upper_bound(high, h.hints_7));
}
range<t_ind_7::iterator> equalRange_25(const t_tuple& t) const {
context h;
return equalRange_25(t, h);
}
range<t_ind_8::iterator> equalRange_26(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_8.lower_bound(low, h.hints_8), ind_8.upper_bound(high, h.hints_8));
}
range<t_ind_8::iterator> equalRange_26(const t_tuple& t) const {
context h;
return equalRange_26(t, h);
}
range<t_ind_9::iterator> equalRange_27(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_9.lower_bound(low, h.hints_9), ind_9.upper_bound(high, h.hints_9));
}
range<t_ind_9::iterator> equalRange_27(const t_tuple& t) const {
context h;
return equalRange_27(t, h);
}
range<t_ind_11::iterator> equalRange_29(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_11.lower_bound(low, h.hints_11), ind_11.upper_bound(high, h.hints_11));
}
range<t_ind_11::iterator> equalRange_29(const t_tuple& t) const {
context h;
return equalRange_29(t, h);
}
range<t_ind_12::iterator> equalRange_30(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_12.lower_bound(low, h.hints_12), ind_12.upper_bound(high, h.hints_12));
}
range<t_ind_12::iterator> equalRange_30(const t_tuple& t) const {
context h;
return equalRange_30(t, h);
}
range<t_ind_13::iterator> equalRange_31(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[5] = MIN_RAM_DOMAIN;
high[5] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_13.lower_bound(low, h.hints_13), ind_13.upper_bound(high, h.hints_13));
}
range<t_ind_13::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
range<t_ind_2::iterator> equalRange_37(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_2.lower_bound(low, h.hints_2), ind_2.upper_bound(high, h.hints_2));
}
range<t_ind_2::iterator> equalRange_37(const t_tuple& t) const {
context h;
return equalRange_37(t, h);
}
range<t_ind_1::iterator> equalRange_38(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_38(const t_tuple& t) const {
context h;
return equalRange_38(t, h);
}
range<t_ind_2::iterator> equalRange_39(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_2.lower_bound(low, h.hints_2), ind_2.upper_bound(high, h.hints_2));
}
range<t_ind_2::iterator> equalRange_39(const t_tuple& t) const {
context h;
return equalRange_39(t, h);
}
range<t_ind_14::iterator> equalRange_43(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_14.lower_bound(low, h.hints_14), ind_14.upper_bound(high, h.hints_14));
}
range<t_ind_14::iterator> equalRange_43(const t_tuple& t) const {
context h;
return equalRange_43(t, h);
}
range<t_ind_0::iterator> equalRange_44(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_44(const t_tuple& t) const {
context h;
return equalRange_44(t, h);
}
range<t_ind_0::iterator> equalRange_45(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_45(const t_tuple& t) const {
context h;
return equalRange_45(t, h);
}
range<t_ind_1::iterator> equalRange_46(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_46(const t_tuple& t) const {
context h;
return equalRange_46(t, h);
}
range<t_ind_2::iterator> equalRange_47(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_2.lower_bound(low, h.hints_2), ind_2.upper_bound(high, h.hints_2));
}
range<t_ind_2::iterator> equalRange_47(const t_tuple& t) const {
context h;
return equalRange_47(t, h);
}
range<t_ind_3::iterator> equalRange_51(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_3.lower_bound(low, h.hints_3), ind_3.upper_bound(high, h.hints_3));
}
range<t_ind_3::iterator> equalRange_51(const t_tuple& t) const {
context h;
return equalRange_51(t, h);
}
range<t_ind_4::iterator> equalRange_53(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_4.lower_bound(low, h.hints_4), ind_4.upper_bound(high, h.hints_4));
}
range<t_ind_4::iterator> equalRange_53(const t_tuple& t) const {
context h;
return equalRange_53(t, h);
}
range<t_ind_5::iterator> equalRange_54(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_5.lower_bound(low, h.hints_5), ind_5.upper_bound(high, h.hints_5));
}
range<t_ind_5::iterator> equalRange_54(const t_tuple& t) const {
context h;
return equalRange_54(t, h);
}
range<t_ind_6::iterator> equalRange_55(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_6.lower_bound(low, h.hints_6), ind_6.upper_bound(high, h.hints_6));
}
range<t_ind_6::iterator> equalRange_55(const t_tuple& t) const {
context h;
return equalRange_55(t, h);
}
range<t_ind_7::iterator> equalRange_57(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_7.lower_bound(low, h.hints_7), ind_7.upper_bound(high, h.hints_7));
}
range<t_ind_7::iterator> equalRange_57(const t_tuple& t) const {
context h;
return equalRange_57(t, h);
}
range<t_ind_8::iterator> equalRange_58(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_8.lower_bound(low, h.hints_8), ind_8.upper_bound(high, h.hints_8));
}
range<t_ind_8::iterator> equalRange_58(const t_tuple& t) const {
context h;
return equalRange_58(t, h);
}
range<t_ind_9::iterator> equalRange_59(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_9.lower_bound(low, h.hints_9), ind_9.upper_bound(high, h.hints_9));
}
range<t_ind_9::iterator> equalRange_59(const t_tuple& t) const {
context h;
return equalRange_59(t, h);
}
range<t_ind_10::iterator> equalRange_60(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_10.lower_bound(low, h.hints_10), ind_10.upper_bound(high, h.hints_10));
}
range<t_ind_10::iterator> equalRange_60(const t_tuple& t) const {
context h;
return equalRange_60(t, h);
}
range<t_ind_11::iterator> equalRange_61(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_11.lower_bound(low, h.hints_11), ind_11.upper_bound(high, h.hints_11));
}
range<t_ind_11::iterator> equalRange_61(const t_tuple& t) const {
context h;
return equalRange_61(t, h);
}
range<t_ind_12::iterator> equalRange_62(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_12.lower_bound(low, h.hints_12), ind_12.upper_bound(high, h.hints_12));
}
range<t_ind_12::iterator> equalRange_62(const t_tuple& t) const {
context h;
return equalRange_62(t, h);
}
range<t_ind_13::iterator> equalRange_63(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[6] = MIN_RAM_DOMAIN;
high[6] = MAX_RAM_DOMAIN;
low[7] = MIN_RAM_DOMAIN;
high[7] = MAX_RAM_DOMAIN;
return make_range(ind_13.lower_bound(low, h.hints_13), ind_13.upper_bound(high, h.hints_13));
}
range<t_ind_13::iterator> equalRange_63(const t_tuple& t) const {
context h;
return equalRange_63(t, h);
}
range<t_ind_14::iterator> equalRange_255(const t_tuple& t, context& h) const {
auto pos = ind_14.find(t, h.hints_14);
auto fin = ind_14.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_14::iterator> equalRange_255(const t_tuple& t) const {
context h;
return equalRange_255(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
ind_3.clear();
ind_4.clear();
ind_5.clear();
ind_6.clear();
ind_7.clear();
ind_8.clear();
ind_9.clear();
ind_10.clear();
ind_11.clear();
ind_12.clear();
ind_13.clear();
ind_14.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [2,3,5,0,1,4,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [1,2,5,3,0,4,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
const auto& stats_2 = ind_2.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,2,5,1,3,4,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_2.inserts.getHits() << "/" << stats_2.inserts.getMisses() << "/" << stats_2.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_2.contains.getHits() << "/" << stats_2.contains.getMisses() << "/" << stats_2.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_2.lower_bound.getHits() << "/" << stats_2.lower_bound.getMisses() << "/" << stats_2.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_2.upper_bound.getHits() << "/" << stats_2.upper_bound.getMisses() << "/" << stats_2.upper_bound.getAccesses() << "\n";
const auto& stats_3 = ind_3.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,1,4,5,2,3,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_3.inserts.getHits() << "/" << stats_3.inserts.getMisses() << "/" << stats_3.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_3.contains.getHits() << "/" << stats_3.contains.getMisses() << "/" << stats_3.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_3.lower_bound.getHits() << "/" << stats_3.lower_bound.getMisses() << "/" << stats_3.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_3.upper_bound.getHits() << "/" << stats_3.upper_bound.getMisses() << "/" << stats_3.upper_bound.getAccesses() << "\n";
const auto& stats_4 = ind_4.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,2,4,5,1,3,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_4.inserts.getHits() << "/" << stats_4.inserts.getMisses() << "/" << stats_4.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_4.contains.getHits() << "/" << stats_4.contains.getMisses() << "/" << stats_4.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_4.lower_bound.getHits() << "/" << stats_4.lower_bound.getMisses() << "/" << stats_4.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_4.upper_bound.getHits() << "/" << stats_4.upper_bound.getMisses() << "/" << stats_4.upper_bound.getAccesses() << "\n";
const auto& stats_5 = ind_5.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [1,2,4,5,0,3,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_5.inserts.getHits() << "/" << stats_5.inserts.getMisses() << "/" << stats_5.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_5.contains.getHits() << "/" << stats_5.contains.getMisses() << "/" << stats_5.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_5.lower_bound.getHits() << "/" << stats_5.lower_bound.getMisses() << "/" << stats_5.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_5.upper_bound.getHits() << "/" << stats_5.upper_bound.getMisses() << "/" << stats_5.upper_bound.getAccesses() << "\n";
const auto& stats_6 = ind_6.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,1,4,2,5,3,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_6.inserts.getHits() << "/" << stats_6.inserts.getMisses() << "/" << stats_6.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_6.contains.getHits() << "/" << stats_6.contains.getMisses() << "/" << stats_6.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_6.lower_bound.getHits() << "/" << stats_6.lower_bound.getMisses() << "/" << stats_6.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_6.upper_bound.getHits() << "/" << stats_6.upper_bound.getMisses() << "/" << stats_6.upper_bound.getAccesses() << "\n";
const auto& stats_7 = ind_7.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,3,4,5,1,2,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_7.inserts.getHits() << "/" << stats_7.inserts.getMisses() << "/" << stats_7.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_7.contains.getHits() << "/" << stats_7.contains.getMisses() << "/" << stats_7.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_7.lower_bound.getHits() << "/" << stats_7.lower_bound.getMisses() << "/" << stats_7.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_7.upper_bound.getHits() << "/" << stats_7.upper_bound.getMisses() << "/" << stats_7.upper_bound.getAccesses() << "\n";
const auto& stats_8 = ind_8.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [1,3,4,5,0,2,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_8.inserts.getHits() << "/" << stats_8.inserts.getMisses() << "/" << stats_8.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_8.contains.getHits() << "/" << stats_8.contains.getMisses() << "/" << stats_8.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_8.lower_bound.getHits() << "/" << stats_8.lower_bound.getMisses() << "/" << stats_8.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_8.upper_bound.getHits() << "/" << stats_8.upper_bound.getMisses() << "/" << stats_8.upper_bound.getAccesses() << "\n";
const auto& stats_9 = ind_9.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,1,3,4,5,2,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_9.inserts.getHits() << "/" << stats_9.inserts.getMisses() << "/" << stats_9.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_9.contains.getHits() << "/" << stats_9.contains.getMisses() << "/" << stats_9.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_9.lower_bound.getHits() << "/" << stats_9.lower_bound.getMisses() << "/" << stats_9.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_9.upper_bound.getHits() << "/" << stats_9.upper_bound.getMisses() << "/" << stats_9.upper_bound.getAccesses() << "\n";
const auto& stats_10 = ind_10.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [2,3,4,5,0,1,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_10.inserts.getHits() << "/" << stats_10.inserts.getMisses() << "/" << stats_10.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_10.contains.getHits() << "/" << stats_10.contains.getMisses() << "/" << stats_10.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_10.lower_bound.getHits() << "/" << stats_10.lower_bound.getMisses() << "/" << stats_10.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_10.upper_bound.getHits() << "/" << stats_10.upper_bound.getMisses() << "/" << stats_10.upper_bound.getAccesses() << "\n";
const auto& stats_11 = ind_11.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,2,3,4,5,1,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_11.inserts.getHits() << "/" << stats_11.inserts.getMisses() << "/" << stats_11.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_11.contains.getHits() << "/" << stats_11.contains.getMisses() << "/" << stats_11.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_11.lower_bound.getHits() << "/" << stats_11.lower_bound.getMisses() << "/" << stats_11.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_11.upper_bound.getHits() << "/" << stats_11.upper_bound.getMisses() << "/" << stats_11.upper_bound.getAccesses() << "\n";
const auto& stats_12 = ind_12.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [1,2,4,3,5,0,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_12.inserts.getHits() << "/" << stats_12.inserts.getMisses() << "/" << stats_12.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_12.contains.getHits() << "/" << stats_12.contains.getMisses() << "/" << stats_12.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_12.lower_bound.getHits() << "/" << stats_12.lower_bound.getMisses() << "/" << stats_12.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_12.upper_bound.getHits() << "/" << stats_12.upper_bound.getMisses() << "/" << stats_12.upper_bound.getAccesses() << "\n";
const auto& stats_13 = ind_13.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [1,2,0,3,4,5,7,6]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_13.inserts.getHits() << "/" << stats_13.inserts.getMisses() << "/" << stats_13.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_13.contains.getHits() << "/" << stats_13.contains.getMisses() << "/" << stats_13.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_13.lower_bound.getHits() << "/" << stats_13.lower_bound.getMisses() << "/" << stats_13.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_13.upper_bound.getHits() << "/" << stats_13.upper_bound.getMisses() << "/" << stats_13.upper_bound.getAccesses() << "\n";
const auto& stats_14 = ind_14.getHintStatistics();
o << prefix << "arity 8 direct b-tree index [0,1,3,5,2,4,6,7]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_14.inserts.getHits() << "/" << stats_14.inserts.getMisses() << "/" << stats_14.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_14.contains.getHits() << "/" << stats_14.contains.getMisses() << "/" << stats_14.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_14.lower_bound.getHits() << "/" << stats_14.lower_bound.getMisses() << "/" << stats_14.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_14.upper_bound.getHits() << "/" << stats_14.upper_bound.getMisses() << "/" << stats_14.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_4__0_1_2_3__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__0_1_2_3__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1>, updater_t_btree_4__0_1_2_3__3__15>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__0_1_2_3__3__15& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_0::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [0,1,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<1,2,0,4,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,0>, updater_t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,0,2,4,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,0,2>, updater_t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31>;
t_ind_1 ind_1;
using t_ind_2 = btree_set<t_tuple, index_utils::comparator<0,2,1,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,2,1>, updater_t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31>;
t_ind_2 ind_2;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
t_ind_2::operation_hints hints_2;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
ind_2.insert(t, h.hints_2);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
ind_2.insertAll(other.ind_2);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t) const {
context h;
return equalRange_2(t, h);
}
range<t_ind_1::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_2::iterator> equalRange_5(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_2.lower_bound(low, h.hints_2), ind_2.upper_bound(high, h.hints_2));
}
range<t_ind_2::iterator> equalRange_5(const t_tuple& t) const {
context h;
return equalRange_5(t, h);
}
range<t_ind_0::iterator> equalRange_6(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_6(const t_tuple& t) const {
context h;
return equalRange_6(t, h);
}
range<t_ind_1::iterator> equalRange_7(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
range<t_ind_2::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_2.find(t, h.hints_2);
auto fin = ind_2.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_2::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
ind_2.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [1,2,0,4,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [1,0,2,4,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
const auto& stats_2 = ind_2.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,2,1,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_2.inserts.getHits() << "/" << stats_2.inserts.getMisses() << "/" << stats_2.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_2.contains.getHits() << "/" << stats_2.contains.getMisses() << "/" << stats_2.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_2.lower_bound.getHits() << "/" << stats_2.lower_bound.getMisses() << "/" << stats_2.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_2.upper_bound.getHits() << "/" << stats_2.upper_bound.getMisses() << "/" << stats_2.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_3_4__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__0_1_2_3_4__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2>, updater_t_btree_5__0_1_2_3_4__31>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_3_4__31& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_4__0_1_2_3__1__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__0_1_2_3__1__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1>, updater_t_btree_4__0_1_2_3__1__3__15>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__0_1_2_3__1__3__15& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_0::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [0,1,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,4,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2>, updater_t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,2,0,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,2,0>, updater_t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_1::iterator> equalRange_6(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_6(const t_tuple& t) const {
context h;
return equalRange_6(t, h);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
range<t_ind_1::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_1.find(t, h.hints_1);
auto fin = ind_1.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_1::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,4,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [1,2,0,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_4__1_0_2_3__2__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__1_0_2_3__2__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<1,0,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,0>, updater_t_btree_4__1_0_2_3__2__3__15>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__1_0_2_3__2__3__15& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_2(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_2(const t_tuple& t) const {
context h;
return equalRange_2(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_0::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [1,0,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_6__0_1_2_3_4_5__63 {
using t_tuple = Tuple<RamDomain, 6>;
struct updater_t_btree_6__0_1_2_3_4_5__63 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[4] = new_t[4];
old_t[5] = new_t[5];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4,5>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2,3>, updater_t_btree_6__0_1_2_3_4_5__63>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[6];
std::copy(ramDomain, ramDomain + 6, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4,RamDomain a5) {
RamDomain data[6] = {a0,a1,a2,a3,a4,a5};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_6__0_1_2_3_4_5__63& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_63(const t_tuple& t) const {
context h;
return equalRange_63(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 6 direct b-tree index [0,1,2,3,4,5]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
using t_tuple = Tuple<RamDomain, 4>;
struct updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[2] = new_t[2];
old_t[3] = new_t[3];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,3,2>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<1,0,2,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<1,0>, updater_t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[4];
std::copy(ramDomain, ramDomain + 4, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3) {
RamDomain data[4] = {a0,a1,a2,a3};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[0] = MIN_RAM_DOMAIN;
high[0] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_2(const t_tuple& t) const {
context h;
return equalRange_2(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t, context& h) const {
auto pos = ind_1.find(t, h.hints_1);
auto fin = ind_1.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_1::iterator> equalRange_15(const t_tuple& t) const {
context h;
return equalRange_15(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [0,1,3,2]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 4 direct b-tree index [1,0,2,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,4,3>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2>, updater_t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31>;
t_ind_0 ind_0;
using t_ind_1 = btree_set<t_tuple, index_utils::comparator<0,2,1,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,2,1>, updater_t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31>;
t_ind_1 ind_1;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
t_ind_1::operation_hints hints_1;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
ind_1.insert(t, h.hints_1);
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31& other) {
ind_0.insertAll(other.ind_0);
ind_1.insertAll(other.ind_1);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_1(const t_tuple& t) const {
context h;
return equalRange_1(t, h);
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_1::iterator> equalRange_5(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[1] = MIN_RAM_DOMAIN;
high[1] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_1.lower_bound(low, h.hints_1), ind_1.upper_bound(high, h.hints_1));
}
range<t_ind_1::iterator> equalRange_5(const t_tuple& t) const {
context h;
return equalRange_5(t, h);
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
range<t_ind_1::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_1.find(t, h.hints_1);
auto fin = ind_1.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_1::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
ind_1.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,4,3]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
const auto& stats_1 = ind_1.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,2,1,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_1.inserts.getHits() << "/" << stats_1.inserts.getMisses() << "/" << stats_1.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_1.contains.getHits() << "/" << stats_1.contains.getMisses() << "/" << stats_1.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_1.lower_bound.getHits() << "/" << stats_1.lower_bound.getMisses() << "/" << stats_1.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_1.upper_bound.getHits() << "/" << stats_1.upper_bound.getMisses() << "/" << stats_1.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_3_4__7__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__0_1_2_3_4__7__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2>, updater_t_btree_5__0_1_2_3_4__7__31>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_3_4__7__31& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_7(const t_tuple& t) const {
context h;
return equalRange_7(t, h);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};
struct t_btree_5__0_1_2_3_4__3__31 {
using t_tuple = Tuple<RamDomain, 5>;
struct updater_t_btree_5__0_1_2_3_4__3__31 {
void update(t_tuple& old_t, const t_tuple& new_t) {
old_t[3] = new_t[3];
old_t[4] = new_t[4];
}
};
using t_ind_0 = btree_set<t_tuple, index_utils::comparator<0,1,2,3,4>, std::allocator<t_tuple>, 256, typename souffle::detail::default_strategy<t_tuple>::type, index_utils::comparator<0,1,2>, updater_t_btree_5__0_1_2_3_4__3__31>;
t_ind_0 ind_0;
using iterator = t_ind_0::iterator;
struct context {
t_ind_0::operation_hints hints_0;
};
context createContext() { return context(); }
bool insert(const t_tuple& t) {
context h;
return insert(t, h);
}
bool insert(const t_tuple& t, context& h) {
if (ind_0.insert(t, h.hints_0)) {
return true;
} else return false;
}
bool insert(const RamDomain* ramDomain) {
RamDomain data[5];
std::copy(ramDomain, ramDomain + 5, data);
const t_tuple& tuple = reinterpret_cast<const t_tuple&>(data);
context h;
return insert(tuple, h);
}
bool insert(RamDomain a0,RamDomain a1,RamDomain a2,RamDomain a3,RamDomain a4) {
RamDomain data[5] = {a0,a1,a2,a3,a4};
return insert(data);
}
template <typename T>
void insertAll(T& other) {
for (auto const& cur : other) {
insert(cur);
}
}
void insertAll(t_btree_5__0_1_2_3_4__3__31& other) {
ind_0.insertAll(other.ind_0);
}
bool contains(const t_tuple& t, context& h) const {
return ind_0.contains(t, h.hints_0);
}
bool contains(const t_tuple& t) const {
context h;
return contains(t, h);
}
std::size_t size() const {
return ind_0.size();
}
iterator find(const t_tuple& t, context& h) const {
return ind_0.find(t, h.hints_0);
}
iterator find(const t_tuple& t) const {
context h;
return find(t, h);
}
range<iterator> equalRange_0(const t_tuple& t, context& h) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<iterator> equalRange_0(const t_tuple& t) const {
return range<iterator>(ind_0.begin(),ind_0.end());
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t, context& h) const {
t_tuple low(t); t_tuple high(t);
low[2] = MIN_RAM_DOMAIN;
high[2] = MAX_RAM_DOMAIN;
low[3] = MIN_RAM_DOMAIN;
high[3] = MAX_RAM_DOMAIN;
low[4] = MIN_RAM_DOMAIN;
high[4] = MAX_RAM_DOMAIN;
return make_range(ind_0.lower_bound(low, h.hints_0), ind_0.upper_bound(high, h.hints_0));
}
range<t_ind_0::iterator> equalRange_3(const t_tuple& t) const {
context h;
return equalRange_3(t, h);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t, context& h) const {
auto pos = ind_0.find(t, h.hints_0);
auto fin = ind_0.end();
if (pos != fin) {fin = pos; ++fin;}
return make_range(pos, fin);
}
range<t_ind_0::iterator> equalRange_31(const t_tuple& t) const {
context h;
return equalRange_31(t, h);
}
bool empty() const {
return ind_0.empty();
}
std::vector<range<iterator>> partition() const {
return ind_0.getChunks(400);
}
void purge() {
ind_0.clear();
}
iterator begin() const {
return ind_0.begin();
}
iterator end() const {
return ind_0.end();
}
void printHintStatistics(std::ostream& o, const std::string prefix) const {
const auto& stats_0 = ind_0.getHintStatistics();
o << prefix << "arity 5 direct b-tree index [0,1,2,3,4]: (hits/misses/total)\n";
o << prefix << "Insert: " << stats_0.inserts.getHits() << "/" << stats_0.inserts.getMisses() << "/" << stats_0.inserts.getAccesses() << "\n";
o << prefix << "Contains: " << stats_0.contains.getHits() << "/" << stats_0.contains.getMisses() << "/" << stats_0.contains.getAccesses() << "\n";
o << prefix << "Lower-bound: " << stats_0.lower_bound.getHits() << "/" << stats_0.lower_bound.getMisses() << "/" << stats_0.lower_bound.getAccesses() << "\n";
o << prefix << "Upper-bound: " << stats_0.upper_bound.getHits() << "/" << stats_0.upper_bound.getMisses() << "/" << stats_0.upper_bound.getAccesses() << "\n";
}
};

class Sf_souffle_small : public SouffleProgram {
private:
static inline bool regex_wrapper(const std::string& pattern, const std::string& text) {
   bool result = false; 
   try { result = std::regex_match(text, std::regex(pattern)); } catch(...) { 
     std::cerr << "warning: wrong pattern provided for match(\"" << pattern << "\",\"" << text << "\").\n";
}
   return result;
}
private:
static inline std::string substr_wrapper(const std::string& str, size_t idx, size_t len) {
   std::string result; 
   try { result = str.substr(idx,len); } catch(...) { 
     std::cerr << "warning: wrong index position provided by substr(\"";
     std::cerr << str << "\"," << (int32_t)idx << "," << (int32_t)len << ") functor.\n";
   } return result;
}
private:
static inline RamDomain wrapper_tonumber(const std::string& str) {
   RamDomain result=0; 
   try { result = stord(str); } catch(...) { 
     std::cerr << "error: wrong string provided by to_number(\"";
     std::cerr << str << "\") functor.\n";
     raise(SIGFPE);
   } return result;
}
public:
// -- initialize symbol table --
SymbolTable symTable
{
	R"_(v0,v2,v1)_",
	R"_(Rule)_",
	R"_(points_initial,v0,v1)_",
	R"_(receiver_formal,v1,v2)_",
	R"_(pointsto_objcont(v0,v2,v1) :- 
   Rule(10),
   points_initial(v0,v1),
   receiver_formal(v1,v2).)_",
	R"_(v2,v0,v1)_",
	R"_(store,v1,v0,v2)_",
	R"_(pointsto_objcont(v2,v0,v1) :- 
   Rule(6),
   points_initial(v0,v1),
   store(v1,v0,v2).)_",
	R"_(v0,v1,v2)_",
	R"_(actual,v0,v1,v2)_",
	R"_(points_initial,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11),
   actual(v0,v1,v2),
   points_initial(v0,v2).)_",
	R"_(pointsto_objcont,v0,v1,v2)_",
	R"_(receiver_formal,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(2),
   pointsto_objcont(v0,v1,v2),
   receiver_formal(v2,v0).)_",
	R"_(v1,v0,v2)_",
	R"_(load,v0,v1,v2)_",
	R"_(points_initial,v2,v0)_",
	R"_(pointsto_objcont(v1,v0,v2) :- 
   Rule(0),
   load(v0,v1,v2),
   points_initial(v2,v0).)_",
	R"_(pointsto_objcont(v1,v0,v2) :- 
   Rule(4),
   pointsto_objcont(v0,v1,v2),
   receiver_formal(v2,v0).)_",
	R"_(pointsto_objcont(v2,v0,v1) :- 
   Rule(8),
   points_initial(v0,v1),
   receiver_formal(v1,v2).)_",
	R"_(points_initial,v2,v1)_",
	R"_(pointsto_objcont(v0,v2,v1) :- 
   Rule(9),
   points_initial(v0,v1),
   points_initial(v2,v1).)_",
	R"_(pointsto_objcont,v1,v0,v2)_",
	R"_(pointsto_objcont(v2,v0,v1) :- 
   Rule(5),
   points_initial(v0,v1),
   pointsto_objcont(v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v2,v1) :- 
   Rule(1),
   points_initial(v0,v1),
   store(v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(3),
   load(v0,v1,v2),
   points_initial(v2,v0).)_",
	R"_(pointsto_objcont(v0,v2,v1) :- 
   Rule(7),
   points_initial(v0,v1),
   pointsto_objcont(v1,v0,v2).)_",
	R"_(enclosing_type,v0,v1)_",
	R"_(assign,v2,v0,v1,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(69300),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v1,v0,v2).)_",
	R"_(enclosing_type,v0,v2)_",
	R"_(assign,v1,v0,v2,v2,v1,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(56630),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(assign,v0,v1,v1,v0,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(34295),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(enclosing_type,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19791),
   enclosing_type(v2,v0),
   actual(v0,v1,v2).)_",
	R"_(assign,v0,v1,v2,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(48017),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(13813),
   enclosing_type(v0,v1),
   load(v0,v1,v2).)_",
	R"_(enclosing_type,v1,v0)_",
	R"_(assign,v0,v2,v1,v2,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(28791),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(36691),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(invocation,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(15217),
   enclosing_type(v0,v1),
   invocation(v0,v2).)_",
	R"_(assign,v0,v2,v1,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(27895),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35837),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(enclosing_type,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(86626),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(assign,v0,v1,v1,v0,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22946),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(assign,v2,v0,v1,v2,v1,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(84399),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v0).)_",
	R"_(actual,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(18672),
   enclosing_type(v0,v1),
   actual(v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73858),
   enclosing_type(v1,v0),
   assign(v2,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(28989),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78609),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35569),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62907),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(assign,v1,v2,v1,v0,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(40656),
   enclosing_type(v0,v2),
   assign(v1,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19390),
   enclosing_type(v1,v0),
   actual(v0,v1,v2).)_",
	R"_(assign,v0,v2,v0,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41025),
   enclosing_type(v2,v0),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(36249),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v2,v0,v1,v2,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62351),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(2567),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v0,v1,v2,v1,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(40179),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(59120),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v1,v0,v2,v2,v0,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78420),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64858),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v0,v1,v2,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(28441),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47932),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(40777),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(38959),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(assign,v1,v0,v2,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(52193),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(assign,v1,v0,v2,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(5063),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(assign,v0,v1,v2,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(63698),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(assign,v2,v1,v0,v2,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(53306),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64812),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(assign,v0,v2,v1,v0,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(79085),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(assign,v0,v0,v1,v2,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35495),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(43610),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(enclosing_type,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(33581),
   enclosing_type(v2,v1),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(assign,v1,v2,v0,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(88964),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41537),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6139),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(66026),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78281),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(assign,v0,v2,v0,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(34234),
   enclosing_type(v1,v2),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(assign,v0,v2,v1,v2,v0,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(48347),
   enclosing_type(v1,v2),
   assign(v0,v2,v1,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(36826),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19964),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(70583),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(9423),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v1,v2,v1,v0,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(59394),
   enclosing_type(v0,v2),
   assign(v1,v2,v1,v0,v2,v0).)_",
	R"_(assign,v0,v0,v1,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(8227),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(assign,v1,v1,v0,v2,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22304),
   enclosing_type(v0,v2),
   assign(v1,v1,v0,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(21947),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(82029),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(79077),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(assign,v0,v0,v1,v2,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(4839),
   assign(v0,v0,v1,v2,v2,v0).)_",
	R"_(assign,v0,v2,v1,v2,v1,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(20846),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(10458),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25015),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(65996),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(34638),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(27604),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(67769),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(63016),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v1,v0,v0,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(42257),
   enclosing_type(v0,v2),
   assign(v1,v0,v0,v1,v2,v0).)_",
	R"_(assign,v1,v0,v2,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(24992),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(assign,v1,v0,v2,v2,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(32795),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(3548),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41694),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v0,v2,v0,v1,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64161),
   enclosing_type(v2,v0),
   assign(v0,v2,v0,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(14576),
   enclosing_type(v0,v1),
   load(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(43687),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(7005),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22493),
   enclosing_type(v1,v2),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(40917),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(67708),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(90086),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v1,v2,v0,v1,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47927),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v1).)_",
	R"_(assign,v2,v1,v0,v2,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(86220),
   enclosing_type(v1,v0),
   assign(v2,v1,v0,v2,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(87963),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(20685),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(39726),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73695),
   enclosing_type(v2,v1),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25962),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v2,v0).)_",
	R"_(formal,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(17004),
   enclosing_type(v0,v2),
   formal(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(76127),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(assign,v1,v0,v2,v2,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(4802),
   assign(v1,v0,v2,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(79890),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(70047),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(72259),
   enclosing_type(v1,v2),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(57647),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41683),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(70884),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(actual,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19066),
   enclosing_type(v0,v2),
   actual(v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(56544),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(50975),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(1665),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19450),
   enclosing_type(v0,v1),
   actual(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(56468),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(5608),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(67044),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(75403),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(assign,v2,v1,v0,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(52086),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(37139),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64840),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(57339),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(points_initial,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(10964),
   enclosing_type(v0,v2),
   points_initial(v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(89827),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(89093),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(23476),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(formal,v2,v0,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(17280),
   enclosing_type(v0,v2),
   formal(v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64388),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22401),
   enclosing_type(v2,v1),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(34014),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(32608),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(60907),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(65891),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(37048),
   enclosing_type(v2,v0),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74379),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47342),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(49990),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(51700),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6709),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(85928),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(27710),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(82355),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(9044),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(54183),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78074),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74364),
   enclosing_type(v2,v1),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(80260),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v0,v2,v1,v0,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(67346),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35125),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(59200),
   enclosing_type(v2,v0),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78013),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64376),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(29254),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(43019),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(72564),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(21285),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(69299),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(21348),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(54555),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62981),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(68694),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6750),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47086),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(26939),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(67670),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73511),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(58608),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(91582),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(170),
   load(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25399),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(75363),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(30037),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(formal,v1,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(17833),
   enclosing_type(v1,v0),
   formal(v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35561),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(18241),
   enclosing_type(v0,v1),
   actual(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47462),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47663),
   enclosing_type(v2,v1),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(71901),
   enclosing_type(v1,v2),
   assign(v1,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(3343),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6138),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(28853),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(store,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11948),
   enclosing_type(v0,v1),
   store(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(85549),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(7943),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(58357),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(9616),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v0,v0,v1,v2,v0,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78374),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(89794),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(assign,v0,v2,v0,v1,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73931),
   enclosing_type(v1,v0),
   assign(v0,v2,v0,v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(61289),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(46907),
   enclosing_type(v0,v1),
   assign(v1,v1,v0,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(81145),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(50995),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6355),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(7560),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(33965),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(3904),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(79705),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(assign,v2,v1,v2,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(54686),
   enclosing_type(v0,v2),
   assign(v2,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(71957),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(57810),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(81803),
   enclosing_type(v0,v2),
   assign(v1,v0,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(53640),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(85336),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11627),
   enclosing_type(v2,v0),
   store(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(75557),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(18878),
   enclosing_type(v0,v2),
   actual(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(30106),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(75720),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(9210),
   assign(v0,v0,v1,v2,v0,v1).)_",
	R"_(assign,v2,v0,v0,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(38590),
   enclosing_type(v1,v0),
   assign(v2,v0,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(29854),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(1420),
   assign(v1,v0,v2,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(65965),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(86199),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(42621),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(28746),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25525),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(84605),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(63851),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v2,v0,v1,v2,v0,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(7190),
   assign(v2,v0,v1,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(72049),
   enclosing_type(v2,v0),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(31145),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(8461),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(58678),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(7528),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(65106),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(54138),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62378),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(2915),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(76168),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(87560),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(9716),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(assign,v2,v0,v0,v1,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(61577),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(88216),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(88040),
   enclosing_type(v1,v2),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35188),
   enclosing_type(v1,v0),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(474),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62935),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(43064),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(57077),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(61633),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11958),
   enclosing_type(v0,v1),
   store(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(58726),
   enclosing_type(v0,v1),
   assign(v2,v1,v0,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(56946),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(1338),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(50426),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(46740),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(66661),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(42383),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(85064),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35514),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22098),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(88993),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25146),
   enclosing_type(v1,v2),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47655),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6397),
   assign(v1,v1,v0,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(439),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(51294),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78205),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(assign,v1,v0,v0,v1,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(86206),
   enclosing_type(v1,v0),
   assign(v1,v0,v0,v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(51600),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(38146),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(82123),
   enclosing_type(v2,v1),
   assign(v1,v1,v0,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(8929),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(58529),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(assign,v0,v0,v1,v2,v1,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(3527),
   assign(v0,v0,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74481),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(39415),
   enclosing_type(v1,v0),
   assign(v2,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(55665),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(8579),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(39475),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(1197),
   assign(v0,v2,v0,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(8358),
   assign(v2,v1,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(7893),
   assign(v2,v0,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(21380),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(9894),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(28898),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41705),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(receiver_actual,v0,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(15571),
   enclosing_type(v0,v1),
   receiver_actual(v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(26717),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(61156),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(68901),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v2,v0).)_",
	R"_(assign,v2,v1,v0,v2,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(23206),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v2,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25283),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(31758),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(37984),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47385),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41373),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(52977),
   enclosing_type(v1,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(assign,v1,v0,v2,v1,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(90514),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(43754),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47926),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41394),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(57499),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(51220),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(32354),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(25411),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(store,v1,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(13126),
   enclosing_type(v0,v1),
   store(v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(69742),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(65932),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).)_",
	R"_(assign,v1,v2,v1,v0,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(85236),
   enclosing_type(v0,v2),
   assign(v1,v2,v1,v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(29810),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(42564),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19565),
   enclosing_type(v1,v0),
   actual(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(72665),
   enclosing_type(v0,v1),
   assign(v2,v0,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(68281),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22831),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(37332),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74385),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(78437),
   enclosing_type(v1,v0),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(22838),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(87809),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(49254),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(44215),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(assign,v2,v1,v0,v2,v2,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(80523),
   enclosing_type(v0,v1),
   assign(v2,v1,v0,v2,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(82193),
   enclosing_type(v1,v2),
   assign(v0,v0,v1,v2,v0,v1).)_",
	R"_(assign,v1,v2,v0,v0,v1,v2)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(45987),
   enclosing_type(v2,v0),
   assign(v1,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(6975),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(36827),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(store,v0,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11485),
   enclosing_type(v0,v2),
   store(v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(16357),
   enclosing_type(v2,v1),
   formal(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(645),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(48143),
   enclosing_type(v2,v1),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(49737),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(35157),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(83549),
   enclosing_type(v2,v0),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(38054),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(40513),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73312),
   enclosing_type(v2,v1),
   assign(v1,v2,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(2993),
   assign(v2,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(24761),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74331),
   enclosing_type(v1,v0),
   assign(v0,v2,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(86947),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73061),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(34796),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(16408),
   enclosing_type(v0,v1),
   formal(v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62682),
   enclosing_type(v2,v0),
   assign(v2,v0,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(45099),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(23577),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(1817),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(72525),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(15594),
   enclosing_type(v1,v2),
   receiver_actual(v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(59956),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(2691),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(77526),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(62521),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(71978),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(33996),
   enclosing_type(v1,v0),
   assign(v2,v1,v0,v2,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(2566),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(37569),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41823),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(70372),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(63076),
   enclosing_type(v1,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(3206),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(81025),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(73095),
   enclosing_type(v2,v1),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74223),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(38235),
   enclosing_type(v2,v0),
   assign(v2,v0,v1,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(8420),
   assign(v0,v2,v1,v0,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(84341),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(82506),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(41355),
   enclosing_type(v1,v0),
   assign(v2,v0,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(69902),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(47259),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v2,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(76243),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(64259),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(50646),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).)_",
	R"_(load,v1,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(13416),
   enclosing_type(v0,v2),
   load(v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74332),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v0).)_",
	R"_(receiver_formal,v1,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(15882),
   enclosing_type(v1,v2),
   receiver_formal(v1,v0).)_",
	R"_(formal,v0,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(16387),
   enclosing_type(v1,v2),
   formal(v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(33055),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(30661),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(63340),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(90552),
   enclosing_type(v1,v2),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(68585),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(31650),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(32953),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(53568),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(90982),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(45301),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(74923),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(44452),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(61826),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(21073),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(70304),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(80494),
   enclosing_type(v1,v2),
   assign(v2,v1,v0,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(667),
   assign(v0,v2,v1,v2,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(33317),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(30928),
   enclosing_type(v2,v0),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11024),
   enclosing_type(v1,v2),
   points_initial(v0,v2).)_",
	R"_(actual,v0,v2,v1)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(19870),
   enclosing_type(v0,v1),
   actual(v0,v2,v1).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(20342),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v1,v0,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(40936),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v1,v2,v0).)_",
	R"_(store,v0,v2,v0)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(11329),
   enclosing_type(v1,v0),
   store(v0,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(39077),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v1,v2,v0).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(36263),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v0,v1,v2).)_",
	R"_(pointsto_objcont(v0,v1,v2) :- 
   Rule(83758),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v2,v1,v2).)_",
};// -- Table: Rule
std::unique_ptr<t_btree_3__0_1_2__1__7> rel_1_Rule = std::make_unique<t_btree_3__0_1_2__1__7>();
souffle::RelationWrapper<0,t_btree_3__0_1_2__1__7,Tuple<RamDomain,3>,3> wrapper_rel_1_Rule;
// -- Table: actual
std::unique_ptr<t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31> rel_2_actual = std::make_unique<t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31>();
souffle::RelationWrapper<1,t_btree_5__1_2_0_4_3__0_1_2_4_3__0_2_1_3_4__3__5__6__7__31,Tuple<RamDomain,5>,5> wrapper_rel_2_actual;
// -- Table: assign
std::unique_ptr<t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255> rel_3_assign = std::make_unique<t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255>();
souffle::RelationWrapper<2,t_btree_8__2_3_5_0_1_4_7_6__1_2_5_3_0_4_7_6__0_2_5_1_3_4_7_6__0_1_4_5_2_3_7_6__0_2_4_5_1_3_7_6__1_2_4_5_0_3_7_6__0_1_4_2_5_3_7_6__0_3_4_5_1_2_7_6__1_3_4_5_0_2_7_6__0_1_3_4_5_2_7_6__2_3_4_5_0_1_7_6__0_2_3_4_5_1_7_6__1_2_4_3_5_0_7_6__1_2_0_3_4_5_7_6__0_1_3_5_2_4_6_7__6__7__11__13__15__19__21__22__23__25__26__27__29__30__31__37__38__39__43__44__45__46__47__51__53__54__55__57__58__59__60__61__62__63__255,Tuple<RamDomain,8>,8> wrapper_rel_3_assign;
// -- Table: enclosing_type
std::unique_ptr<t_btree_4__0_1_2_3__3__15> rel_4_enclosing_type = std::make_unique<t_btree_4__0_1_2_3__3__15>();
souffle::RelationWrapper<3,t_btree_4__0_1_2_3__3__15,Tuple<RamDomain,4>,4> wrapper_rel_4_enclosing_type;
// -- Table: formal
std::unique_ptr<t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31> rel_5_formal = std::make_unique<t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31>();
souffle::RelationWrapper<4,t_btree_5__1_2_0_4_3__1_0_2_4_3__0_2_1_3_4__2__3__5__6__7__31,Tuple<RamDomain,5>,5> wrapper_rel_5_formal;
// -- Table: heappointsto
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_6_heappointsto = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<5,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_6_heappointsto;
// -- Table: invocation
std::unique_ptr<t_btree_4__0_1_2_3__1__3__15> rel_7_invocation = std::make_unique<t_btree_4__0_1_2_3__1__3__15>();
souffle::RelationWrapper<6,t_btree_4__0_1_2_3__1__3__15,Tuple<RamDomain,4>,4> wrapper_rel_7_invocation;
// -- Table: load
std::unique_ptr<t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31> rel_8_load = std::make_unique<t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31>();
souffle::RelationWrapper<7,t_btree_5__0_1_2_4_3__1_2_0_3_4__3__6__7__31,Tuple<RamDomain,5>,5> wrapper_rel_8_load;
// -- Table: points_initial
std::unique_ptr<t_btree_4__1_0_2_3__2__3__15> rel_9_points_initial = std::make_unique<t_btree_4__1_0_2_3__2__3__15>();
souffle::RelationWrapper<8,t_btree_4__1_0_2_3__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_9_points_initial;
// -- Table: pointsto
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_10_pointsto = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<9,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_10_pointsto;
// -- Table: receiver_actual
std::unique_ptr<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15> rel_11_receiver_actual = std::make_unique<t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15>();
souffle::RelationWrapper<10,t_btree_4__0_1_3_2__1_0_2_3__1__2__3__15,Tuple<RamDomain,4>,4> wrapper_rel_11_receiver_actual;
// -- Table: receiver_formal
std::unique_ptr<t_btree_4__0_1_2_3__1__3__15> rel_12_receiver_formal = std::make_unique<t_btree_4__0_1_2_3__1__3__15>();
souffle::RelationWrapper<11,t_btree_4__0_1_2_3__1__3__15,Tuple<RamDomain,4>,4> wrapper_rel_12_receiver_formal;
// -- Table: store
std::unique_ptr<t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31> rel_13_store = std::make_unique<t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31>();
souffle::RelationWrapper<12,t_btree_5__0_1_2_4_3__0_2_1_3_4__1__3__5__7__31,Tuple<RamDomain,5>,5> wrapper_rel_13_store;
// -- Table: pointsto_objcont
std::unique_ptr<t_btree_5__0_1_2_3_4__7__31> rel_14_pointsto_objcont = std::make_unique<t_btree_5__0_1_2_3_4__7__31>();
souffle::RelationWrapper<13,t_btree_5__0_1_2_3_4__7__31,Tuple<RamDomain,5>,5> wrapper_rel_14_pointsto_objcont;
// -- Table: @delta_pointsto_objcont
std::unique_ptr<t_btree_5__0_1_2_3_4__3__31> rel_15_delta_pointsto_objcont = std::make_unique<t_btree_5__0_1_2_3_4__3__31>();
// -- Table: @new_pointsto_objcont
std::unique_ptr<t_btree_5__0_1_2_3_4__3__31> rel_16_new_pointsto_objcont = std::make_unique<t_btree_5__0_1_2_3_4__3__31>();
// -- Table: pointsto_objcont.@info.1
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_17_pointsto_objcont_info_1 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<14,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_17_pointsto_objcont_info_1;
// -- Table: pointsto_objcont.@info.10
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_18_pointsto_objcont_info_10 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<15,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_18_pointsto_objcont_info_10;
// -- Table: pointsto_objcont.@info.100
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_19_pointsto_objcont_info_100 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<16,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_19_pointsto_objcont_info_100;
// -- Table: pointsto_objcont.@info.101
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_20_pointsto_objcont_info_101 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<17,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_20_pointsto_objcont_info_101;
// -- Table: pointsto_objcont.@info.102
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_21_pointsto_objcont_info_102 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<18,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_21_pointsto_objcont_info_102;
// -- Table: pointsto_objcont.@info.103
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_22_pointsto_objcont_info_103 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<19,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_22_pointsto_objcont_info_103;
// -- Table: pointsto_objcont.@info.104
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_23_pointsto_objcont_info_104 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<20,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_23_pointsto_objcont_info_104;
// -- Table: pointsto_objcont.@info.105
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_24_pointsto_objcont_info_105 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<21,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_24_pointsto_objcont_info_105;
// -- Table: pointsto_objcont.@info.106
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_25_pointsto_objcont_info_106 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<22,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_25_pointsto_objcont_info_106;
// -- Table: pointsto_objcont.@info.107
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_26_pointsto_objcont_info_107 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<23,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_26_pointsto_objcont_info_107;
// -- Table: pointsto_objcont.@info.108
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_27_pointsto_objcont_info_108 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<24,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_27_pointsto_objcont_info_108;
// -- Table: pointsto_objcont.@info.109
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_28_pointsto_objcont_info_109 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<25,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_28_pointsto_objcont_info_109;
// -- Table: pointsto_objcont.@info.11
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_29_pointsto_objcont_info_11 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<26,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_29_pointsto_objcont_info_11;
// -- Table: pointsto_objcont.@info.110
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_30_pointsto_objcont_info_110 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<27,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_30_pointsto_objcont_info_110;
// -- Table: pointsto_objcont.@info.111
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_31_pointsto_objcont_info_111 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<28,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_31_pointsto_objcont_info_111;
// -- Table: pointsto_objcont.@info.112
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_32_pointsto_objcont_info_112 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<29,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_32_pointsto_objcont_info_112;
// -- Table: pointsto_objcont.@info.113
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_33_pointsto_objcont_info_113 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<30,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_33_pointsto_objcont_info_113;
// -- Table: pointsto_objcont.@info.114
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_34_pointsto_objcont_info_114 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<31,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_34_pointsto_objcont_info_114;
// -- Table: pointsto_objcont.@info.115
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_35_pointsto_objcont_info_115 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<32,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_35_pointsto_objcont_info_115;
// -- Table: pointsto_objcont.@info.116
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_36_pointsto_objcont_info_116 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<33,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_36_pointsto_objcont_info_116;
// -- Table: pointsto_objcont.@info.117
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_37_pointsto_objcont_info_117 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<34,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_37_pointsto_objcont_info_117;
// -- Table: pointsto_objcont.@info.118
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_38_pointsto_objcont_info_118 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<35,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_38_pointsto_objcont_info_118;
// -- Table: pointsto_objcont.@info.119
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_39_pointsto_objcont_info_119 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<36,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_39_pointsto_objcont_info_119;
// -- Table: pointsto_objcont.@info.12
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_40_pointsto_objcont_info_12 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<37,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_40_pointsto_objcont_info_12;
// -- Table: pointsto_objcont.@info.120
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_41_pointsto_objcont_info_120 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<38,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_41_pointsto_objcont_info_120;
// -- Table: pointsto_objcont.@info.121
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_42_pointsto_objcont_info_121 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<39,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_42_pointsto_objcont_info_121;
// -- Table: pointsto_objcont.@info.122
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_43_pointsto_objcont_info_122 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<40,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_43_pointsto_objcont_info_122;
// -- Table: pointsto_objcont.@info.123
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_44_pointsto_objcont_info_123 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<41,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_44_pointsto_objcont_info_123;
// -- Table: pointsto_objcont.@info.124
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_45_pointsto_objcont_info_124 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<42,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_45_pointsto_objcont_info_124;
// -- Table: pointsto_objcont.@info.125
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_46_pointsto_objcont_info_125 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<43,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_46_pointsto_objcont_info_125;
// -- Table: pointsto_objcont.@info.126
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_47_pointsto_objcont_info_126 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<44,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_47_pointsto_objcont_info_126;
// -- Table: pointsto_objcont.@info.127
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_48_pointsto_objcont_info_127 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<45,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_48_pointsto_objcont_info_127;
// -- Table: pointsto_objcont.@info.128
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_49_pointsto_objcont_info_128 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<46,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_49_pointsto_objcont_info_128;
// -- Table: pointsto_objcont.@info.129
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_50_pointsto_objcont_info_129 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<47,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_50_pointsto_objcont_info_129;
// -- Table: pointsto_objcont.@info.13
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_51_pointsto_objcont_info_13 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<48,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_51_pointsto_objcont_info_13;
// -- Table: pointsto_objcont.@info.130
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_52_pointsto_objcont_info_130 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<49,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_52_pointsto_objcont_info_130;
// -- Table: pointsto_objcont.@info.131
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_53_pointsto_objcont_info_131 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<50,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_53_pointsto_objcont_info_131;
// -- Table: pointsto_objcont.@info.132
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_54_pointsto_objcont_info_132 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<51,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_54_pointsto_objcont_info_132;
// -- Table: pointsto_objcont.@info.133
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_55_pointsto_objcont_info_133 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<52,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_55_pointsto_objcont_info_133;
// -- Table: pointsto_objcont.@info.134
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_56_pointsto_objcont_info_134 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<53,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_56_pointsto_objcont_info_134;
// -- Table: pointsto_objcont.@info.135
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_57_pointsto_objcont_info_135 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<54,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_57_pointsto_objcont_info_135;
// -- Table: pointsto_objcont.@info.136
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_58_pointsto_objcont_info_136 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<55,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_58_pointsto_objcont_info_136;
// -- Table: pointsto_objcont.@info.137
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_59_pointsto_objcont_info_137 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<56,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_59_pointsto_objcont_info_137;
// -- Table: pointsto_objcont.@info.138
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_60_pointsto_objcont_info_138 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<57,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_60_pointsto_objcont_info_138;
// -- Table: pointsto_objcont.@info.139
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_61_pointsto_objcont_info_139 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<58,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_61_pointsto_objcont_info_139;
// -- Table: pointsto_objcont.@info.14
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_62_pointsto_objcont_info_14 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<59,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_62_pointsto_objcont_info_14;
// -- Table: pointsto_objcont.@info.140
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_63_pointsto_objcont_info_140 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<60,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_63_pointsto_objcont_info_140;
// -- Table: pointsto_objcont.@info.141
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_64_pointsto_objcont_info_141 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<61,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_64_pointsto_objcont_info_141;
// -- Table: pointsto_objcont.@info.142
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_65_pointsto_objcont_info_142 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<62,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_65_pointsto_objcont_info_142;
// -- Table: pointsto_objcont.@info.143
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_66_pointsto_objcont_info_143 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<63,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_66_pointsto_objcont_info_143;
// -- Table: pointsto_objcont.@info.144
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_67_pointsto_objcont_info_144 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<64,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_67_pointsto_objcont_info_144;
// -- Table: pointsto_objcont.@info.145
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_68_pointsto_objcont_info_145 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<65,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_68_pointsto_objcont_info_145;
// -- Table: pointsto_objcont.@info.146
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_69_pointsto_objcont_info_146 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<66,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_69_pointsto_objcont_info_146;
// -- Table: pointsto_objcont.@info.147
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_70_pointsto_objcont_info_147 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<67,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_70_pointsto_objcont_info_147;
// -- Table: pointsto_objcont.@info.148
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_71_pointsto_objcont_info_148 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<68,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_71_pointsto_objcont_info_148;
// -- Table: pointsto_objcont.@info.149
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_72_pointsto_objcont_info_149 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<69,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_72_pointsto_objcont_info_149;
// -- Table: pointsto_objcont.@info.15
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_73_pointsto_objcont_info_15 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<70,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_73_pointsto_objcont_info_15;
// -- Table: pointsto_objcont.@info.150
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_74_pointsto_objcont_info_150 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<71,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_74_pointsto_objcont_info_150;
// -- Table: pointsto_objcont.@info.151
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_75_pointsto_objcont_info_151 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<72,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_75_pointsto_objcont_info_151;
// -- Table: pointsto_objcont.@info.152
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_76_pointsto_objcont_info_152 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<73,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_76_pointsto_objcont_info_152;
// -- Table: pointsto_objcont.@info.153
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_77_pointsto_objcont_info_153 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<74,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_77_pointsto_objcont_info_153;
// -- Table: pointsto_objcont.@info.154
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_78_pointsto_objcont_info_154 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<75,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_78_pointsto_objcont_info_154;
// -- Table: pointsto_objcont.@info.155
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_79_pointsto_objcont_info_155 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<76,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_79_pointsto_objcont_info_155;
// -- Table: pointsto_objcont.@info.156
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_80_pointsto_objcont_info_156 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<77,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_80_pointsto_objcont_info_156;
// -- Table: pointsto_objcont.@info.157
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_81_pointsto_objcont_info_157 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<78,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_81_pointsto_objcont_info_157;
// -- Table: pointsto_objcont.@info.158
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_82_pointsto_objcont_info_158 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<79,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_82_pointsto_objcont_info_158;
// -- Table: pointsto_objcont.@info.159
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_83_pointsto_objcont_info_159 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<80,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_83_pointsto_objcont_info_159;
// -- Table: pointsto_objcont.@info.16
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_84_pointsto_objcont_info_16 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<81,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_84_pointsto_objcont_info_16;
// -- Table: pointsto_objcont.@info.160
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_85_pointsto_objcont_info_160 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<82,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_85_pointsto_objcont_info_160;
// -- Table: pointsto_objcont.@info.161
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_86_pointsto_objcont_info_161 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<83,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_86_pointsto_objcont_info_161;
// -- Table: pointsto_objcont.@info.162
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_87_pointsto_objcont_info_162 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<84,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_87_pointsto_objcont_info_162;
// -- Table: pointsto_objcont.@info.163
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_88_pointsto_objcont_info_163 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<85,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_88_pointsto_objcont_info_163;
// -- Table: pointsto_objcont.@info.164
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_89_pointsto_objcont_info_164 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<86,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_89_pointsto_objcont_info_164;
// -- Table: pointsto_objcont.@info.165
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_90_pointsto_objcont_info_165 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<87,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_90_pointsto_objcont_info_165;
// -- Table: pointsto_objcont.@info.166
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_91_pointsto_objcont_info_166 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<88,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_91_pointsto_objcont_info_166;
// -- Table: pointsto_objcont.@info.167
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_92_pointsto_objcont_info_167 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<89,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_92_pointsto_objcont_info_167;
// -- Table: pointsto_objcont.@info.168
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_93_pointsto_objcont_info_168 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<90,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_93_pointsto_objcont_info_168;
// -- Table: pointsto_objcont.@info.169
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_94_pointsto_objcont_info_169 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<91,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_94_pointsto_objcont_info_169;
// -- Table: pointsto_objcont.@info.17
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_95_pointsto_objcont_info_17 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<92,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_95_pointsto_objcont_info_17;
// -- Table: pointsto_objcont.@info.170
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_96_pointsto_objcont_info_170 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<93,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_96_pointsto_objcont_info_170;
// -- Table: pointsto_objcont.@info.171
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_97_pointsto_objcont_info_171 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<94,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_97_pointsto_objcont_info_171;
// -- Table: pointsto_objcont.@info.172
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_98_pointsto_objcont_info_172 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<95,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_98_pointsto_objcont_info_172;
// -- Table: pointsto_objcont.@info.173
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_99_pointsto_objcont_info_173 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<96,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_99_pointsto_objcont_info_173;
// -- Table: pointsto_objcont.@info.174
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_100_pointsto_objcont_info_174 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<97,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_100_pointsto_objcont_info_174;
// -- Table: pointsto_objcont.@info.175
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_101_pointsto_objcont_info_175 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<98,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_101_pointsto_objcont_info_175;
// -- Table: pointsto_objcont.@info.176
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_102_pointsto_objcont_info_176 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<99,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_102_pointsto_objcont_info_176;
// -- Table: pointsto_objcont.@info.177
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_103_pointsto_objcont_info_177 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<100,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_103_pointsto_objcont_info_177;
// -- Table: pointsto_objcont.@info.178
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_104_pointsto_objcont_info_178 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<101,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_104_pointsto_objcont_info_178;
// -- Table: pointsto_objcont.@info.179
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_105_pointsto_objcont_info_179 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<102,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_105_pointsto_objcont_info_179;
// -- Table: pointsto_objcont.@info.18
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_106_pointsto_objcont_info_18 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<103,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_106_pointsto_objcont_info_18;
// -- Table: pointsto_objcont.@info.180
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_107_pointsto_objcont_info_180 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<104,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_107_pointsto_objcont_info_180;
// -- Table: pointsto_objcont.@info.181
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_108_pointsto_objcont_info_181 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<105,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_108_pointsto_objcont_info_181;
// -- Table: pointsto_objcont.@info.182
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_109_pointsto_objcont_info_182 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<106,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_109_pointsto_objcont_info_182;
// -- Table: pointsto_objcont.@info.183
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_110_pointsto_objcont_info_183 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<107,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_110_pointsto_objcont_info_183;
// -- Table: pointsto_objcont.@info.184
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_111_pointsto_objcont_info_184 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<108,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_111_pointsto_objcont_info_184;
// -- Table: pointsto_objcont.@info.185
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_112_pointsto_objcont_info_185 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<109,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_112_pointsto_objcont_info_185;
// -- Table: pointsto_objcont.@info.186
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_113_pointsto_objcont_info_186 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<110,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_113_pointsto_objcont_info_186;
// -- Table: pointsto_objcont.@info.187
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_114_pointsto_objcont_info_187 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<111,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_114_pointsto_objcont_info_187;
// -- Table: pointsto_objcont.@info.188
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_115_pointsto_objcont_info_188 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<112,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_115_pointsto_objcont_info_188;
// -- Table: pointsto_objcont.@info.189
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_116_pointsto_objcont_info_189 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<113,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_116_pointsto_objcont_info_189;
// -- Table: pointsto_objcont.@info.19
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_117_pointsto_objcont_info_19 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<114,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_117_pointsto_objcont_info_19;
// -- Table: pointsto_objcont.@info.190
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_118_pointsto_objcont_info_190 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<115,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_118_pointsto_objcont_info_190;
// -- Table: pointsto_objcont.@info.191
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_119_pointsto_objcont_info_191 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<116,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_119_pointsto_objcont_info_191;
// -- Table: pointsto_objcont.@info.192
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_120_pointsto_objcont_info_192 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<117,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_120_pointsto_objcont_info_192;
// -- Table: pointsto_objcont.@info.193
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_121_pointsto_objcont_info_193 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<118,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_121_pointsto_objcont_info_193;
// -- Table: pointsto_objcont.@info.194
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_122_pointsto_objcont_info_194 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<119,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_122_pointsto_objcont_info_194;
// -- Table: pointsto_objcont.@info.195
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_123_pointsto_objcont_info_195 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<120,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_123_pointsto_objcont_info_195;
// -- Table: pointsto_objcont.@info.196
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_124_pointsto_objcont_info_196 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<121,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_124_pointsto_objcont_info_196;
// -- Table: pointsto_objcont.@info.197
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_125_pointsto_objcont_info_197 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<122,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_125_pointsto_objcont_info_197;
// -- Table: pointsto_objcont.@info.198
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_126_pointsto_objcont_info_198 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<123,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_126_pointsto_objcont_info_198;
// -- Table: pointsto_objcont.@info.199
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_127_pointsto_objcont_info_199 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<124,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_127_pointsto_objcont_info_199;
// -- Table: pointsto_objcont.@info.2
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_128_pointsto_objcont_info_2 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<125,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_128_pointsto_objcont_info_2;
// -- Table: pointsto_objcont.@info.20
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_129_pointsto_objcont_info_20 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<126,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_129_pointsto_objcont_info_20;
// -- Table: pointsto_objcont.@info.200
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_130_pointsto_objcont_info_200 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<127,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_130_pointsto_objcont_info_200;
// -- Table: pointsto_objcont.@info.201
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_131_pointsto_objcont_info_201 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<128,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_131_pointsto_objcont_info_201;
// -- Table: pointsto_objcont.@info.202
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_132_pointsto_objcont_info_202 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<129,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_132_pointsto_objcont_info_202;
// -- Table: pointsto_objcont.@info.203
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_133_pointsto_objcont_info_203 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<130,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_133_pointsto_objcont_info_203;
// -- Table: pointsto_objcont.@info.204
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_134_pointsto_objcont_info_204 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<131,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_134_pointsto_objcont_info_204;
// -- Table: pointsto_objcont.@info.205
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_135_pointsto_objcont_info_205 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<132,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_135_pointsto_objcont_info_205;
// -- Table: pointsto_objcont.@info.206
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_136_pointsto_objcont_info_206 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<133,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_136_pointsto_objcont_info_206;
// -- Table: pointsto_objcont.@info.207
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_137_pointsto_objcont_info_207 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<134,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_137_pointsto_objcont_info_207;
// -- Table: pointsto_objcont.@info.208
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_138_pointsto_objcont_info_208 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<135,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_138_pointsto_objcont_info_208;
// -- Table: pointsto_objcont.@info.209
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_139_pointsto_objcont_info_209 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<136,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_139_pointsto_objcont_info_209;
// -- Table: pointsto_objcont.@info.21
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_140_pointsto_objcont_info_21 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<137,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_140_pointsto_objcont_info_21;
// -- Table: pointsto_objcont.@info.210
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_141_pointsto_objcont_info_210 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<138,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_141_pointsto_objcont_info_210;
// -- Table: pointsto_objcont.@info.211
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_142_pointsto_objcont_info_211 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<139,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_142_pointsto_objcont_info_211;
// -- Table: pointsto_objcont.@info.212
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_143_pointsto_objcont_info_212 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<140,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_143_pointsto_objcont_info_212;
// -- Table: pointsto_objcont.@info.213
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_144_pointsto_objcont_info_213 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<141,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_144_pointsto_objcont_info_213;
// -- Table: pointsto_objcont.@info.214
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_145_pointsto_objcont_info_214 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<142,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_145_pointsto_objcont_info_214;
// -- Table: pointsto_objcont.@info.215
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_146_pointsto_objcont_info_215 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<143,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_146_pointsto_objcont_info_215;
// -- Table: pointsto_objcont.@info.216
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_147_pointsto_objcont_info_216 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<144,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_147_pointsto_objcont_info_216;
// -- Table: pointsto_objcont.@info.217
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_148_pointsto_objcont_info_217 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<145,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_148_pointsto_objcont_info_217;
// -- Table: pointsto_objcont.@info.218
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_149_pointsto_objcont_info_218 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<146,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_149_pointsto_objcont_info_218;
// -- Table: pointsto_objcont.@info.219
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_150_pointsto_objcont_info_219 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<147,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_150_pointsto_objcont_info_219;
// -- Table: pointsto_objcont.@info.22
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_151_pointsto_objcont_info_22 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<148,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_151_pointsto_objcont_info_22;
// -- Table: pointsto_objcont.@info.220
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_152_pointsto_objcont_info_220 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<149,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_152_pointsto_objcont_info_220;
// -- Table: pointsto_objcont.@info.221
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_153_pointsto_objcont_info_221 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<150,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_153_pointsto_objcont_info_221;
// -- Table: pointsto_objcont.@info.222
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_154_pointsto_objcont_info_222 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<151,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_154_pointsto_objcont_info_222;
// -- Table: pointsto_objcont.@info.223
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_155_pointsto_objcont_info_223 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<152,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_155_pointsto_objcont_info_223;
// -- Table: pointsto_objcont.@info.224
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_156_pointsto_objcont_info_224 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<153,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_156_pointsto_objcont_info_224;
// -- Table: pointsto_objcont.@info.225
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_157_pointsto_objcont_info_225 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<154,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_157_pointsto_objcont_info_225;
// -- Table: pointsto_objcont.@info.226
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_158_pointsto_objcont_info_226 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<155,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_158_pointsto_objcont_info_226;
// -- Table: pointsto_objcont.@info.227
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_159_pointsto_objcont_info_227 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<156,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_159_pointsto_objcont_info_227;
// -- Table: pointsto_objcont.@info.228
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_160_pointsto_objcont_info_228 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<157,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_160_pointsto_objcont_info_228;
// -- Table: pointsto_objcont.@info.229
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_161_pointsto_objcont_info_229 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<158,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_161_pointsto_objcont_info_229;
// -- Table: pointsto_objcont.@info.23
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_162_pointsto_objcont_info_23 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<159,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_162_pointsto_objcont_info_23;
// -- Table: pointsto_objcont.@info.230
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_163_pointsto_objcont_info_230 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<160,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_163_pointsto_objcont_info_230;
// -- Table: pointsto_objcont.@info.231
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_164_pointsto_objcont_info_231 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<161,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_164_pointsto_objcont_info_231;
// -- Table: pointsto_objcont.@info.232
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_165_pointsto_objcont_info_232 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<162,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_165_pointsto_objcont_info_232;
// -- Table: pointsto_objcont.@info.233
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_166_pointsto_objcont_info_233 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<163,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_166_pointsto_objcont_info_233;
// -- Table: pointsto_objcont.@info.234
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_167_pointsto_objcont_info_234 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<164,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_167_pointsto_objcont_info_234;
// -- Table: pointsto_objcont.@info.235
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_168_pointsto_objcont_info_235 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<165,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_168_pointsto_objcont_info_235;
// -- Table: pointsto_objcont.@info.236
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_169_pointsto_objcont_info_236 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<166,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_169_pointsto_objcont_info_236;
// -- Table: pointsto_objcont.@info.237
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_170_pointsto_objcont_info_237 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<167,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_170_pointsto_objcont_info_237;
// -- Table: pointsto_objcont.@info.238
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_171_pointsto_objcont_info_238 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<168,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_171_pointsto_objcont_info_238;
// -- Table: pointsto_objcont.@info.239
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_172_pointsto_objcont_info_239 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<169,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_172_pointsto_objcont_info_239;
// -- Table: pointsto_objcont.@info.24
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_173_pointsto_objcont_info_24 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<170,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_173_pointsto_objcont_info_24;
// -- Table: pointsto_objcont.@info.240
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_174_pointsto_objcont_info_240 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<171,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_174_pointsto_objcont_info_240;
// -- Table: pointsto_objcont.@info.241
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_175_pointsto_objcont_info_241 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<172,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_175_pointsto_objcont_info_241;
// -- Table: pointsto_objcont.@info.242
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_176_pointsto_objcont_info_242 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<173,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_176_pointsto_objcont_info_242;
// -- Table: pointsto_objcont.@info.243
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_177_pointsto_objcont_info_243 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<174,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_177_pointsto_objcont_info_243;
// -- Table: pointsto_objcont.@info.244
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_178_pointsto_objcont_info_244 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<175,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_178_pointsto_objcont_info_244;
// -- Table: pointsto_objcont.@info.245
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_179_pointsto_objcont_info_245 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<176,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_179_pointsto_objcont_info_245;
// -- Table: pointsto_objcont.@info.246
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_180_pointsto_objcont_info_246 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<177,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_180_pointsto_objcont_info_246;
// -- Table: pointsto_objcont.@info.247
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_181_pointsto_objcont_info_247 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<178,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_181_pointsto_objcont_info_247;
// -- Table: pointsto_objcont.@info.248
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_182_pointsto_objcont_info_248 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<179,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_182_pointsto_objcont_info_248;
// -- Table: pointsto_objcont.@info.249
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_183_pointsto_objcont_info_249 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<180,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_183_pointsto_objcont_info_249;
// -- Table: pointsto_objcont.@info.25
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_184_pointsto_objcont_info_25 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<181,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_184_pointsto_objcont_info_25;
// -- Table: pointsto_objcont.@info.250
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_185_pointsto_objcont_info_250 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<182,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_185_pointsto_objcont_info_250;
// -- Table: pointsto_objcont.@info.251
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_186_pointsto_objcont_info_251 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<183,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_186_pointsto_objcont_info_251;
// -- Table: pointsto_objcont.@info.252
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_187_pointsto_objcont_info_252 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<184,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_187_pointsto_objcont_info_252;
// -- Table: pointsto_objcont.@info.253
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_188_pointsto_objcont_info_253 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<185,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_188_pointsto_objcont_info_253;
// -- Table: pointsto_objcont.@info.254
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_189_pointsto_objcont_info_254 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<186,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_189_pointsto_objcont_info_254;
// -- Table: pointsto_objcont.@info.255
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_190_pointsto_objcont_info_255 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<187,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_190_pointsto_objcont_info_255;
// -- Table: pointsto_objcont.@info.256
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_191_pointsto_objcont_info_256 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<188,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_191_pointsto_objcont_info_256;
// -- Table: pointsto_objcont.@info.257
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_192_pointsto_objcont_info_257 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<189,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_192_pointsto_objcont_info_257;
// -- Table: pointsto_objcont.@info.258
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_193_pointsto_objcont_info_258 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<190,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_193_pointsto_objcont_info_258;
// -- Table: pointsto_objcont.@info.259
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_194_pointsto_objcont_info_259 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<191,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_194_pointsto_objcont_info_259;
// -- Table: pointsto_objcont.@info.26
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_195_pointsto_objcont_info_26 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<192,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_195_pointsto_objcont_info_26;
// -- Table: pointsto_objcont.@info.260
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_196_pointsto_objcont_info_260 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<193,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_196_pointsto_objcont_info_260;
// -- Table: pointsto_objcont.@info.261
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_197_pointsto_objcont_info_261 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<194,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_197_pointsto_objcont_info_261;
// -- Table: pointsto_objcont.@info.262
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_198_pointsto_objcont_info_262 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<195,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_198_pointsto_objcont_info_262;
// -- Table: pointsto_objcont.@info.263
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_199_pointsto_objcont_info_263 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<196,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_199_pointsto_objcont_info_263;
// -- Table: pointsto_objcont.@info.264
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_200_pointsto_objcont_info_264 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<197,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_200_pointsto_objcont_info_264;
// -- Table: pointsto_objcont.@info.265
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_201_pointsto_objcont_info_265 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<198,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_201_pointsto_objcont_info_265;
// -- Table: pointsto_objcont.@info.266
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_202_pointsto_objcont_info_266 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<199,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_202_pointsto_objcont_info_266;
// -- Table: pointsto_objcont.@info.267
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_203_pointsto_objcont_info_267 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<200,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_203_pointsto_objcont_info_267;
// -- Table: pointsto_objcont.@info.268
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_204_pointsto_objcont_info_268 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<201,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_204_pointsto_objcont_info_268;
// -- Table: pointsto_objcont.@info.269
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_205_pointsto_objcont_info_269 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<202,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_205_pointsto_objcont_info_269;
// -- Table: pointsto_objcont.@info.27
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_206_pointsto_objcont_info_27 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<203,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_206_pointsto_objcont_info_27;
// -- Table: pointsto_objcont.@info.270
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_207_pointsto_objcont_info_270 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<204,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_207_pointsto_objcont_info_270;
// -- Table: pointsto_objcont.@info.271
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_208_pointsto_objcont_info_271 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<205,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_208_pointsto_objcont_info_271;
// -- Table: pointsto_objcont.@info.272
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_209_pointsto_objcont_info_272 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<206,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_209_pointsto_objcont_info_272;
// -- Table: pointsto_objcont.@info.273
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_210_pointsto_objcont_info_273 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<207,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_210_pointsto_objcont_info_273;
// -- Table: pointsto_objcont.@info.274
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_211_pointsto_objcont_info_274 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<208,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_211_pointsto_objcont_info_274;
// -- Table: pointsto_objcont.@info.275
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_212_pointsto_objcont_info_275 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<209,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_212_pointsto_objcont_info_275;
// -- Table: pointsto_objcont.@info.276
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_213_pointsto_objcont_info_276 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<210,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_213_pointsto_objcont_info_276;
// -- Table: pointsto_objcont.@info.277
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_214_pointsto_objcont_info_277 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<211,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_214_pointsto_objcont_info_277;
// -- Table: pointsto_objcont.@info.278
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_215_pointsto_objcont_info_278 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<212,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_215_pointsto_objcont_info_278;
// -- Table: pointsto_objcont.@info.279
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_216_pointsto_objcont_info_279 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<213,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_216_pointsto_objcont_info_279;
// -- Table: pointsto_objcont.@info.28
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_217_pointsto_objcont_info_28 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<214,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_217_pointsto_objcont_info_28;
// -- Table: pointsto_objcont.@info.280
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_218_pointsto_objcont_info_280 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<215,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_218_pointsto_objcont_info_280;
// -- Table: pointsto_objcont.@info.281
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_219_pointsto_objcont_info_281 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<216,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_219_pointsto_objcont_info_281;
// -- Table: pointsto_objcont.@info.282
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_220_pointsto_objcont_info_282 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<217,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_220_pointsto_objcont_info_282;
// -- Table: pointsto_objcont.@info.283
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_221_pointsto_objcont_info_283 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<218,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_221_pointsto_objcont_info_283;
// -- Table: pointsto_objcont.@info.284
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_222_pointsto_objcont_info_284 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<219,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_222_pointsto_objcont_info_284;
// -- Table: pointsto_objcont.@info.285
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_223_pointsto_objcont_info_285 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<220,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_223_pointsto_objcont_info_285;
// -- Table: pointsto_objcont.@info.286
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_224_pointsto_objcont_info_286 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<221,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_224_pointsto_objcont_info_286;
// -- Table: pointsto_objcont.@info.287
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_225_pointsto_objcont_info_287 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<222,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_225_pointsto_objcont_info_287;
// -- Table: pointsto_objcont.@info.288
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_226_pointsto_objcont_info_288 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<223,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_226_pointsto_objcont_info_288;
// -- Table: pointsto_objcont.@info.289
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_227_pointsto_objcont_info_289 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<224,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_227_pointsto_objcont_info_289;
// -- Table: pointsto_objcont.@info.29
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_228_pointsto_objcont_info_29 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<225,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_228_pointsto_objcont_info_29;
// -- Table: pointsto_objcont.@info.290
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_229_pointsto_objcont_info_290 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<226,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_229_pointsto_objcont_info_290;
// -- Table: pointsto_objcont.@info.291
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_230_pointsto_objcont_info_291 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<227,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_230_pointsto_objcont_info_291;
// -- Table: pointsto_objcont.@info.292
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_231_pointsto_objcont_info_292 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<228,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_231_pointsto_objcont_info_292;
// -- Table: pointsto_objcont.@info.293
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_232_pointsto_objcont_info_293 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<229,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_232_pointsto_objcont_info_293;
// -- Table: pointsto_objcont.@info.294
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_233_pointsto_objcont_info_294 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<230,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_233_pointsto_objcont_info_294;
// -- Table: pointsto_objcont.@info.295
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_234_pointsto_objcont_info_295 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<231,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_234_pointsto_objcont_info_295;
// -- Table: pointsto_objcont.@info.296
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_235_pointsto_objcont_info_296 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<232,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_235_pointsto_objcont_info_296;
// -- Table: pointsto_objcont.@info.297
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_236_pointsto_objcont_info_297 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<233,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_236_pointsto_objcont_info_297;
// -- Table: pointsto_objcont.@info.298
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_237_pointsto_objcont_info_298 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<234,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_237_pointsto_objcont_info_298;
// -- Table: pointsto_objcont.@info.299
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_238_pointsto_objcont_info_299 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<235,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_238_pointsto_objcont_info_299;
// -- Table: pointsto_objcont.@info.3
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_239_pointsto_objcont_info_3 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<236,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_239_pointsto_objcont_info_3;
// -- Table: pointsto_objcont.@info.30
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_240_pointsto_objcont_info_30 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<237,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_240_pointsto_objcont_info_30;
// -- Table: pointsto_objcont.@info.300
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_241_pointsto_objcont_info_300 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<238,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_241_pointsto_objcont_info_300;
// -- Table: pointsto_objcont.@info.301
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_242_pointsto_objcont_info_301 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<239,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_242_pointsto_objcont_info_301;
// -- Table: pointsto_objcont.@info.302
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_243_pointsto_objcont_info_302 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<240,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_243_pointsto_objcont_info_302;
// -- Table: pointsto_objcont.@info.303
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_244_pointsto_objcont_info_303 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<241,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_244_pointsto_objcont_info_303;
// -- Table: pointsto_objcont.@info.304
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_245_pointsto_objcont_info_304 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<242,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_245_pointsto_objcont_info_304;
// -- Table: pointsto_objcont.@info.305
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_246_pointsto_objcont_info_305 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<243,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_246_pointsto_objcont_info_305;
// -- Table: pointsto_objcont.@info.306
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_247_pointsto_objcont_info_306 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<244,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_247_pointsto_objcont_info_306;
// -- Table: pointsto_objcont.@info.307
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_248_pointsto_objcont_info_307 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<245,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_248_pointsto_objcont_info_307;
// -- Table: pointsto_objcont.@info.308
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_249_pointsto_objcont_info_308 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<246,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_249_pointsto_objcont_info_308;
// -- Table: pointsto_objcont.@info.309
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_250_pointsto_objcont_info_309 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<247,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_250_pointsto_objcont_info_309;
// -- Table: pointsto_objcont.@info.31
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_251_pointsto_objcont_info_31 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<248,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_251_pointsto_objcont_info_31;
// -- Table: pointsto_objcont.@info.310
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_252_pointsto_objcont_info_310 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<249,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_252_pointsto_objcont_info_310;
// -- Table: pointsto_objcont.@info.311
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_253_pointsto_objcont_info_311 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<250,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_253_pointsto_objcont_info_311;
// -- Table: pointsto_objcont.@info.312
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_254_pointsto_objcont_info_312 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<251,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_254_pointsto_objcont_info_312;
// -- Table: pointsto_objcont.@info.313
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_255_pointsto_objcont_info_313 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<252,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_255_pointsto_objcont_info_313;
// -- Table: pointsto_objcont.@info.314
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_256_pointsto_objcont_info_314 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<253,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_256_pointsto_objcont_info_314;
// -- Table: pointsto_objcont.@info.315
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_257_pointsto_objcont_info_315 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<254,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_257_pointsto_objcont_info_315;
// -- Table: pointsto_objcont.@info.316
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_258_pointsto_objcont_info_316 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<255,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_258_pointsto_objcont_info_316;
// -- Table: pointsto_objcont.@info.317
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_259_pointsto_objcont_info_317 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<256,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_259_pointsto_objcont_info_317;
// -- Table: pointsto_objcont.@info.318
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_260_pointsto_objcont_info_318 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<257,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_260_pointsto_objcont_info_318;
// -- Table: pointsto_objcont.@info.319
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_261_pointsto_objcont_info_319 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<258,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_261_pointsto_objcont_info_319;
// -- Table: pointsto_objcont.@info.32
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_262_pointsto_objcont_info_32 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<259,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_262_pointsto_objcont_info_32;
// -- Table: pointsto_objcont.@info.320
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_263_pointsto_objcont_info_320 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<260,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_263_pointsto_objcont_info_320;
// -- Table: pointsto_objcont.@info.321
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_264_pointsto_objcont_info_321 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<261,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_264_pointsto_objcont_info_321;
// -- Table: pointsto_objcont.@info.322
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_265_pointsto_objcont_info_322 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<262,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_265_pointsto_objcont_info_322;
// -- Table: pointsto_objcont.@info.323
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_266_pointsto_objcont_info_323 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<263,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_266_pointsto_objcont_info_323;
// -- Table: pointsto_objcont.@info.324
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_267_pointsto_objcont_info_324 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<264,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_267_pointsto_objcont_info_324;
// -- Table: pointsto_objcont.@info.325
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_268_pointsto_objcont_info_325 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<265,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_268_pointsto_objcont_info_325;
// -- Table: pointsto_objcont.@info.326
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_269_pointsto_objcont_info_326 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<266,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_269_pointsto_objcont_info_326;
// -- Table: pointsto_objcont.@info.327
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_270_pointsto_objcont_info_327 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<267,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_270_pointsto_objcont_info_327;
// -- Table: pointsto_objcont.@info.328
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_271_pointsto_objcont_info_328 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<268,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_271_pointsto_objcont_info_328;
// -- Table: pointsto_objcont.@info.329
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_272_pointsto_objcont_info_329 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<269,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_272_pointsto_objcont_info_329;
// -- Table: pointsto_objcont.@info.33
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_273_pointsto_objcont_info_33 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<270,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_273_pointsto_objcont_info_33;
// -- Table: pointsto_objcont.@info.330
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_274_pointsto_objcont_info_330 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<271,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_274_pointsto_objcont_info_330;
// -- Table: pointsto_objcont.@info.331
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_275_pointsto_objcont_info_331 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<272,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_275_pointsto_objcont_info_331;
// -- Table: pointsto_objcont.@info.332
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_276_pointsto_objcont_info_332 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<273,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_276_pointsto_objcont_info_332;
// -- Table: pointsto_objcont.@info.333
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_277_pointsto_objcont_info_333 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<274,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_277_pointsto_objcont_info_333;
// -- Table: pointsto_objcont.@info.334
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_278_pointsto_objcont_info_334 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<275,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_278_pointsto_objcont_info_334;
// -- Table: pointsto_objcont.@info.335
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_279_pointsto_objcont_info_335 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<276,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_279_pointsto_objcont_info_335;
// -- Table: pointsto_objcont.@info.336
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_280_pointsto_objcont_info_336 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<277,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_280_pointsto_objcont_info_336;
// -- Table: pointsto_objcont.@info.337
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_281_pointsto_objcont_info_337 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<278,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_281_pointsto_objcont_info_337;
// -- Table: pointsto_objcont.@info.338
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_282_pointsto_objcont_info_338 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<279,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_282_pointsto_objcont_info_338;
// -- Table: pointsto_objcont.@info.339
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_283_pointsto_objcont_info_339 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<280,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_283_pointsto_objcont_info_339;
// -- Table: pointsto_objcont.@info.34
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_284_pointsto_objcont_info_34 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<281,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_284_pointsto_objcont_info_34;
// -- Table: pointsto_objcont.@info.340
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_285_pointsto_objcont_info_340 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<282,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_285_pointsto_objcont_info_340;
// -- Table: pointsto_objcont.@info.341
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_286_pointsto_objcont_info_341 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<283,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_286_pointsto_objcont_info_341;
// -- Table: pointsto_objcont.@info.342
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_287_pointsto_objcont_info_342 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<284,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_287_pointsto_objcont_info_342;
// -- Table: pointsto_objcont.@info.343
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_288_pointsto_objcont_info_343 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<285,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_288_pointsto_objcont_info_343;
// -- Table: pointsto_objcont.@info.344
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_289_pointsto_objcont_info_344 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<286,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_289_pointsto_objcont_info_344;
// -- Table: pointsto_objcont.@info.345
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_290_pointsto_objcont_info_345 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<287,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_290_pointsto_objcont_info_345;
// -- Table: pointsto_objcont.@info.346
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_291_pointsto_objcont_info_346 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<288,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_291_pointsto_objcont_info_346;
// -- Table: pointsto_objcont.@info.347
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_292_pointsto_objcont_info_347 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<289,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_292_pointsto_objcont_info_347;
// -- Table: pointsto_objcont.@info.348
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_293_pointsto_objcont_info_348 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<290,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_293_pointsto_objcont_info_348;
// -- Table: pointsto_objcont.@info.349
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_294_pointsto_objcont_info_349 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<291,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_294_pointsto_objcont_info_349;
// -- Table: pointsto_objcont.@info.35
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_295_pointsto_objcont_info_35 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<292,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_295_pointsto_objcont_info_35;
// -- Table: pointsto_objcont.@info.350
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_296_pointsto_objcont_info_350 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<293,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_296_pointsto_objcont_info_350;
// -- Table: pointsto_objcont.@info.351
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_297_pointsto_objcont_info_351 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<294,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_297_pointsto_objcont_info_351;
// -- Table: pointsto_objcont.@info.352
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_298_pointsto_objcont_info_352 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<295,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_298_pointsto_objcont_info_352;
// -- Table: pointsto_objcont.@info.353
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_299_pointsto_objcont_info_353 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<296,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_299_pointsto_objcont_info_353;
// -- Table: pointsto_objcont.@info.354
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_300_pointsto_objcont_info_354 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<297,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_300_pointsto_objcont_info_354;
// -- Table: pointsto_objcont.@info.355
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_301_pointsto_objcont_info_355 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<298,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_301_pointsto_objcont_info_355;
// -- Table: pointsto_objcont.@info.356
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_302_pointsto_objcont_info_356 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<299,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_302_pointsto_objcont_info_356;
// -- Table: pointsto_objcont.@info.357
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_303_pointsto_objcont_info_357 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<300,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_303_pointsto_objcont_info_357;
// -- Table: pointsto_objcont.@info.358
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_304_pointsto_objcont_info_358 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<301,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_304_pointsto_objcont_info_358;
// -- Table: pointsto_objcont.@info.359
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_305_pointsto_objcont_info_359 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<302,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_305_pointsto_objcont_info_359;
// -- Table: pointsto_objcont.@info.36
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_306_pointsto_objcont_info_36 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<303,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_306_pointsto_objcont_info_36;
// -- Table: pointsto_objcont.@info.360
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_307_pointsto_objcont_info_360 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<304,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_307_pointsto_objcont_info_360;
// -- Table: pointsto_objcont.@info.361
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_308_pointsto_objcont_info_361 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<305,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_308_pointsto_objcont_info_361;
// -- Table: pointsto_objcont.@info.362
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_309_pointsto_objcont_info_362 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<306,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_309_pointsto_objcont_info_362;
// -- Table: pointsto_objcont.@info.363
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_310_pointsto_objcont_info_363 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<307,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_310_pointsto_objcont_info_363;
// -- Table: pointsto_objcont.@info.364
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_311_pointsto_objcont_info_364 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<308,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_311_pointsto_objcont_info_364;
// -- Table: pointsto_objcont.@info.365
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_312_pointsto_objcont_info_365 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<309,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_312_pointsto_objcont_info_365;
// -- Table: pointsto_objcont.@info.366
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_313_pointsto_objcont_info_366 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<310,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_313_pointsto_objcont_info_366;
// -- Table: pointsto_objcont.@info.367
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_314_pointsto_objcont_info_367 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<311,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_314_pointsto_objcont_info_367;
// -- Table: pointsto_objcont.@info.368
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_315_pointsto_objcont_info_368 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<312,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_315_pointsto_objcont_info_368;
// -- Table: pointsto_objcont.@info.369
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_316_pointsto_objcont_info_369 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<313,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_316_pointsto_objcont_info_369;
// -- Table: pointsto_objcont.@info.37
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_317_pointsto_objcont_info_37 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<314,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_317_pointsto_objcont_info_37;
// -- Table: pointsto_objcont.@info.370
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_318_pointsto_objcont_info_370 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<315,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_318_pointsto_objcont_info_370;
// -- Table: pointsto_objcont.@info.371
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_319_pointsto_objcont_info_371 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<316,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_319_pointsto_objcont_info_371;
// -- Table: pointsto_objcont.@info.372
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_320_pointsto_objcont_info_372 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<317,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_320_pointsto_objcont_info_372;
// -- Table: pointsto_objcont.@info.373
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_321_pointsto_objcont_info_373 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<318,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_321_pointsto_objcont_info_373;
// -- Table: pointsto_objcont.@info.374
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_322_pointsto_objcont_info_374 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<319,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_322_pointsto_objcont_info_374;
// -- Table: pointsto_objcont.@info.375
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_323_pointsto_objcont_info_375 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<320,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_323_pointsto_objcont_info_375;
// -- Table: pointsto_objcont.@info.376
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_324_pointsto_objcont_info_376 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<321,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_324_pointsto_objcont_info_376;
// -- Table: pointsto_objcont.@info.377
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_325_pointsto_objcont_info_377 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<322,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_325_pointsto_objcont_info_377;
// -- Table: pointsto_objcont.@info.378
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_326_pointsto_objcont_info_378 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<323,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_326_pointsto_objcont_info_378;
// -- Table: pointsto_objcont.@info.379
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_327_pointsto_objcont_info_379 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<324,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_327_pointsto_objcont_info_379;
// -- Table: pointsto_objcont.@info.38
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_328_pointsto_objcont_info_38 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<325,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_328_pointsto_objcont_info_38;
// -- Table: pointsto_objcont.@info.380
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_329_pointsto_objcont_info_380 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<326,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_329_pointsto_objcont_info_380;
// -- Table: pointsto_objcont.@info.381
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_330_pointsto_objcont_info_381 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<327,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_330_pointsto_objcont_info_381;
// -- Table: pointsto_objcont.@info.382
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_331_pointsto_objcont_info_382 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<328,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_331_pointsto_objcont_info_382;
// -- Table: pointsto_objcont.@info.383
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_332_pointsto_objcont_info_383 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<329,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_332_pointsto_objcont_info_383;
// -- Table: pointsto_objcont.@info.384
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_333_pointsto_objcont_info_384 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<330,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_333_pointsto_objcont_info_384;
// -- Table: pointsto_objcont.@info.385
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_334_pointsto_objcont_info_385 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<331,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_334_pointsto_objcont_info_385;
// -- Table: pointsto_objcont.@info.386
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_335_pointsto_objcont_info_386 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<332,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_335_pointsto_objcont_info_386;
// -- Table: pointsto_objcont.@info.387
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_336_pointsto_objcont_info_387 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<333,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_336_pointsto_objcont_info_387;
// -- Table: pointsto_objcont.@info.388
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_337_pointsto_objcont_info_388 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<334,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_337_pointsto_objcont_info_388;
// -- Table: pointsto_objcont.@info.389
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_338_pointsto_objcont_info_389 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<335,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_338_pointsto_objcont_info_389;
// -- Table: pointsto_objcont.@info.39
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_339_pointsto_objcont_info_39 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<336,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_339_pointsto_objcont_info_39;
// -- Table: pointsto_objcont.@info.390
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_340_pointsto_objcont_info_390 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<337,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_340_pointsto_objcont_info_390;
// -- Table: pointsto_objcont.@info.391
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_341_pointsto_objcont_info_391 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<338,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_341_pointsto_objcont_info_391;
// -- Table: pointsto_objcont.@info.392
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_342_pointsto_objcont_info_392 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<339,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_342_pointsto_objcont_info_392;
// -- Table: pointsto_objcont.@info.393
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_343_pointsto_objcont_info_393 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<340,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_343_pointsto_objcont_info_393;
// -- Table: pointsto_objcont.@info.394
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_344_pointsto_objcont_info_394 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<341,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_344_pointsto_objcont_info_394;
// -- Table: pointsto_objcont.@info.395
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_345_pointsto_objcont_info_395 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<342,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_345_pointsto_objcont_info_395;
// -- Table: pointsto_objcont.@info.396
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_346_pointsto_objcont_info_396 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<343,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_346_pointsto_objcont_info_396;
// -- Table: pointsto_objcont.@info.397
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_347_pointsto_objcont_info_397 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<344,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_347_pointsto_objcont_info_397;
// -- Table: pointsto_objcont.@info.398
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_348_pointsto_objcont_info_398 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<345,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_348_pointsto_objcont_info_398;
// -- Table: pointsto_objcont.@info.399
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_349_pointsto_objcont_info_399 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<346,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_349_pointsto_objcont_info_399;
// -- Table: pointsto_objcont.@info.4
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_350_pointsto_objcont_info_4 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<347,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_350_pointsto_objcont_info_4;
// -- Table: pointsto_objcont.@info.40
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_351_pointsto_objcont_info_40 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<348,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_351_pointsto_objcont_info_40;
// -- Table: pointsto_objcont.@info.400
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_352_pointsto_objcont_info_400 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<349,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_352_pointsto_objcont_info_400;
// -- Table: pointsto_objcont.@info.41
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_353_pointsto_objcont_info_41 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<350,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_353_pointsto_objcont_info_41;
// -- Table: pointsto_objcont.@info.42
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_354_pointsto_objcont_info_42 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<351,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_354_pointsto_objcont_info_42;
// -- Table: pointsto_objcont.@info.43
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_355_pointsto_objcont_info_43 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<352,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_355_pointsto_objcont_info_43;
// -- Table: pointsto_objcont.@info.44
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_356_pointsto_objcont_info_44 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<353,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_356_pointsto_objcont_info_44;
// -- Table: pointsto_objcont.@info.45
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_357_pointsto_objcont_info_45 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<354,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_357_pointsto_objcont_info_45;
// -- Table: pointsto_objcont.@info.46
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_358_pointsto_objcont_info_46 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<355,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_358_pointsto_objcont_info_46;
// -- Table: pointsto_objcont.@info.47
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_359_pointsto_objcont_info_47 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<356,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_359_pointsto_objcont_info_47;
// -- Table: pointsto_objcont.@info.48
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_360_pointsto_objcont_info_48 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<357,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_360_pointsto_objcont_info_48;
// -- Table: pointsto_objcont.@info.49
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_361_pointsto_objcont_info_49 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<358,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_361_pointsto_objcont_info_49;
// -- Table: pointsto_objcont.@info.5
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_362_pointsto_objcont_info_5 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<359,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_362_pointsto_objcont_info_5;
// -- Table: pointsto_objcont.@info.50
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_363_pointsto_objcont_info_50 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<360,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_363_pointsto_objcont_info_50;
// -- Table: pointsto_objcont.@info.51
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_364_pointsto_objcont_info_51 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<361,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_364_pointsto_objcont_info_51;
// -- Table: pointsto_objcont.@info.52
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_365_pointsto_objcont_info_52 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<362,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_365_pointsto_objcont_info_52;
// -- Table: pointsto_objcont.@info.53
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_366_pointsto_objcont_info_53 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<363,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_366_pointsto_objcont_info_53;
// -- Table: pointsto_objcont.@info.54
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_367_pointsto_objcont_info_54 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<364,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_367_pointsto_objcont_info_54;
// -- Table: pointsto_objcont.@info.55
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_368_pointsto_objcont_info_55 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<365,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_368_pointsto_objcont_info_55;
// -- Table: pointsto_objcont.@info.56
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_369_pointsto_objcont_info_56 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<366,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_369_pointsto_objcont_info_56;
// -- Table: pointsto_objcont.@info.57
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_370_pointsto_objcont_info_57 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<367,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_370_pointsto_objcont_info_57;
// -- Table: pointsto_objcont.@info.58
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_371_pointsto_objcont_info_58 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<368,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_371_pointsto_objcont_info_58;
// -- Table: pointsto_objcont.@info.59
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_372_pointsto_objcont_info_59 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<369,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_372_pointsto_objcont_info_59;
// -- Table: pointsto_objcont.@info.6
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_373_pointsto_objcont_info_6 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<370,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_373_pointsto_objcont_info_6;
// -- Table: pointsto_objcont.@info.60
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_374_pointsto_objcont_info_60 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<371,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_374_pointsto_objcont_info_60;
// -- Table: pointsto_objcont.@info.61
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_375_pointsto_objcont_info_61 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<372,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_375_pointsto_objcont_info_61;
// -- Table: pointsto_objcont.@info.62
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_376_pointsto_objcont_info_62 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<373,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_376_pointsto_objcont_info_62;
// -- Table: pointsto_objcont.@info.63
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_377_pointsto_objcont_info_63 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<374,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_377_pointsto_objcont_info_63;
// -- Table: pointsto_objcont.@info.64
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_378_pointsto_objcont_info_64 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<375,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_378_pointsto_objcont_info_64;
// -- Table: pointsto_objcont.@info.65
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_379_pointsto_objcont_info_65 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<376,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_379_pointsto_objcont_info_65;
// -- Table: pointsto_objcont.@info.66
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_380_pointsto_objcont_info_66 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<377,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_380_pointsto_objcont_info_66;
// -- Table: pointsto_objcont.@info.67
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_381_pointsto_objcont_info_67 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<378,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_381_pointsto_objcont_info_67;
// -- Table: pointsto_objcont.@info.68
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_382_pointsto_objcont_info_68 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<379,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_382_pointsto_objcont_info_68;
// -- Table: pointsto_objcont.@info.69
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_383_pointsto_objcont_info_69 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<380,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_383_pointsto_objcont_info_69;
// -- Table: pointsto_objcont.@info.7
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_384_pointsto_objcont_info_7 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<381,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_384_pointsto_objcont_info_7;
// -- Table: pointsto_objcont.@info.70
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_385_pointsto_objcont_info_70 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<382,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_385_pointsto_objcont_info_70;
// -- Table: pointsto_objcont.@info.71
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_386_pointsto_objcont_info_71 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<383,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_386_pointsto_objcont_info_71;
// -- Table: pointsto_objcont.@info.72
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_387_pointsto_objcont_info_72 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<384,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_387_pointsto_objcont_info_72;
// -- Table: pointsto_objcont.@info.73
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_388_pointsto_objcont_info_73 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<385,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_388_pointsto_objcont_info_73;
// -- Table: pointsto_objcont.@info.74
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_389_pointsto_objcont_info_74 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<386,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_389_pointsto_objcont_info_74;
// -- Table: pointsto_objcont.@info.75
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_390_pointsto_objcont_info_75 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<387,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_390_pointsto_objcont_info_75;
// -- Table: pointsto_objcont.@info.76
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_391_pointsto_objcont_info_76 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<388,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_391_pointsto_objcont_info_76;
// -- Table: pointsto_objcont.@info.77
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_392_pointsto_objcont_info_77 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<389,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_392_pointsto_objcont_info_77;
// -- Table: pointsto_objcont.@info.78
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_393_pointsto_objcont_info_78 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<390,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_393_pointsto_objcont_info_78;
// -- Table: pointsto_objcont.@info.79
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_394_pointsto_objcont_info_79 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<391,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_394_pointsto_objcont_info_79;
// -- Table: pointsto_objcont.@info.8
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_395_pointsto_objcont_info_8 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<392,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_395_pointsto_objcont_info_8;
// -- Table: pointsto_objcont.@info.80
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_396_pointsto_objcont_info_80 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<393,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_396_pointsto_objcont_info_80;
// -- Table: pointsto_objcont.@info.81
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_397_pointsto_objcont_info_81 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<394,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_397_pointsto_objcont_info_81;
// -- Table: pointsto_objcont.@info.82
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_398_pointsto_objcont_info_82 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<395,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_398_pointsto_objcont_info_82;
// -- Table: pointsto_objcont.@info.83
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_399_pointsto_objcont_info_83 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<396,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_399_pointsto_objcont_info_83;
// -- Table: pointsto_objcont.@info.84
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_400_pointsto_objcont_info_84 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<397,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_400_pointsto_objcont_info_84;
// -- Table: pointsto_objcont.@info.85
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_401_pointsto_objcont_info_85 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<398,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_401_pointsto_objcont_info_85;
// -- Table: pointsto_objcont.@info.86
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_402_pointsto_objcont_info_86 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<399,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_402_pointsto_objcont_info_86;
// -- Table: pointsto_objcont.@info.87
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_403_pointsto_objcont_info_87 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<400,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_403_pointsto_objcont_info_87;
// -- Table: pointsto_objcont.@info.88
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_404_pointsto_objcont_info_88 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<401,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_404_pointsto_objcont_info_88;
// -- Table: pointsto_objcont.@info.89
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_405_pointsto_objcont_info_89 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<402,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_405_pointsto_objcont_info_89;
// -- Table: pointsto_objcont.@info.9
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_406_pointsto_objcont_info_9 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<403,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_406_pointsto_objcont_info_9;
// -- Table: pointsto_objcont.@info.90
std::unique_ptr<t_btree_5__0_1_2_3_4__31> rel_407_pointsto_objcont_info_90 = std::make_unique<t_btree_5__0_1_2_3_4__31>();
souffle::RelationWrapper<404,t_btree_5__0_1_2_3_4__31,Tuple<RamDomain,5>,5> wrapper_rel_407_pointsto_objcont_info_90;
// -- Table: pointsto_objcont.@info.91
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_408_pointsto_objcont_info_91 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<405,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_408_pointsto_objcont_info_91;
// -- Table: pointsto_objcont.@info.92
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_409_pointsto_objcont_info_92 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<406,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_409_pointsto_objcont_info_92;
// -- Table: pointsto_objcont.@info.93
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_410_pointsto_objcont_info_93 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<407,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_410_pointsto_objcont_info_93;
// -- Table: pointsto_objcont.@info.94
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_411_pointsto_objcont_info_94 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<408,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_411_pointsto_objcont_info_94;
// -- Table: pointsto_objcont.@info.95
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_412_pointsto_objcont_info_95 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<409,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_412_pointsto_objcont_info_95;
// -- Table: pointsto_objcont.@info.96
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_413_pointsto_objcont_info_96 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<410,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_413_pointsto_objcont_info_96;
// -- Table: pointsto_objcont.@info.97
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_414_pointsto_objcont_info_97 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<411,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_414_pointsto_objcont_info_97;
// -- Table: pointsto_objcont.@info.98
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_415_pointsto_objcont_info_98 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<412,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_415_pointsto_objcont_info_98;
// -- Table: pointsto_objcont.@info.99
std::unique_ptr<t_btree_6__0_1_2_3_4_5__63> rel_416_pointsto_objcont_info_99 = std::make_unique<t_btree_6__0_1_2_3_4_5__63>();
souffle::RelationWrapper<413,t_btree_6__0_1_2_3_4_5__63,Tuple<RamDomain,6>,6> wrapper_rel_416_pointsto_objcont_info_99;
public:
Sf_souffle_small() : 
wrapper_rel_1_Rule(*rel_1_Rule,symTable,"Rule",std::array<const char *,3>{{"i:number","i:number","i:number"}},std::array<const char *,3>{{"v0","@rule_number","@level_number"}}),

wrapper_rel_2_actual(*rel_2_actual,symTable,"actual",std::array<const char *,5>{{"s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,5>{{"v0","v1","v2","@rule_number","@level_number"}}),

wrapper_rel_3_assign(*rel_3_assign,symTable,"assign",std::array<const char *,8>{{"s:V","s:V","s:V","s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,8>{{"v0","v1","v2","v3","v4","v5","@rule_number","@level_number"}}),

wrapper_rel_4_enclosing_type(*rel_4_enclosing_type,symTable,"enclosing_type",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_5_formal(*rel_5_formal,symTable,"formal",std::array<const char *,5>{{"s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,5>{{"v0","v1","v2","@rule_number","@level_number"}}),

wrapper_rel_6_heappointsto(*rel_6_heappointsto,symTable,"heappointsto",std::array<const char *,5>{{"s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,5>{{"v0","v1","v2","@rule_number","@level_number"}}),

wrapper_rel_7_invocation(*rel_7_invocation,symTable,"invocation",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_8_load(*rel_8_load,symTable,"load",std::array<const char *,5>{{"s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,5>{{"v0","v1","v2","@rule_number","@level_number"}}),

wrapper_rel_9_points_initial(*rel_9_points_initial,symTable,"points_initial",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_10_pointsto(*rel_10_pointsto,symTable,"pointsto",std::array<const char *,6>{{"s:V","s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,6>{{"v0","v1","v2","v3","@rule_number","@level_number"}}),

wrapper_rel_11_receiver_actual(*rel_11_receiver_actual,symTable,"receiver_actual",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_12_receiver_formal(*rel_12_receiver_formal,symTable,"receiver_formal",std::array<const char *,4>{{"s:V","s:V","i:number","i:number"}},std::array<const char *,4>{{"v0","v1","@rule_number","@level_number"}}),

wrapper_rel_13_store(*rel_13_store,symTable,"store",std::array<const char *,5>{{"s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,5>{{"v0","v1","v2","@rule_number","@level_number"}}),

wrapper_rel_14_pointsto_objcont(*rel_14_pointsto_objcont,symTable,"pointsto_objcont",std::array<const char *,5>{{"s:V","s:V","s:V","i:number","i:number"}},std::array<const char *,5>{{"v0","v1","v2","@rule_number","@level_number"}}),

wrapper_rel_17_pointsto_objcont_info_1(*rel_17_pointsto_objcont_info_1,symTable,"pointsto_objcont.@info.1",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_18_pointsto_objcont_info_10(*rel_18_pointsto_objcont_info_10,symTable,"pointsto_objcont.@info.10",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_19_pointsto_objcont_info_100(*rel_19_pointsto_objcont_info_100,symTable,"pointsto_objcont.@info.100",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_20_pointsto_objcont_info_101(*rel_20_pointsto_objcont_info_101,symTable,"pointsto_objcont.@info.101",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_21_pointsto_objcont_info_102(*rel_21_pointsto_objcont_info_102,symTable,"pointsto_objcont.@info.102",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_22_pointsto_objcont_info_103(*rel_22_pointsto_objcont_info_103,symTable,"pointsto_objcont.@info.103",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_23_pointsto_objcont_info_104(*rel_23_pointsto_objcont_info_104,symTable,"pointsto_objcont.@info.104",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_24_pointsto_objcont_info_105(*rel_24_pointsto_objcont_info_105,symTable,"pointsto_objcont.@info.105",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_25_pointsto_objcont_info_106(*rel_25_pointsto_objcont_info_106,symTable,"pointsto_objcont.@info.106",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_26_pointsto_objcont_info_107(*rel_26_pointsto_objcont_info_107,symTable,"pointsto_objcont.@info.107",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_27_pointsto_objcont_info_108(*rel_27_pointsto_objcont_info_108,symTable,"pointsto_objcont.@info.108",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_28_pointsto_objcont_info_109(*rel_28_pointsto_objcont_info_109,symTable,"pointsto_objcont.@info.109",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_29_pointsto_objcont_info_11(*rel_29_pointsto_objcont_info_11,symTable,"pointsto_objcont.@info.11",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_30_pointsto_objcont_info_110(*rel_30_pointsto_objcont_info_110,symTable,"pointsto_objcont.@info.110",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_31_pointsto_objcont_info_111(*rel_31_pointsto_objcont_info_111,symTable,"pointsto_objcont.@info.111",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_32_pointsto_objcont_info_112(*rel_32_pointsto_objcont_info_112,symTable,"pointsto_objcont.@info.112",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_33_pointsto_objcont_info_113(*rel_33_pointsto_objcont_info_113,symTable,"pointsto_objcont.@info.113",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_34_pointsto_objcont_info_114(*rel_34_pointsto_objcont_info_114,symTable,"pointsto_objcont.@info.114",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_35_pointsto_objcont_info_115(*rel_35_pointsto_objcont_info_115,symTable,"pointsto_objcont.@info.115",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_36_pointsto_objcont_info_116(*rel_36_pointsto_objcont_info_116,symTable,"pointsto_objcont.@info.116",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_37_pointsto_objcont_info_117(*rel_37_pointsto_objcont_info_117,symTable,"pointsto_objcont.@info.117",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_38_pointsto_objcont_info_118(*rel_38_pointsto_objcont_info_118,symTable,"pointsto_objcont.@info.118",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_39_pointsto_objcont_info_119(*rel_39_pointsto_objcont_info_119,symTable,"pointsto_objcont.@info.119",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_40_pointsto_objcont_info_12(*rel_40_pointsto_objcont_info_12,symTable,"pointsto_objcont.@info.12",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_41_pointsto_objcont_info_120(*rel_41_pointsto_objcont_info_120,symTable,"pointsto_objcont.@info.120",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_42_pointsto_objcont_info_121(*rel_42_pointsto_objcont_info_121,symTable,"pointsto_objcont.@info.121",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_43_pointsto_objcont_info_122(*rel_43_pointsto_objcont_info_122,symTable,"pointsto_objcont.@info.122",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_44_pointsto_objcont_info_123(*rel_44_pointsto_objcont_info_123,symTable,"pointsto_objcont.@info.123",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_45_pointsto_objcont_info_124(*rel_45_pointsto_objcont_info_124,symTable,"pointsto_objcont.@info.124",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_46_pointsto_objcont_info_125(*rel_46_pointsto_objcont_info_125,symTable,"pointsto_objcont.@info.125",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_47_pointsto_objcont_info_126(*rel_47_pointsto_objcont_info_126,symTable,"pointsto_objcont.@info.126",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_48_pointsto_objcont_info_127(*rel_48_pointsto_objcont_info_127,symTable,"pointsto_objcont.@info.127",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_49_pointsto_objcont_info_128(*rel_49_pointsto_objcont_info_128,symTable,"pointsto_objcont.@info.128",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_50_pointsto_objcont_info_129(*rel_50_pointsto_objcont_info_129,symTable,"pointsto_objcont.@info.129",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_51_pointsto_objcont_info_13(*rel_51_pointsto_objcont_info_13,symTable,"pointsto_objcont.@info.13",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_52_pointsto_objcont_info_130(*rel_52_pointsto_objcont_info_130,symTable,"pointsto_objcont.@info.130",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_53_pointsto_objcont_info_131(*rel_53_pointsto_objcont_info_131,symTable,"pointsto_objcont.@info.131",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_54_pointsto_objcont_info_132(*rel_54_pointsto_objcont_info_132,symTable,"pointsto_objcont.@info.132",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_55_pointsto_objcont_info_133(*rel_55_pointsto_objcont_info_133,symTable,"pointsto_objcont.@info.133",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_56_pointsto_objcont_info_134(*rel_56_pointsto_objcont_info_134,symTable,"pointsto_objcont.@info.134",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_57_pointsto_objcont_info_135(*rel_57_pointsto_objcont_info_135,symTable,"pointsto_objcont.@info.135",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_58_pointsto_objcont_info_136(*rel_58_pointsto_objcont_info_136,symTable,"pointsto_objcont.@info.136",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_59_pointsto_objcont_info_137(*rel_59_pointsto_objcont_info_137,symTable,"pointsto_objcont.@info.137",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_60_pointsto_objcont_info_138(*rel_60_pointsto_objcont_info_138,symTable,"pointsto_objcont.@info.138",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_61_pointsto_objcont_info_139(*rel_61_pointsto_objcont_info_139,symTable,"pointsto_objcont.@info.139",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_62_pointsto_objcont_info_14(*rel_62_pointsto_objcont_info_14,symTable,"pointsto_objcont.@info.14",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_63_pointsto_objcont_info_140(*rel_63_pointsto_objcont_info_140,symTable,"pointsto_objcont.@info.140",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_64_pointsto_objcont_info_141(*rel_64_pointsto_objcont_info_141,symTable,"pointsto_objcont.@info.141",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_65_pointsto_objcont_info_142(*rel_65_pointsto_objcont_info_142,symTable,"pointsto_objcont.@info.142",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_66_pointsto_objcont_info_143(*rel_66_pointsto_objcont_info_143,symTable,"pointsto_objcont.@info.143",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_67_pointsto_objcont_info_144(*rel_67_pointsto_objcont_info_144,symTable,"pointsto_objcont.@info.144",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_68_pointsto_objcont_info_145(*rel_68_pointsto_objcont_info_145,symTable,"pointsto_objcont.@info.145",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_69_pointsto_objcont_info_146(*rel_69_pointsto_objcont_info_146,symTable,"pointsto_objcont.@info.146",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_70_pointsto_objcont_info_147(*rel_70_pointsto_objcont_info_147,symTable,"pointsto_objcont.@info.147",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_71_pointsto_objcont_info_148(*rel_71_pointsto_objcont_info_148,symTable,"pointsto_objcont.@info.148",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_72_pointsto_objcont_info_149(*rel_72_pointsto_objcont_info_149,symTable,"pointsto_objcont.@info.149",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_73_pointsto_objcont_info_15(*rel_73_pointsto_objcont_info_15,symTable,"pointsto_objcont.@info.15",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_74_pointsto_objcont_info_150(*rel_74_pointsto_objcont_info_150,symTable,"pointsto_objcont.@info.150",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_75_pointsto_objcont_info_151(*rel_75_pointsto_objcont_info_151,symTable,"pointsto_objcont.@info.151",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_76_pointsto_objcont_info_152(*rel_76_pointsto_objcont_info_152,symTable,"pointsto_objcont.@info.152",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_77_pointsto_objcont_info_153(*rel_77_pointsto_objcont_info_153,symTable,"pointsto_objcont.@info.153",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_78_pointsto_objcont_info_154(*rel_78_pointsto_objcont_info_154,symTable,"pointsto_objcont.@info.154",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_79_pointsto_objcont_info_155(*rel_79_pointsto_objcont_info_155,symTable,"pointsto_objcont.@info.155",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_80_pointsto_objcont_info_156(*rel_80_pointsto_objcont_info_156,symTable,"pointsto_objcont.@info.156",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_81_pointsto_objcont_info_157(*rel_81_pointsto_objcont_info_157,symTable,"pointsto_objcont.@info.157",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_82_pointsto_objcont_info_158(*rel_82_pointsto_objcont_info_158,symTable,"pointsto_objcont.@info.158",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_83_pointsto_objcont_info_159(*rel_83_pointsto_objcont_info_159,symTable,"pointsto_objcont.@info.159",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_84_pointsto_objcont_info_16(*rel_84_pointsto_objcont_info_16,symTable,"pointsto_objcont.@info.16",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_85_pointsto_objcont_info_160(*rel_85_pointsto_objcont_info_160,symTable,"pointsto_objcont.@info.160",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_86_pointsto_objcont_info_161(*rel_86_pointsto_objcont_info_161,symTable,"pointsto_objcont.@info.161",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_87_pointsto_objcont_info_162(*rel_87_pointsto_objcont_info_162,symTable,"pointsto_objcont.@info.162",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_88_pointsto_objcont_info_163(*rel_88_pointsto_objcont_info_163,symTable,"pointsto_objcont.@info.163",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_89_pointsto_objcont_info_164(*rel_89_pointsto_objcont_info_164,symTable,"pointsto_objcont.@info.164",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_90_pointsto_objcont_info_165(*rel_90_pointsto_objcont_info_165,symTable,"pointsto_objcont.@info.165",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_91_pointsto_objcont_info_166(*rel_91_pointsto_objcont_info_166,symTable,"pointsto_objcont.@info.166",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_92_pointsto_objcont_info_167(*rel_92_pointsto_objcont_info_167,symTable,"pointsto_objcont.@info.167",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_93_pointsto_objcont_info_168(*rel_93_pointsto_objcont_info_168,symTable,"pointsto_objcont.@info.168",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_94_pointsto_objcont_info_169(*rel_94_pointsto_objcont_info_169,symTable,"pointsto_objcont.@info.169",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_95_pointsto_objcont_info_17(*rel_95_pointsto_objcont_info_17,symTable,"pointsto_objcont.@info.17",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_96_pointsto_objcont_info_170(*rel_96_pointsto_objcont_info_170,symTable,"pointsto_objcont.@info.170",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_97_pointsto_objcont_info_171(*rel_97_pointsto_objcont_info_171,symTable,"pointsto_objcont.@info.171",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_98_pointsto_objcont_info_172(*rel_98_pointsto_objcont_info_172,symTable,"pointsto_objcont.@info.172",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_99_pointsto_objcont_info_173(*rel_99_pointsto_objcont_info_173,symTable,"pointsto_objcont.@info.173",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_100_pointsto_objcont_info_174(*rel_100_pointsto_objcont_info_174,symTable,"pointsto_objcont.@info.174",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_101_pointsto_objcont_info_175(*rel_101_pointsto_objcont_info_175,symTable,"pointsto_objcont.@info.175",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_102_pointsto_objcont_info_176(*rel_102_pointsto_objcont_info_176,symTable,"pointsto_objcont.@info.176",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_103_pointsto_objcont_info_177(*rel_103_pointsto_objcont_info_177,symTable,"pointsto_objcont.@info.177",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_104_pointsto_objcont_info_178(*rel_104_pointsto_objcont_info_178,symTable,"pointsto_objcont.@info.178",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_105_pointsto_objcont_info_179(*rel_105_pointsto_objcont_info_179,symTable,"pointsto_objcont.@info.179",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_106_pointsto_objcont_info_18(*rel_106_pointsto_objcont_info_18,symTable,"pointsto_objcont.@info.18",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_107_pointsto_objcont_info_180(*rel_107_pointsto_objcont_info_180,symTable,"pointsto_objcont.@info.180",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_108_pointsto_objcont_info_181(*rel_108_pointsto_objcont_info_181,symTable,"pointsto_objcont.@info.181",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_109_pointsto_objcont_info_182(*rel_109_pointsto_objcont_info_182,symTable,"pointsto_objcont.@info.182",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_110_pointsto_objcont_info_183(*rel_110_pointsto_objcont_info_183,symTable,"pointsto_objcont.@info.183",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_111_pointsto_objcont_info_184(*rel_111_pointsto_objcont_info_184,symTable,"pointsto_objcont.@info.184",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_112_pointsto_objcont_info_185(*rel_112_pointsto_objcont_info_185,symTable,"pointsto_objcont.@info.185",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_113_pointsto_objcont_info_186(*rel_113_pointsto_objcont_info_186,symTable,"pointsto_objcont.@info.186",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_114_pointsto_objcont_info_187(*rel_114_pointsto_objcont_info_187,symTable,"pointsto_objcont.@info.187",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_115_pointsto_objcont_info_188(*rel_115_pointsto_objcont_info_188,symTable,"pointsto_objcont.@info.188",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_116_pointsto_objcont_info_189(*rel_116_pointsto_objcont_info_189,symTable,"pointsto_objcont.@info.189",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_117_pointsto_objcont_info_19(*rel_117_pointsto_objcont_info_19,symTable,"pointsto_objcont.@info.19",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_118_pointsto_objcont_info_190(*rel_118_pointsto_objcont_info_190,symTable,"pointsto_objcont.@info.190",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_119_pointsto_objcont_info_191(*rel_119_pointsto_objcont_info_191,symTable,"pointsto_objcont.@info.191",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_120_pointsto_objcont_info_192(*rel_120_pointsto_objcont_info_192,symTable,"pointsto_objcont.@info.192",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_121_pointsto_objcont_info_193(*rel_121_pointsto_objcont_info_193,symTable,"pointsto_objcont.@info.193",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_122_pointsto_objcont_info_194(*rel_122_pointsto_objcont_info_194,symTable,"pointsto_objcont.@info.194",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_123_pointsto_objcont_info_195(*rel_123_pointsto_objcont_info_195,symTable,"pointsto_objcont.@info.195",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_124_pointsto_objcont_info_196(*rel_124_pointsto_objcont_info_196,symTable,"pointsto_objcont.@info.196",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_125_pointsto_objcont_info_197(*rel_125_pointsto_objcont_info_197,symTable,"pointsto_objcont.@info.197",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_126_pointsto_objcont_info_198(*rel_126_pointsto_objcont_info_198,symTable,"pointsto_objcont.@info.198",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_127_pointsto_objcont_info_199(*rel_127_pointsto_objcont_info_199,symTable,"pointsto_objcont.@info.199",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_128_pointsto_objcont_info_2(*rel_128_pointsto_objcont_info_2,symTable,"pointsto_objcont.@info.2",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_129_pointsto_objcont_info_20(*rel_129_pointsto_objcont_info_20,symTable,"pointsto_objcont.@info.20",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_130_pointsto_objcont_info_200(*rel_130_pointsto_objcont_info_200,symTable,"pointsto_objcont.@info.200",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_131_pointsto_objcont_info_201(*rel_131_pointsto_objcont_info_201,symTable,"pointsto_objcont.@info.201",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_132_pointsto_objcont_info_202(*rel_132_pointsto_objcont_info_202,symTable,"pointsto_objcont.@info.202",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_133_pointsto_objcont_info_203(*rel_133_pointsto_objcont_info_203,symTable,"pointsto_objcont.@info.203",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_134_pointsto_objcont_info_204(*rel_134_pointsto_objcont_info_204,symTable,"pointsto_objcont.@info.204",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_135_pointsto_objcont_info_205(*rel_135_pointsto_objcont_info_205,symTable,"pointsto_objcont.@info.205",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_136_pointsto_objcont_info_206(*rel_136_pointsto_objcont_info_206,symTable,"pointsto_objcont.@info.206",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_137_pointsto_objcont_info_207(*rel_137_pointsto_objcont_info_207,symTable,"pointsto_objcont.@info.207",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_138_pointsto_objcont_info_208(*rel_138_pointsto_objcont_info_208,symTable,"pointsto_objcont.@info.208",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_139_pointsto_objcont_info_209(*rel_139_pointsto_objcont_info_209,symTable,"pointsto_objcont.@info.209",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_140_pointsto_objcont_info_21(*rel_140_pointsto_objcont_info_21,symTable,"pointsto_objcont.@info.21",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_141_pointsto_objcont_info_210(*rel_141_pointsto_objcont_info_210,symTable,"pointsto_objcont.@info.210",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_142_pointsto_objcont_info_211(*rel_142_pointsto_objcont_info_211,symTable,"pointsto_objcont.@info.211",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_143_pointsto_objcont_info_212(*rel_143_pointsto_objcont_info_212,symTable,"pointsto_objcont.@info.212",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_144_pointsto_objcont_info_213(*rel_144_pointsto_objcont_info_213,symTable,"pointsto_objcont.@info.213",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_145_pointsto_objcont_info_214(*rel_145_pointsto_objcont_info_214,symTable,"pointsto_objcont.@info.214",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_146_pointsto_objcont_info_215(*rel_146_pointsto_objcont_info_215,symTable,"pointsto_objcont.@info.215",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_147_pointsto_objcont_info_216(*rel_147_pointsto_objcont_info_216,symTable,"pointsto_objcont.@info.216",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_148_pointsto_objcont_info_217(*rel_148_pointsto_objcont_info_217,symTable,"pointsto_objcont.@info.217",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_149_pointsto_objcont_info_218(*rel_149_pointsto_objcont_info_218,symTable,"pointsto_objcont.@info.218",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_150_pointsto_objcont_info_219(*rel_150_pointsto_objcont_info_219,symTable,"pointsto_objcont.@info.219",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_151_pointsto_objcont_info_22(*rel_151_pointsto_objcont_info_22,symTable,"pointsto_objcont.@info.22",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_152_pointsto_objcont_info_220(*rel_152_pointsto_objcont_info_220,symTable,"pointsto_objcont.@info.220",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_153_pointsto_objcont_info_221(*rel_153_pointsto_objcont_info_221,symTable,"pointsto_objcont.@info.221",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_154_pointsto_objcont_info_222(*rel_154_pointsto_objcont_info_222,symTable,"pointsto_objcont.@info.222",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_155_pointsto_objcont_info_223(*rel_155_pointsto_objcont_info_223,symTable,"pointsto_objcont.@info.223",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_156_pointsto_objcont_info_224(*rel_156_pointsto_objcont_info_224,symTable,"pointsto_objcont.@info.224",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_157_pointsto_objcont_info_225(*rel_157_pointsto_objcont_info_225,symTable,"pointsto_objcont.@info.225",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_158_pointsto_objcont_info_226(*rel_158_pointsto_objcont_info_226,symTable,"pointsto_objcont.@info.226",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_159_pointsto_objcont_info_227(*rel_159_pointsto_objcont_info_227,symTable,"pointsto_objcont.@info.227",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_160_pointsto_objcont_info_228(*rel_160_pointsto_objcont_info_228,symTable,"pointsto_objcont.@info.228",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_161_pointsto_objcont_info_229(*rel_161_pointsto_objcont_info_229,symTable,"pointsto_objcont.@info.229",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_162_pointsto_objcont_info_23(*rel_162_pointsto_objcont_info_23,symTable,"pointsto_objcont.@info.23",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_163_pointsto_objcont_info_230(*rel_163_pointsto_objcont_info_230,symTable,"pointsto_objcont.@info.230",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_164_pointsto_objcont_info_231(*rel_164_pointsto_objcont_info_231,symTable,"pointsto_objcont.@info.231",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_165_pointsto_objcont_info_232(*rel_165_pointsto_objcont_info_232,symTable,"pointsto_objcont.@info.232",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_166_pointsto_objcont_info_233(*rel_166_pointsto_objcont_info_233,symTable,"pointsto_objcont.@info.233",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_167_pointsto_objcont_info_234(*rel_167_pointsto_objcont_info_234,symTable,"pointsto_objcont.@info.234",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_168_pointsto_objcont_info_235(*rel_168_pointsto_objcont_info_235,symTable,"pointsto_objcont.@info.235",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_169_pointsto_objcont_info_236(*rel_169_pointsto_objcont_info_236,symTable,"pointsto_objcont.@info.236",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_170_pointsto_objcont_info_237(*rel_170_pointsto_objcont_info_237,symTable,"pointsto_objcont.@info.237",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_171_pointsto_objcont_info_238(*rel_171_pointsto_objcont_info_238,symTable,"pointsto_objcont.@info.238",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_172_pointsto_objcont_info_239(*rel_172_pointsto_objcont_info_239,symTable,"pointsto_objcont.@info.239",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_173_pointsto_objcont_info_24(*rel_173_pointsto_objcont_info_24,symTable,"pointsto_objcont.@info.24",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_174_pointsto_objcont_info_240(*rel_174_pointsto_objcont_info_240,symTable,"pointsto_objcont.@info.240",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_175_pointsto_objcont_info_241(*rel_175_pointsto_objcont_info_241,symTable,"pointsto_objcont.@info.241",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_176_pointsto_objcont_info_242(*rel_176_pointsto_objcont_info_242,symTable,"pointsto_objcont.@info.242",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_177_pointsto_objcont_info_243(*rel_177_pointsto_objcont_info_243,symTable,"pointsto_objcont.@info.243",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_178_pointsto_objcont_info_244(*rel_178_pointsto_objcont_info_244,symTable,"pointsto_objcont.@info.244",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_179_pointsto_objcont_info_245(*rel_179_pointsto_objcont_info_245,symTable,"pointsto_objcont.@info.245",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_180_pointsto_objcont_info_246(*rel_180_pointsto_objcont_info_246,symTable,"pointsto_objcont.@info.246",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_181_pointsto_objcont_info_247(*rel_181_pointsto_objcont_info_247,symTable,"pointsto_objcont.@info.247",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_182_pointsto_objcont_info_248(*rel_182_pointsto_objcont_info_248,symTable,"pointsto_objcont.@info.248",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_183_pointsto_objcont_info_249(*rel_183_pointsto_objcont_info_249,symTable,"pointsto_objcont.@info.249",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_184_pointsto_objcont_info_25(*rel_184_pointsto_objcont_info_25,symTable,"pointsto_objcont.@info.25",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_185_pointsto_objcont_info_250(*rel_185_pointsto_objcont_info_250,symTable,"pointsto_objcont.@info.250",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_186_pointsto_objcont_info_251(*rel_186_pointsto_objcont_info_251,symTable,"pointsto_objcont.@info.251",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_187_pointsto_objcont_info_252(*rel_187_pointsto_objcont_info_252,symTable,"pointsto_objcont.@info.252",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_188_pointsto_objcont_info_253(*rel_188_pointsto_objcont_info_253,symTable,"pointsto_objcont.@info.253",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_189_pointsto_objcont_info_254(*rel_189_pointsto_objcont_info_254,symTable,"pointsto_objcont.@info.254",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_190_pointsto_objcont_info_255(*rel_190_pointsto_objcont_info_255,symTable,"pointsto_objcont.@info.255",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_191_pointsto_objcont_info_256(*rel_191_pointsto_objcont_info_256,symTable,"pointsto_objcont.@info.256",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_192_pointsto_objcont_info_257(*rel_192_pointsto_objcont_info_257,symTable,"pointsto_objcont.@info.257",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_193_pointsto_objcont_info_258(*rel_193_pointsto_objcont_info_258,symTable,"pointsto_objcont.@info.258",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_194_pointsto_objcont_info_259(*rel_194_pointsto_objcont_info_259,symTable,"pointsto_objcont.@info.259",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_195_pointsto_objcont_info_26(*rel_195_pointsto_objcont_info_26,symTable,"pointsto_objcont.@info.26",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_196_pointsto_objcont_info_260(*rel_196_pointsto_objcont_info_260,symTable,"pointsto_objcont.@info.260",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_197_pointsto_objcont_info_261(*rel_197_pointsto_objcont_info_261,symTable,"pointsto_objcont.@info.261",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_198_pointsto_objcont_info_262(*rel_198_pointsto_objcont_info_262,symTable,"pointsto_objcont.@info.262",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_199_pointsto_objcont_info_263(*rel_199_pointsto_objcont_info_263,symTable,"pointsto_objcont.@info.263",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_200_pointsto_objcont_info_264(*rel_200_pointsto_objcont_info_264,symTable,"pointsto_objcont.@info.264",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_201_pointsto_objcont_info_265(*rel_201_pointsto_objcont_info_265,symTable,"pointsto_objcont.@info.265",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_202_pointsto_objcont_info_266(*rel_202_pointsto_objcont_info_266,symTable,"pointsto_objcont.@info.266",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_203_pointsto_objcont_info_267(*rel_203_pointsto_objcont_info_267,symTable,"pointsto_objcont.@info.267",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_204_pointsto_objcont_info_268(*rel_204_pointsto_objcont_info_268,symTable,"pointsto_objcont.@info.268",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_205_pointsto_objcont_info_269(*rel_205_pointsto_objcont_info_269,symTable,"pointsto_objcont.@info.269",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_206_pointsto_objcont_info_27(*rel_206_pointsto_objcont_info_27,symTable,"pointsto_objcont.@info.27",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_207_pointsto_objcont_info_270(*rel_207_pointsto_objcont_info_270,symTable,"pointsto_objcont.@info.270",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_208_pointsto_objcont_info_271(*rel_208_pointsto_objcont_info_271,symTable,"pointsto_objcont.@info.271",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_209_pointsto_objcont_info_272(*rel_209_pointsto_objcont_info_272,symTable,"pointsto_objcont.@info.272",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_210_pointsto_objcont_info_273(*rel_210_pointsto_objcont_info_273,symTable,"pointsto_objcont.@info.273",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_211_pointsto_objcont_info_274(*rel_211_pointsto_objcont_info_274,symTable,"pointsto_objcont.@info.274",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_212_pointsto_objcont_info_275(*rel_212_pointsto_objcont_info_275,symTable,"pointsto_objcont.@info.275",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_213_pointsto_objcont_info_276(*rel_213_pointsto_objcont_info_276,symTable,"pointsto_objcont.@info.276",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_214_pointsto_objcont_info_277(*rel_214_pointsto_objcont_info_277,symTable,"pointsto_objcont.@info.277",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_215_pointsto_objcont_info_278(*rel_215_pointsto_objcont_info_278,symTable,"pointsto_objcont.@info.278",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_216_pointsto_objcont_info_279(*rel_216_pointsto_objcont_info_279,symTable,"pointsto_objcont.@info.279",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_217_pointsto_objcont_info_28(*rel_217_pointsto_objcont_info_28,symTable,"pointsto_objcont.@info.28",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_218_pointsto_objcont_info_280(*rel_218_pointsto_objcont_info_280,symTable,"pointsto_objcont.@info.280",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_219_pointsto_objcont_info_281(*rel_219_pointsto_objcont_info_281,symTable,"pointsto_objcont.@info.281",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_220_pointsto_objcont_info_282(*rel_220_pointsto_objcont_info_282,symTable,"pointsto_objcont.@info.282",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_221_pointsto_objcont_info_283(*rel_221_pointsto_objcont_info_283,symTable,"pointsto_objcont.@info.283",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_222_pointsto_objcont_info_284(*rel_222_pointsto_objcont_info_284,symTable,"pointsto_objcont.@info.284",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_223_pointsto_objcont_info_285(*rel_223_pointsto_objcont_info_285,symTable,"pointsto_objcont.@info.285",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_224_pointsto_objcont_info_286(*rel_224_pointsto_objcont_info_286,symTable,"pointsto_objcont.@info.286",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_225_pointsto_objcont_info_287(*rel_225_pointsto_objcont_info_287,symTable,"pointsto_objcont.@info.287",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_226_pointsto_objcont_info_288(*rel_226_pointsto_objcont_info_288,symTable,"pointsto_objcont.@info.288",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_227_pointsto_objcont_info_289(*rel_227_pointsto_objcont_info_289,symTable,"pointsto_objcont.@info.289",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_228_pointsto_objcont_info_29(*rel_228_pointsto_objcont_info_29,symTable,"pointsto_objcont.@info.29",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_229_pointsto_objcont_info_290(*rel_229_pointsto_objcont_info_290,symTable,"pointsto_objcont.@info.290",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_230_pointsto_objcont_info_291(*rel_230_pointsto_objcont_info_291,symTable,"pointsto_objcont.@info.291",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_231_pointsto_objcont_info_292(*rel_231_pointsto_objcont_info_292,symTable,"pointsto_objcont.@info.292",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_232_pointsto_objcont_info_293(*rel_232_pointsto_objcont_info_293,symTable,"pointsto_objcont.@info.293",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_233_pointsto_objcont_info_294(*rel_233_pointsto_objcont_info_294,symTable,"pointsto_objcont.@info.294",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_234_pointsto_objcont_info_295(*rel_234_pointsto_objcont_info_295,symTable,"pointsto_objcont.@info.295",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_235_pointsto_objcont_info_296(*rel_235_pointsto_objcont_info_296,symTable,"pointsto_objcont.@info.296",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_236_pointsto_objcont_info_297(*rel_236_pointsto_objcont_info_297,symTable,"pointsto_objcont.@info.297",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_237_pointsto_objcont_info_298(*rel_237_pointsto_objcont_info_298,symTable,"pointsto_objcont.@info.298",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_238_pointsto_objcont_info_299(*rel_238_pointsto_objcont_info_299,symTable,"pointsto_objcont.@info.299",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_239_pointsto_objcont_info_3(*rel_239_pointsto_objcont_info_3,symTable,"pointsto_objcont.@info.3",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_240_pointsto_objcont_info_30(*rel_240_pointsto_objcont_info_30,symTable,"pointsto_objcont.@info.30",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_241_pointsto_objcont_info_300(*rel_241_pointsto_objcont_info_300,symTable,"pointsto_objcont.@info.300",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_242_pointsto_objcont_info_301(*rel_242_pointsto_objcont_info_301,symTable,"pointsto_objcont.@info.301",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_243_pointsto_objcont_info_302(*rel_243_pointsto_objcont_info_302,symTable,"pointsto_objcont.@info.302",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_244_pointsto_objcont_info_303(*rel_244_pointsto_objcont_info_303,symTable,"pointsto_objcont.@info.303",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_245_pointsto_objcont_info_304(*rel_245_pointsto_objcont_info_304,symTable,"pointsto_objcont.@info.304",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_246_pointsto_objcont_info_305(*rel_246_pointsto_objcont_info_305,symTable,"pointsto_objcont.@info.305",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_247_pointsto_objcont_info_306(*rel_247_pointsto_objcont_info_306,symTable,"pointsto_objcont.@info.306",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_248_pointsto_objcont_info_307(*rel_248_pointsto_objcont_info_307,symTable,"pointsto_objcont.@info.307",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_249_pointsto_objcont_info_308(*rel_249_pointsto_objcont_info_308,symTable,"pointsto_objcont.@info.308",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_250_pointsto_objcont_info_309(*rel_250_pointsto_objcont_info_309,symTable,"pointsto_objcont.@info.309",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_251_pointsto_objcont_info_31(*rel_251_pointsto_objcont_info_31,symTable,"pointsto_objcont.@info.31",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_252_pointsto_objcont_info_310(*rel_252_pointsto_objcont_info_310,symTable,"pointsto_objcont.@info.310",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_253_pointsto_objcont_info_311(*rel_253_pointsto_objcont_info_311,symTable,"pointsto_objcont.@info.311",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_254_pointsto_objcont_info_312(*rel_254_pointsto_objcont_info_312,symTable,"pointsto_objcont.@info.312",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_255_pointsto_objcont_info_313(*rel_255_pointsto_objcont_info_313,symTable,"pointsto_objcont.@info.313",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_256_pointsto_objcont_info_314(*rel_256_pointsto_objcont_info_314,symTable,"pointsto_objcont.@info.314",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_257_pointsto_objcont_info_315(*rel_257_pointsto_objcont_info_315,symTable,"pointsto_objcont.@info.315",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_258_pointsto_objcont_info_316(*rel_258_pointsto_objcont_info_316,symTable,"pointsto_objcont.@info.316",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_259_pointsto_objcont_info_317(*rel_259_pointsto_objcont_info_317,symTable,"pointsto_objcont.@info.317",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_260_pointsto_objcont_info_318(*rel_260_pointsto_objcont_info_318,symTable,"pointsto_objcont.@info.318",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_261_pointsto_objcont_info_319(*rel_261_pointsto_objcont_info_319,symTable,"pointsto_objcont.@info.319",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_262_pointsto_objcont_info_32(*rel_262_pointsto_objcont_info_32,symTable,"pointsto_objcont.@info.32",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_263_pointsto_objcont_info_320(*rel_263_pointsto_objcont_info_320,symTable,"pointsto_objcont.@info.320",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_264_pointsto_objcont_info_321(*rel_264_pointsto_objcont_info_321,symTable,"pointsto_objcont.@info.321",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_265_pointsto_objcont_info_322(*rel_265_pointsto_objcont_info_322,symTable,"pointsto_objcont.@info.322",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_266_pointsto_objcont_info_323(*rel_266_pointsto_objcont_info_323,symTable,"pointsto_objcont.@info.323",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_267_pointsto_objcont_info_324(*rel_267_pointsto_objcont_info_324,symTable,"pointsto_objcont.@info.324",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_268_pointsto_objcont_info_325(*rel_268_pointsto_objcont_info_325,symTable,"pointsto_objcont.@info.325",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_269_pointsto_objcont_info_326(*rel_269_pointsto_objcont_info_326,symTable,"pointsto_objcont.@info.326",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_270_pointsto_objcont_info_327(*rel_270_pointsto_objcont_info_327,symTable,"pointsto_objcont.@info.327",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_271_pointsto_objcont_info_328(*rel_271_pointsto_objcont_info_328,symTable,"pointsto_objcont.@info.328",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_272_pointsto_objcont_info_329(*rel_272_pointsto_objcont_info_329,symTable,"pointsto_objcont.@info.329",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_273_pointsto_objcont_info_33(*rel_273_pointsto_objcont_info_33,symTable,"pointsto_objcont.@info.33",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_274_pointsto_objcont_info_330(*rel_274_pointsto_objcont_info_330,symTable,"pointsto_objcont.@info.330",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_275_pointsto_objcont_info_331(*rel_275_pointsto_objcont_info_331,symTable,"pointsto_objcont.@info.331",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_276_pointsto_objcont_info_332(*rel_276_pointsto_objcont_info_332,symTable,"pointsto_objcont.@info.332",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_277_pointsto_objcont_info_333(*rel_277_pointsto_objcont_info_333,symTable,"pointsto_objcont.@info.333",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_278_pointsto_objcont_info_334(*rel_278_pointsto_objcont_info_334,symTable,"pointsto_objcont.@info.334",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_279_pointsto_objcont_info_335(*rel_279_pointsto_objcont_info_335,symTable,"pointsto_objcont.@info.335",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_280_pointsto_objcont_info_336(*rel_280_pointsto_objcont_info_336,symTable,"pointsto_objcont.@info.336",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_281_pointsto_objcont_info_337(*rel_281_pointsto_objcont_info_337,symTable,"pointsto_objcont.@info.337",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_282_pointsto_objcont_info_338(*rel_282_pointsto_objcont_info_338,symTable,"pointsto_objcont.@info.338",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_283_pointsto_objcont_info_339(*rel_283_pointsto_objcont_info_339,symTable,"pointsto_objcont.@info.339",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_284_pointsto_objcont_info_34(*rel_284_pointsto_objcont_info_34,symTable,"pointsto_objcont.@info.34",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_285_pointsto_objcont_info_340(*rel_285_pointsto_objcont_info_340,symTable,"pointsto_objcont.@info.340",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_286_pointsto_objcont_info_341(*rel_286_pointsto_objcont_info_341,symTable,"pointsto_objcont.@info.341",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_287_pointsto_objcont_info_342(*rel_287_pointsto_objcont_info_342,symTable,"pointsto_objcont.@info.342",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_288_pointsto_objcont_info_343(*rel_288_pointsto_objcont_info_343,symTable,"pointsto_objcont.@info.343",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_289_pointsto_objcont_info_344(*rel_289_pointsto_objcont_info_344,symTable,"pointsto_objcont.@info.344",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_290_pointsto_objcont_info_345(*rel_290_pointsto_objcont_info_345,symTable,"pointsto_objcont.@info.345",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_291_pointsto_objcont_info_346(*rel_291_pointsto_objcont_info_346,symTable,"pointsto_objcont.@info.346",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_292_pointsto_objcont_info_347(*rel_292_pointsto_objcont_info_347,symTable,"pointsto_objcont.@info.347",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_293_pointsto_objcont_info_348(*rel_293_pointsto_objcont_info_348,symTable,"pointsto_objcont.@info.348",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_294_pointsto_objcont_info_349(*rel_294_pointsto_objcont_info_349,symTable,"pointsto_objcont.@info.349",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_295_pointsto_objcont_info_35(*rel_295_pointsto_objcont_info_35,symTable,"pointsto_objcont.@info.35",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_296_pointsto_objcont_info_350(*rel_296_pointsto_objcont_info_350,symTable,"pointsto_objcont.@info.350",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_297_pointsto_objcont_info_351(*rel_297_pointsto_objcont_info_351,symTable,"pointsto_objcont.@info.351",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_298_pointsto_objcont_info_352(*rel_298_pointsto_objcont_info_352,symTable,"pointsto_objcont.@info.352",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_299_pointsto_objcont_info_353(*rel_299_pointsto_objcont_info_353,symTable,"pointsto_objcont.@info.353",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_300_pointsto_objcont_info_354(*rel_300_pointsto_objcont_info_354,symTable,"pointsto_objcont.@info.354",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_301_pointsto_objcont_info_355(*rel_301_pointsto_objcont_info_355,symTable,"pointsto_objcont.@info.355",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_302_pointsto_objcont_info_356(*rel_302_pointsto_objcont_info_356,symTable,"pointsto_objcont.@info.356",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_303_pointsto_objcont_info_357(*rel_303_pointsto_objcont_info_357,symTable,"pointsto_objcont.@info.357",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_304_pointsto_objcont_info_358(*rel_304_pointsto_objcont_info_358,symTable,"pointsto_objcont.@info.358",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_305_pointsto_objcont_info_359(*rel_305_pointsto_objcont_info_359,symTable,"pointsto_objcont.@info.359",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_306_pointsto_objcont_info_36(*rel_306_pointsto_objcont_info_36,symTable,"pointsto_objcont.@info.36",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_307_pointsto_objcont_info_360(*rel_307_pointsto_objcont_info_360,symTable,"pointsto_objcont.@info.360",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_308_pointsto_objcont_info_361(*rel_308_pointsto_objcont_info_361,symTable,"pointsto_objcont.@info.361",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_309_pointsto_objcont_info_362(*rel_309_pointsto_objcont_info_362,symTable,"pointsto_objcont.@info.362",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_310_pointsto_objcont_info_363(*rel_310_pointsto_objcont_info_363,symTable,"pointsto_objcont.@info.363",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_311_pointsto_objcont_info_364(*rel_311_pointsto_objcont_info_364,symTable,"pointsto_objcont.@info.364",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_312_pointsto_objcont_info_365(*rel_312_pointsto_objcont_info_365,symTable,"pointsto_objcont.@info.365",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_313_pointsto_objcont_info_366(*rel_313_pointsto_objcont_info_366,symTable,"pointsto_objcont.@info.366",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_314_pointsto_objcont_info_367(*rel_314_pointsto_objcont_info_367,symTable,"pointsto_objcont.@info.367",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_315_pointsto_objcont_info_368(*rel_315_pointsto_objcont_info_368,symTable,"pointsto_objcont.@info.368",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_316_pointsto_objcont_info_369(*rel_316_pointsto_objcont_info_369,symTable,"pointsto_objcont.@info.369",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_317_pointsto_objcont_info_37(*rel_317_pointsto_objcont_info_37,symTable,"pointsto_objcont.@info.37",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_318_pointsto_objcont_info_370(*rel_318_pointsto_objcont_info_370,symTable,"pointsto_objcont.@info.370",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_319_pointsto_objcont_info_371(*rel_319_pointsto_objcont_info_371,symTable,"pointsto_objcont.@info.371",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_320_pointsto_objcont_info_372(*rel_320_pointsto_objcont_info_372,symTable,"pointsto_objcont.@info.372",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_321_pointsto_objcont_info_373(*rel_321_pointsto_objcont_info_373,symTable,"pointsto_objcont.@info.373",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_322_pointsto_objcont_info_374(*rel_322_pointsto_objcont_info_374,symTable,"pointsto_objcont.@info.374",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_323_pointsto_objcont_info_375(*rel_323_pointsto_objcont_info_375,symTable,"pointsto_objcont.@info.375",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_324_pointsto_objcont_info_376(*rel_324_pointsto_objcont_info_376,symTable,"pointsto_objcont.@info.376",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_325_pointsto_objcont_info_377(*rel_325_pointsto_objcont_info_377,symTable,"pointsto_objcont.@info.377",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_326_pointsto_objcont_info_378(*rel_326_pointsto_objcont_info_378,symTable,"pointsto_objcont.@info.378",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_327_pointsto_objcont_info_379(*rel_327_pointsto_objcont_info_379,symTable,"pointsto_objcont.@info.379",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_328_pointsto_objcont_info_38(*rel_328_pointsto_objcont_info_38,symTable,"pointsto_objcont.@info.38",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_329_pointsto_objcont_info_380(*rel_329_pointsto_objcont_info_380,symTable,"pointsto_objcont.@info.380",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_330_pointsto_objcont_info_381(*rel_330_pointsto_objcont_info_381,symTable,"pointsto_objcont.@info.381",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_331_pointsto_objcont_info_382(*rel_331_pointsto_objcont_info_382,symTable,"pointsto_objcont.@info.382",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_332_pointsto_objcont_info_383(*rel_332_pointsto_objcont_info_383,symTable,"pointsto_objcont.@info.383",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_333_pointsto_objcont_info_384(*rel_333_pointsto_objcont_info_384,symTable,"pointsto_objcont.@info.384",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_334_pointsto_objcont_info_385(*rel_334_pointsto_objcont_info_385,symTable,"pointsto_objcont.@info.385",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_335_pointsto_objcont_info_386(*rel_335_pointsto_objcont_info_386,symTable,"pointsto_objcont.@info.386",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_336_pointsto_objcont_info_387(*rel_336_pointsto_objcont_info_387,symTable,"pointsto_objcont.@info.387",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_337_pointsto_objcont_info_388(*rel_337_pointsto_objcont_info_388,symTable,"pointsto_objcont.@info.388",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_338_pointsto_objcont_info_389(*rel_338_pointsto_objcont_info_389,symTable,"pointsto_objcont.@info.389",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_339_pointsto_objcont_info_39(*rel_339_pointsto_objcont_info_39,symTable,"pointsto_objcont.@info.39",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_340_pointsto_objcont_info_390(*rel_340_pointsto_objcont_info_390,symTable,"pointsto_objcont.@info.390",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_341_pointsto_objcont_info_391(*rel_341_pointsto_objcont_info_391,symTable,"pointsto_objcont.@info.391",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_342_pointsto_objcont_info_392(*rel_342_pointsto_objcont_info_392,symTable,"pointsto_objcont.@info.392",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_343_pointsto_objcont_info_393(*rel_343_pointsto_objcont_info_393,symTable,"pointsto_objcont.@info.393",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_344_pointsto_objcont_info_394(*rel_344_pointsto_objcont_info_394,symTable,"pointsto_objcont.@info.394",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_345_pointsto_objcont_info_395(*rel_345_pointsto_objcont_info_395,symTable,"pointsto_objcont.@info.395",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_346_pointsto_objcont_info_396(*rel_346_pointsto_objcont_info_396,symTable,"pointsto_objcont.@info.396",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_347_pointsto_objcont_info_397(*rel_347_pointsto_objcont_info_397,symTable,"pointsto_objcont.@info.397",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_348_pointsto_objcont_info_398(*rel_348_pointsto_objcont_info_398,symTable,"pointsto_objcont.@info.398",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_349_pointsto_objcont_info_399(*rel_349_pointsto_objcont_info_399,symTable,"pointsto_objcont.@info.399",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_350_pointsto_objcont_info_4(*rel_350_pointsto_objcont_info_4,symTable,"pointsto_objcont.@info.4",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_351_pointsto_objcont_info_40(*rel_351_pointsto_objcont_info_40,symTable,"pointsto_objcont.@info.40",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_352_pointsto_objcont_info_400(*rel_352_pointsto_objcont_info_400,symTable,"pointsto_objcont.@info.400",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_353_pointsto_objcont_info_41(*rel_353_pointsto_objcont_info_41,symTable,"pointsto_objcont.@info.41",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_354_pointsto_objcont_info_42(*rel_354_pointsto_objcont_info_42,symTable,"pointsto_objcont.@info.42",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_355_pointsto_objcont_info_43(*rel_355_pointsto_objcont_info_43,symTable,"pointsto_objcont.@info.43",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_356_pointsto_objcont_info_44(*rel_356_pointsto_objcont_info_44,symTable,"pointsto_objcont.@info.44",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_357_pointsto_objcont_info_45(*rel_357_pointsto_objcont_info_45,symTable,"pointsto_objcont.@info.45",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_358_pointsto_objcont_info_46(*rel_358_pointsto_objcont_info_46,symTable,"pointsto_objcont.@info.46",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_359_pointsto_objcont_info_47(*rel_359_pointsto_objcont_info_47,symTable,"pointsto_objcont.@info.47",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_360_pointsto_objcont_info_48(*rel_360_pointsto_objcont_info_48,symTable,"pointsto_objcont.@info.48",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_361_pointsto_objcont_info_49(*rel_361_pointsto_objcont_info_49,symTable,"pointsto_objcont.@info.49",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_362_pointsto_objcont_info_5(*rel_362_pointsto_objcont_info_5,symTable,"pointsto_objcont.@info.5",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_363_pointsto_objcont_info_50(*rel_363_pointsto_objcont_info_50,symTable,"pointsto_objcont.@info.50",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_364_pointsto_objcont_info_51(*rel_364_pointsto_objcont_info_51,symTable,"pointsto_objcont.@info.51",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_365_pointsto_objcont_info_52(*rel_365_pointsto_objcont_info_52,symTable,"pointsto_objcont.@info.52",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_366_pointsto_objcont_info_53(*rel_366_pointsto_objcont_info_53,symTable,"pointsto_objcont.@info.53",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_367_pointsto_objcont_info_54(*rel_367_pointsto_objcont_info_54,symTable,"pointsto_objcont.@info.54",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_368_pointsto_objcont_info_55(*rel_368_pointsto_objcont_info_55,symTable,"pointsto_objcont.@info.55",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_369_pointsto_objcont_info_56(*rel_369_pointsto_objcont_info_56,symTable,"pointsto_objcont.@info.56",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_370_pointsto_objcont_info_57(*rel_370_pointsto_objcont_info_57,symTable,"pointsto_objcont.@info.57",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_371_pointsto_objcont_info_58(*rel_371_pointsto_objcont_info_58,symTable,"pointsto_objcont.@info.58",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_372_pointsto_objcont_info_59(*rel_372_pointsto_objcont_info_59,symTable,"pointsto_objcont.@info.59",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_373_pointsto_objcont_info_6(*rel_373_pointsto_objcont_info_6,symTable,"pointsto_objcont.@info.6",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_374_pointsto_objcont_info_60(*rel_374_pointsto_objcont_info_60,symTable,"pointsto_objcont.@info.60",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_375_pointsto_objcont_info_61(*rel_375_pointsto_objcont_info_61,symTable,"pointsto_objcont.@info.61",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_376_pointsto_objcont_info_62(*rel_376_pointsto_objcont_info_62,symTable,"pointsto_objcont.@info.62",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_377_pointsto_objcont_info_63(*rel_377_pointsto_objcont_info_63,symTable,"pointsto_objcont.@info.63",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_378_pointsto_objcont_info_64(*rel_378_pointsto_objcont_info_64,symTable,"pointsto_objcont.@info.64",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_379_pointsto_objcont_info_65(*rel_379_pointsto_objcont_info_65,symTable,"pointsto_objcont.@info.65",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_380_pointsto_objcont_info_66(*rel_380_pointsto_objcont_info_66,symTable,"pointsto_objcont.@info.66",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_381_pointsto_objcont_info_67(*rel_381_pointsto_objcont_info_67,symTable,"pointsto_objcont.@info.67",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_382_pointsto_objcont_info_68(*rel_382_pointsto_objcont_info_68,symTable,"pointsto_objcont.@info.68",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_383_pointsto_objcont_info_69(*rel_383_pointsto_objcont_info_69,symTable,"pointsto_objcont.@info.69",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_384_pointsto_objcont_info_7(*rel_384_pointsto_objcont_info_7,symTable,"pointsto_objcont.@info.7",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_385_pointsto_objcont_info_70(*rel_385_pointsto_objcont_info_70,symTable,"pointsto_objcont.@info.70",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_386_pointsto_objcont_info_71(*rel_386_pointsto_objcont_info_71,symTable,"pointsto_objcont.@info.71",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_387_pointsto_objcont_info_72(*rel_387_pointsto_objcont_info_72,symTable,"pointsto_objcont.@info.72",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_388_pointsto_objcont_info_73(*rel_388_pointsto_objcont_info_73,symTable,"pointsto_objcont.@info.73",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_389_pointsto_objcont_info_74(*rel_389_pointsto_objcont_info_74,symTable,"pointsto_objcont.@info.74",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_390_pointsto_objcont_info_75(*rel_390_pointsto_objcont_info_75,symTable,"pointsto_objcont.@info.75",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_391_pointsto_objcont_info_76(*rel_391_pointsto_objcont_info_76,symTable,"pointsto_objcont.@info.76",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_392_pointsto_objcont_info_77(*rel_392_pointsto_objcont_info_77,symTable,"pointsto_objcont.@info.77",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_393_pointsto_objcont_info_78(*rel_393_pointsto_objcont_info_78,symTable,"pointsto_objcont.@info.78",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_394_pointsto_objcont_info_79(*rel_394_pointsto_objcont_info_79,symTable,"pointsto_objcont.@info.79",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_395_pointsto_objcont_info_8(*rel_395_pointsto_objcont_info_8,symTable,"pointsto_objcont.@info.8",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_396_pointsto_objcont_info_80(*rel_396_pointsto_objcont_info_80,symTable,"pointsto_objcont.@info.80",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_397_pointsto_objcont_info_81(*rel_397_pointsto_objcont_info_81,symTable,"pointsto_objcont.@info.81",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_398_pointsto_objcont_info_82(*rel_398_pointsto_objcont_info_82,symTable,"pointsto_objcont.@info.82",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_399_pointsto_objcont_info_83(*rel_399_pointsto_objcont_info_83,symTable,"pointsto_objcont.@info.83",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_400_pointsto_objcont_info_84(*rel_400_pointsto_objcont_info_84,symTable,"pointsto_objcont.@info.84",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_401_pointsto_objcont_info_85(*rel_401_pointsto_objcont_info_85,symTable,"pointsto_objcont.@info.85",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_402_pointsto_objcont_info_86(*rel_402_pointsto_objcont_info_86,symTable,"pointsto_objcont.@info.86",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_403_pointsto_objcont_info_87(*rel_403_pointsto_objcont_info_87,symTable,"pointsto_objcont.@info.87",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_404_pointsto_objcont_info_88(*rel_404_pointsto_objcont_info_88,symTable,"pointsto_objcont.@info.88",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_405_pointsto_objcont_info_89(*rel_405_pointsto_objcont_info_89,symTable,"pointsto_objcont.@info.89",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_406_pointsto_objcont_info_9(*rel_406_pointsto_objcont_info_9,symTable,"pointsto_objcont.@info.9",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_407_pointsto_objcont_info_90(*rel_407_pointsto_objcont_info_90,symTable,"pointsto_objcont.@info.90",std::array<const char *,5>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,5>{{"clause_num","head_vars","rel_0","rel_1","clause_repr"}}),

wrapper_rel_408_pointsto_objcont_info_91(*rel_408_pointsto_objcont_info_91,symTable,"pointsto_objcont.@info.91",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_409_pointsto_objcont_info_92(*rel_409_pointsto_objcont_info_92,symTable,"pointsto_objcont.@info.92",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_410_pointsto_objcont_info_93(*rel_410_pointsto_objcont_info_93,symTable,"pointsto_objcont.@info.93",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_411_pointsto_objcont_info_94(*rel_411_pointsto_objcont_info_94,symTable,"pointsto_objcont.@info.94",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_412_pointsto_objcont_info_95(*rel_412_pointsto_objcont_info_95,symTable,"pointsto_objcont.@info.95",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_413_pointsto_objcont_info_96(*rel_413_pointsto_objcont_info_96,symTable,"pointsto_objcont.@info.96",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_414_pointsto_objcont_info_97(*rel_414_pointsto_objcont_info_97,symTable,"pointsto_objcont.@info.97",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_415_pointsto_objcont_info_98(*rel_415_pointsto_objcont_info_98,symTable,"pointsto_objcont.@info.98",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}),

wrapper_rel_416_pointsto_objcont_info_99(*rel_416_pointsto_objcont_info_99,symTable,"pointsto_objcont.@info.99",std::array<const char *,6>{{"i:number","s:symbol","s:symbol","s:symbol","s:symbol","s:symbol"}},std::array<const char *,6>{{"clause_num","head_vars","rel_0","rel_1","rel_2","clause_repr"}}){
addRelation("Rule",&wrapper_rel_1_Rule,true,false);
addRelation("actual",&wrapper_rel_2_actual,true,false);
addRelation("assign",&wrapper_rel_3_assign,true,false);
addRelation("enclosing_type",&wrapper_rel_4_enclosing_type,true,false);
addRelation("formal",&wrapper_rel_5_formal,true,false);
addRelation("heappointsto",&wrapper_rel_6_heappointsto,false,true);
addRelation("invocation",&wrapper_rel_7_invocation,true,false);
addRelation("load",&wrapper_rel_8_load,true,false);
addRelation("points_initial",&wrapper_rel_9_points_initial,true,false);
addRelation("pointsto",&wrapper_rel_10_pointsto,false,true);
addRelation("receiver_actual",&wrapper_rel_11_receiver_actual,true,false);
addRelation("receiver_formal",&wrapper_rel_12_receiver_formal,true,false);
addRelation("store",&wrapper_rel_13_store,true,false);
addRelation("pointsto_objcont",&wrapper_rel_14_pointsto_objcont,false,true);
addRelation("pointsto_objcont.@info.1",&wrapper_rel_17_pointsto_objcont_info_1,false,false);
addRelation("pointsto_objcont.@info.10",&wrapper_rel_18_pointsto_objcont_info_10,false,false);
addRelation("pointsto_objcont.@info.100",&wrapper_rel_19_pointsto_objcont_info_100,false,false);
addRelation("pointsto_objcont.@info.101",&wrapper_rel_20_pointsto_objcont_info_101,false,false);
addRelation("pointsto_objcont.@info.102",&wrapper_rel_21_pointsto_objcont_info_102,false,false);
addRelation("pointsto_objcont.@info.103",&wrapper_rel_22_pointsto_objcont_info_103,false,false);
addRelation("pointsto_objcont.@info.104",&wrapper_rel_23_pointsto_objcont_info_104,false,false);
addRelation("pointsto_objcont.@info.105",&wrapper_rel_24_pointsto_objcont_info_105,false,false);
addRelation("pointsto_objcont.@info.106",&wrapper_rel_25_pointsto_objcont_info_106,false,false);
addRelation("pointsto_objcont.@info.107",&wrapper_rel_26_pointsto_objcont_info_107,false,false);
addRelation("pointsto_objcont.@info.108",&wrapper_rel_27_pointsto_objcont_info_108,false,false);
addRelation("pointsto_objcont.@info.109",&wrapper_rel_28_pointsto_objcont_info_109,false,false);
addRelation("pointsto_objcont.@info.11",&wrapper_rel_29_pointsto_objcont_info_11,false,false);
addRelation("pointsto_objcont.@info.110",&wrapper_rel_30_pointsto_objcont_info_110,false,false);
addRelation("pointsto_objcont.@info.111",&wrapper_rel_31_pointsto_objcont_info_111,false,false);
addRelation("pointsto_objcont.@info.112",&wrapper_rel_32_pointsto_objcont_info_112,false,false);
addRelation("pointsto_objcont.@info.113",&wrapper_rel_33_pointsto_objcont_info_113,false,false);
addRelation("pointsto_objcont.@info.114",&wrapper_rel_34_pointsto_objcont_info_114,false,false);
addRelation("pointsto_objcont.@info.115",&wrapper_rel_35_pointsto_objcont_info_115,false,false);
addRelation("pointsto_objcont.@info.116",&wrapper_rel_36_pointsto_objcont_info_116,false,false);
addRelation("pointsto_objcont.@info.117",&wrapper_rel_37_pointsto_objcont_info_117,false,false);
addRelation("pointsto_objcont.@info.118",&wrapper_rel_38_pointsto_objcont_info_118,false,false);
addRelation("pointsto_objcont.@info.119",&wrapper_rel_39_pointsto_objcont_info_119,false,false);
addRelation("pointsto_objcont.@info.12",&wrapper_rel_40_pointsto_objcont_info_12,false,false);
addRelation("pointsto_objcont.@info.120",&wrapper_rel_41_pointsto_objcont_info_120,false,false);
addRelation("pointsto_objcont.@info.121",&wrapper_rel_42_pointsto_objcont_info_121,false,false);
addRelation("pointsto_objcont.@info.122",&wrapper_rel_43_pointsto_objcont_info_122,false,false);
addRelation("pointsto_objcont.@info.123",&wrapper_rel_44_pointsto_objcont_info_123,false,false);
addRelation("pointsto_objcont.@info.124",&wrapper_rel_45_pointsto_objcont_info_124,false,false);
addRelation("pointsto_objcont.@info.125",&wrapper_rel_46_pointsto_objcont_info_125,false,false);
addRelation("pointsto_objcont.@info.126",&wrapper_rel_47_pointsto_objcont_info_126,false,false);
addRelation("pointsto_objcont.@info.127",&wrapper_rel_48_pointsto_objcont_info_127,false,false);
addRelation("pointsto_objcont.@info.128",&wrapper_rel_49_pointsto_objcont_info_128,false,false);
addRelation("pointsto_objcont.@info.129",&wrapper_rel_50_pointsto_objcont_info_129,false,false);
addRelation("pointsto_objcont.@info.13",&wrapper_rel_51_pointsto_objcont_info_13,false,false);
addRelation("pointsto_objcont.@info.130",&wrapper_rel_52_pointsto_objcont_info_130,false,false);
addRelation("pointsto_objcont.@info.131",&wrapper_rel_53_pointsto_objcont_info_131,false,false);
addRelation("pointsto_objcont.@info.132",&wrapper_rel_54_pointsto_objcont_info_132,false,false);
addRelation("pointsto_objcont.@info.133",&wrapper_rel_55_pointsto_objcont_info_133,false,false);
addRelation("pointsto_objcont.@info.134",&wrapper_rel_56_pointsto_objcont_info_134,false,false);
addRelation("pointsto_objcont.@info.135",&wrapper_rel_57_pointsto_objcont_info_135,false,false);
addRelation("pointsto_objcont.@info.136",&wrapper_rel_58_pointsto_objcont_info_136,false,false);
addRelation("pointsto_objcont.@info.137",&wrapper_rel_59_pointsto_objcont_info_137,false,false);
addRelation("pointsto_objcont.@info.138",&wrapper_rel_60_pointsto_objcont_info_138,false,false);
addRelation("pointsto_objcont.@info.139",&wrapper_rel_61_pointsto_objcont_info_139,false,false);
addRelation("pointsto_objcont.@info.14",&wrapper_rel_62_pointsto_objcont_info_14,false,false);
addRelation("pointsto_objcont.@info.140",&wrapper_rel_63_pointsto_objcont_info_140,false,false);
addRelation("pointsto_objcont.@info.141",&wrapper_rel_64_pointsto_objcont_info_141,false,false);
addRelation("pointsto_objcont.@info.142",&wrapper_rel_65_pointsto_objcont_info_142,false,false);
addRelation("pointsto_objcont.@info.143",&wrapper_rel_66_pointsto_objcont_info_143,false,false);
addRelation("pointsto_objcont.@info.144",&wrapper_rel_67_pointsto_objcont_info_144,false,false);
addRelation("pointsto_objcont.@info.145",&wrapper_rel_68_pointsto_objcont_info_145,false,false);
addRelation("pointsto_objcont.@info.146",&wrapper_rel_69_pointsto_objcont_info_146,false,false);
addRelation("pointsto_objcont.@info.147",&wrapper_rel_70_pointsto_objcont_info_147,false,false);
addRelation("pointsto_objcont.@info.148",&wrapper_rel_71_pointsto_objcont_info_148,false,false);
addRelation("pointsto_objcont.@info.149",&wrapper_rel_72_pointsto_objcont_info_149,false,false);
addRelation("pointsto_objcont.@info.15",&wrapper_rel_73_pointsto_objcont_info_15,false,false);
addRelation("pointsto_objcont.@info.150",&wrapper_rel_74_pointsto_objcont_info_150,false,false);
addRelation("pointsto_objcont.@info.151",&wrapper_rel_75_pointsto_objcont_info_151,false,false);
addRelation("pointsto_objcont.@info.152",&wrapper_rel_76_pointsto_objcont_info_152,false,false);
addRelation("pointsto_objcont.@info.153",&wrapper_rel_77_pointsto_objcont_info_153,false,false);
addRelation("pointsto_objcont.@info.154",&wrapper_rel_78_pointsto_objcont_info_154,false,false);
addRelation("pointsto_objcont.@info.155",&wrapper_rel_79_pointsto_objcont_info_155,false,false);
addRelation("pointsto_objcont.@info.156",&wrapper_rel_80_pointsto_objcont_info_156,false,false);
addRelation("pointsto_objcont.@info.157",&wrapper_rel_81_pointsto_objcont_info_157,false,false);
addRelation("pointsto_objcont.@info.158",&wrapper_rel_82_pointsto_objcont_info_158,false,false);
addRelation("pointsto_objcont.@info.159",&wrapper_rel_83_pointsto_objcont_info_159,false,false);
addRelation("pointsto_objcont.@info.16",&wrapper_rel_84_pointsto_objcont_info_16,false,false);
addRelation("pointsto_objcont.@info.160",&wrapper_rel_85_pointsto_objcont_info_160,false,false);
addRelation("pointsto_objcont.@info.161",&wrapper_rel_86_pointsto_objcont_info_161,false,false);
addRelation("pointsto_objcont.@info.162",&wrapper_rel_87_pointsto_objcont_info_162,false,false);
addRelation("pointsto_objcont.@info.163",&wrapper_rel_88_pointsto_objcont_info_163,false,false);
addRelation("pointsto_objcont.@info.164",&wrapper_rel_89_pointsto_objcont_info_164,false,false);
addRelation("pointsto_objcont.@info.165",&wrapper_rel_90_pointsto_objcont_info_165,false,false);
addRelation("pointsto_objcont.@info.166",&wrapper_rel_91_pointsto_objcont_info_166,false,false);
addRelation("pointsto_objcont.@info.167",&wrapper_rel_92_pointsto_objcont_info_167,false,false);
addRelation("pointsto_objcont.@info.168",&wrapper_rel_93_pointsto_objcont_info_168,false,false);
addRelation("pointsto_objcont.@info.169",&wrapper_rel_94_pointsto_objcont_info_169,false,false);
addRelation("pointsto_objcont.@info.17",&wrapper_rel_95_pointsto_objcont_info_17,false,false);
addRelation("pointsto_objcont.@info.170",&wrapper_rel_96_pointsto_objcont_info_170,false,false);
addRelation("pointsto_objcont.@info.171",&wrapper_rel_97_pointsto_objcont_info_171,false,false);
addRelation("pointsto_objcont.@info.172",&wrapper_rel_98_pointsto_objcont_info_172,false,false);
addRelation("pointsto_objcont.@info.173",&wrapper_rel_99_pointsto_objcont_info_173,false,false);
addRelation("pointsto_objcont.@info.174",&wrapper_rel_100_pointsto_objcont_info_174,false,false);
addRelation("pointsto_objcont.@info.175",&wrapper_rel_101_pointsto_objcont_info_175,false,false);
addRelation("pointsto_objcont.@info.176",&wrapper_rel_102_pointsto_objcont_info_176,false,false);
addRelation("pointsto_objcont.@info.177",&wrapper_rel_103_pointsto_objcont_info_177,false,false);
addRelation("pointsto_objcont.@info.178",&wrapper_rel_104_pointsto_objcont_info_178,false,false);
addRelation("pointsto_objcont.@info.179",&wrapper_rel_105_pointsto_objcont_info_179,false,false);
addRelation("pointsto_objcont.@info.18",&wrapper_rel_106_pointsto_objcont_info_18,false,false);
addRelation("pointsto_objcont.@info.180",&wrapper_rel_107_pointsto_objcont_info_180,false,false);
addRelation("pointsto_objcont.@info.181",&wrapper_rel_108_pointsto_objcont_info_181,false,false);
addRelation("pointsto_objcont.@info.182",&wrapper_rel_109_pointsto_objcont_info_182,false,false);
addRelation("pointsto_objcont.@info.183",&wrapper_rel_110_pointsto_objcont_info_183,false,false);
addRelation("pointsto_objcont.@info.184",&wrapper_rel_111_pointsto_objcont_info_184,false,false);
addRelation("pointsto_objcont.@info.185",&wrapper_rel_112_pointsto_objcont_info_185,false,false);
addRelation("pointsto_objcont.@info.186",&wrapper_rel_113_pointsto_objcont_info_186,false,false);
addRelation("pointsto_objcont.@info.187",&wrapper_rel_114_pointsto_objcont_info_187,false,false);
addRelation("pointsto_objcont.@info.188",&wrapper_rel_115_pointsto_objcont_info_188,false,false);
addRelation("pointsto_objcont.@info.189",&wrapper_rel_116_pointsto_objcont_info_189,false,false);
addRelation("pointsto_objcont.@info.19",&wrapper_rel_117_pointsto_objcont_info_19,false,false);
addRelation("pointsto_objcont.@info.190",&wrapper_rel_118_pointsto_objcont_info_190,false,false);
addRelation("pointsto_objcont.@info.191",&wrapper_rel_119_pointsto_objcont_info_191,false,false);
addRelation("pointsto_objcont.@info.192",&wrapper_rel_120_pointsto_objcont_info_192,false,false);
addRelation("pointsto_objcont.@info.193",&wrapper_rel_121_pointsto_objcont_info_193,false,false);
addRelation("pointsto_objcont.@info.194",&wrapper_rel_122_pointsto_objcont_info_194,false,false);
addRelation("pointsto_objcont.@info.195",&wrapper_rel_123_pointsto_objcont_info_195,false,false);
addRelation("pointsto_objcont.@info.196",&wrapper_rel_124_pointsto_objcont_info_196,false,false);
addRelation("pointsto_objcont.@info.197",&wrapper_rel_125_pointsto_objcont_info_197,false,false);
addRelation("pointsto_objcont.@info.198",&wrapper_rel_126_pointsto_objcont_info_198,false,false);
addRelation("pointsto_objcont.@info.199",&wrapper_rel_127_pointsto_objcont_info_199,false,false);
addRelation("pointsto_objcont.@info.2",&wrapper_rel_128_pointsto_objcont_info_2,false,false);
addRelation("pointsto_objcont.@info.20",&wrapper_rel_129_pointsto_objcont_info_20,false,false);
addRelation("pointsto_objcont.@info.200",&wrapper_rel_130_pointsto_objcont_info_200,false,false);
addRelation("pointsto_objcont.@info.201",&wrapper_rel_131_pointsto_objcont_info_201,false,false);
addRelation("pointsto_objcont.@info.202",&wrapper_rel_132_pointsto_objcont_info_202,false,false);
addRelation("pointsto_objcont.@info.203",&wrapper_rel_133_pointsto_objcont_info_203,false,false);
addRelation("pointsto_objcont.@info.204",&wrapper_rel_134_pointsto_objcont_info_204,false,false);
addRelation("pointsto_objcont.@info.205",&wrapper_rel_135_pointsto_objcont_info_205,false,false);
addRelation("pointsto_objcont.@info.206",&wrapper_rel_136_pointsto_objcont_info_206,false,false);
addRelation("pointsto_objcont.@info.207",&wrapper_rel_137_pointsto_objcont_info_207,false,false);
addRelation("pointsto_objcont.@info.208",&wrapper_rel_138_pointsto_objcont_info_208,false,false);
addRelation("pointsto_objcont.@info.209",&wrapper_rel_139_pointsto_objcont_info_209,false,false);
addRelation("pointsto_objcont.@info.21",&wrapper_rel_140_pointsto_objcont_info_21,false,false);
addRelation("pointsto_objcont.@info.210",&wrapper_rel_141_pointsto_objcont_info_210,false,false);
addRelation("pointsto_objcont.@info.211",&wrapper_rel_142_pointsto_objcont_info_211,false,false);
addRelation("pointsto_objcont.@info.212",&wrapper_rel_143_pointsto_objcont_info_212,false,false);
addRelation("pointsto_objcont.@info.213",&wrapper_rel_144_pointsto_objcont_info_213,false,false);
addRelation("pointsto_objcont.@info.214",&wrapper_rel_145_pointsto_objcont_info_214,false,false);
addRelation("pointsto_objcont.@info.215",&wrapper_rel_146_pointsto_objcont_info_215,false,false);
addRelation("pointsto_objcont.@info.216",&wrapper_rel_147_pointsto_objcont_info_216,false,false);
addRelation("pointsto_objcont.@info.217",&wrapper_rel_148_pointsto_objcont_info_217,false,false);
addRelation("pointsto_objcont.@info.218",&wrapper_rel_149_pointsto_objcont_info_218,false,false);
addRelation("pointsto_objcont.@info.219",&wrapper_rel_150_pointsto_objcont_info_219,false,false);
addRelation("pointsto_objcont.@info.22",&wrapper_rel_151_pointsto_objcont_info_22,false,false);
addRelation("pointsto_objcont.@info.220",&wrapper_rel_152_pointsto_objcont_info_220,false,false);
addRelation("pointsto_objcont.@info.221",&wrapper_rel_153_pointsto_objcont_info_221,false,false);
addRelation("pointsto_objcont.@info.222",&wrapper_rel_154_pointsto_objcont_info_222,false,false);
addRelation("pointsto_objcont.@info.223",&wrapper_rel_155_pointsto_objcont_info_223,false,false);
addRelation("pointsto_objcont.@info.224",&wrapper_rel_156_pointsto_objcont_info_224,false,false);
addRelation("pointsto_objcont.@info.225",&wrapper_rel_157_pointsto_objcont_info_225,false,false);
addRelation("pointsto_objcont.@info.226",&wrapper_rel_158_pointsto_objcont_info_226,false,false);
addRelation("pointsto_objcont.@info.227",&wrapper_rel_159_pointsto_objcont_info_227,false,false);
addRelation("pointsto_objcont.@info.228",&wrapper_rel_160_pointsto_objcont_info_228,false,false);
addRelation("pointsto_objcont.@info.229",&wrapper_rel_161_pointsto_objcont_info_229,false,false);
addRelation("pointsto_objcont.@info.23",&wrapper_rel_162_pointsto_objcont_info_23,false,false);
addRelation("pointsto_objcont.@info.230",&wrapper_rel_163_pointsto_objcont_info_230,false,false);
addRelation("pointsto_objcont.@info.231",&wrapper_rel_164_pointsto_objcont_info_231,false,false);
addRelation("pointsto_objcont.@info.232",&wrapper_rel_165_pointsto_objcont_info_232,false,false);
addRelation("pointsto_objcont.@info.233",&wrapper_rel_166_pointsto_objcont_info_233,false,false);
addRelation("pointsto_objcont.@info.234",&wrapper_rel_167_pointsto_objcont_info_234,false,false);
addRelation("pointsto_objcont.@info.235",&wrapper_rel_168_pointsto_objcont_info_235,false,false);
addRelation("pointsto_objcont.@info.236",&wrapper_rel_169_pointsto_objcont_info_236,false,false);
addRelation("pointsto_objcont.@info.237",&wrapper_rel_170_pointsto_objcont_info_237,false,false);
addRelation("pointsto_objcont.@info.238",&wrapper_rel_171_pointsto_objcont_info_238,false,false);
addRelation("pointsto_objcont.@info.239",&wrapper_rel_172_pointsto_objcont_info_239,false,false);
addRelation("pointsto_objcont.@info.24",&wrapper_rel_173_pointsto_objcont_info_24,false,false);
addRelation("pointsto_objcont.@info.240",&wrapper_rel_174_pointsto_objcont_info_240,false,false);
addRelation("pointsto_objcont.@info.241",&wrapper_rel_175_pointsto_objcont_info_241,false,false);
addRelation("pointsto_objcont.@info.242",&wrapper_rel_176_pointsto_objcont_info_242,false,false);
addRelation("pointsto_objcont.@info.243",&wrapper_rel_177_pointsto_objcont_info_243,false,false);
addRelation("pointsto_objcont.@info.244",&wrapper_rel_178_pointsto_objcont_info_244,false,false);
addRelation("pointsto_objcont.@info.245",&wrapper_rel_179_pointsto_objcont_info_245,false,false);
addRelation("pointsto_objcont.@info.246",&wrapper_rel_180_pointsto_objcont_info_246,false,false);
addRelation("pointsto_objcont.@info.247",&wrapper_rel_181_pointsto_objcont_info_247,false,false);
addRelation("pointsto_objcont.@info.248",&wrapper_rel_182_pointsto_objcont_info_248,false,false);
addRelation("pointsto_objcont.@info.249",&wrapper_rel_183_pointsto_objcont_info_249,false,false);
addRelation("pointsto_objcont.@info.25",&wrapper_rel_184_pointsto_objcont_info_25,false,false);
addRelation("pointsto_objcont.@info.250",&wrapper_rel_185_pointsto_objcont_info_250,false,false);
addRelation("pointsto_objcont.@info.251",&wrapper_rel_186_pointsto_objcont_info_251,false,false);
addRelation("pointsto_objcont.@info.252",&wrapper_rel_187_pointsto_objcont_info_252,false,false);
addRelation("pointsto_objcont.@info.253",&wrapper_rel_188_pointsto_objcont_info_253,false,false);
addRelation("pointsto_objcont.@info.254",&wrapper_rel_189_pointsto_objcont_info_254,false,false);
addRelation("pointsto_objcont.@info.255",&wrapper_rel_190_pointsto_objcont_info_255,false,false);
addRelation("pointsto_objcont.@info.256",&wrapper_rel_191_pointsto_objcont_info_256,false,false);
addRelation("pointsto_objcont.@info.257",&wrapper_rel_192_pointsto_objcont_info_257,false,false);
addRelation("pointsto_objcont.@info.258",&wrapper_rel_193_pointsto_objcont_info_258,false,false);
addRelation("pointsto_objcont.@info.259",&wrapper_rel_194_pointsto_objcont_info_259,false,false);
addRelation("pointsto_objcont.@info.26",&wrapper_rel_195_pointsto_objcont_info_26,false,false);
addRelation("pointsto_objcont.@info.260",&wrapper_rel_196_pointsto_objcont_info_260,false,false);
addRelation("pointsto_objcont.@info.261",&wrapper_rel_197_pointsto_objcont_info_261,false,false);
addRelation("pointsto_objcont.@info.262",&wrapper_rel_198_pointsto_objcont_info_262,false,false);
addRelation("pointsto_objcont.@info.263",&wrapper_rel_199_pointsto_objcont_info_263,false,false);
addRelation("pointsto_objcont.@info.264",&wrapper_rel_200_pointsto_objcont_info_264,false,false);
addRelation("pointsto_objcont.@info.265",&wrapper_rel_201_pointsto_objcont_info_265,false,false);
addRelation("pointsto_objcont.@info.266",&wrapper_rel_202_pointsto_objcont_info_266,false,false);
addRelation("pointsto_objcont.@info.267",&wrapper_rel_203_pointsto_objcont_info_267,false,false);
addRelation("pointsto_objcont.@info.268",&wrapper_rel_204_pointsto_objcont_info_268,false,false);
addRelation("pointsto_objcont.@info.269",&wrapper_rel_205_pointsto_objcont_info_269,false,false);
addRelation("pointsto_objcont.@info.27",&wrapper_rel_206_pointsto_objcont_info_27,false,false);
addRelation("pointsto_objcont.@info.270",&wrapper_rel_207_pointsto_objcont_info_270,false,false);
addRelation("pointsto_objcont.@info.271",&wrapper_rel_208_pointsto_objcont_info_271,false,false);
addRelation("pointsto_objcont.@info.272",&wrapper_rel_209_pointsto_objcont_info_272,false,false);
addRelation("pointsto_objcont.@info.273",&wrapper_rel_210_pointsto_objcont_info_273,false,false);
addRelation("pointsto_objcont.@info.274",&wrapper_rel_211_pointsto_objcont_info_274,false,false);
addRelation("pointsto_objcont.@info.275",&wrapper_rel_212_pointsto_objcont_info_275,false,false);
addRelation("pointsto_objcont.@info.276",&wrapper_rel_213_pointsto_objcont_info_276,false,false);
addRelation("pointsto_objcont.@info.277",&wrapper_rel_214_pointsto_objcont_info_277,false,false);
addRelation("pointsto_objcont.@info.278",&wrapper_rel_215_pointsto_objcont_info_278,false,false);
addRelation("pointsto_objcont.@info.279",&wrapper_rel_216_pointsto_objcont_info_279,false,false);
addRelation("pointsto_objcont.@info.28",&wrapper_rel_217_pointsto_objcont_info_28,false,false);
addRelation("pointsto_objcont.@info.280",&wrapper_rel_218_pointsto_objcont_info_280,false,false);
addRelation("pointsto_objcont.@info.281",&wrapper_rel_219_pointsto_objcont_info_281,false,false);
addRelation("pointsto_objcont.@info.282",&wrapper_rel_220_pointsto_objcont_info_282,false,false);
addRelation("pointsto_objcont.@info.283",&wrapper_rel_221_pointsto_objcont_info_283,false,false);
addRelation("pointsto_objcont.@info.284",&wrapper_rel_222_pointsto_objcont_info_284,false,false);
addRelation("pointsto_objcont.@info.285",&wrapper_rel_223_pointsto_objcont_info_285,false,false);
addRelation("pointsto_objcont.@info.286",&wrapper_rel_224_pointsto_objcont_info_286,false,false);
addRelation("pointsto_objcont.@info.287",&wrapper_rel_225_pointsto_objcont_info_287,false,false);
addRelation("pointsto_objcont.@info.288",&wrapper_rel_226_pointsto_objcont_info_288,false,false);
addRelation("pointsto_objcont.@info.289",&wrapper_rel_227_pointsto_objcont_info_289,false,false);
addRelation("pointsto_objcont.@info.29",&wrapper_rel_228_pointsto_objcont_info_29,false,false);
addRelation("pointsto_objcont.@info.290",&wrapper_rel_229_pointsto_objcont_info_290,false,false);
addRelation("pointsto_objcont.@info.291",&wrapper_rel_230_pointsto_objcont_info_291,false,false);
addRelation("pointsto_objcont.@info.292",&wrapper_rel_231_pointsto_objcont_info_292,false,false);
addRelation("pointsto_objcont.@info.293",&wrapper_rel_232_pointsto_objcont_info_293,false,false);
addRelation("pointsto_objcont.@info.294",&wrapper_rel_233_pointsto_objcont_info_294,false,false);
addRelation("pointsto_objcont.@info.295",&wrapper_rel_234_pointsto_objcont_info_295,false,false);
addRelation("pointsto_objcont.@info.296",&wrapper_rel_235_pointsto_objcont_info_296,false,false);
addRelation("pointsto_objcont.@info.297",&wrapper_rel_236_pointsto_objcont_info_297,false,false);
addRelation("pointsto_objcont.@info.298",&wrapper_rel_237_pointsto_objcont_info_298,false,false);
addRelation("pointsto_objcont.@info.299",&wrapper_rel_238_pointsto_objcont_info_299,false,false);
addRelation("pointsto_objcont.@info.3",&wrapper_rel_239_pointsto_objcont_info_3,false,false);
addRelation("pointsto_objcont.@info.30",&wrapper_rel_240_pointsto_objcont_info_30,false,false);
addRelation("pointsto_objcont.@info.300",&wrapper_rel_241_pointsto_objcont_info_300,false,false);
addRelation("pointsto_objcont.@info.301",&wrapper_rel_242_pointsto_objcont_info_301,false,false);
addRelation("pointsto_objcont.@info.302",&wrapper_rel_243_pointsto_objcont_info_302,false,false);
addRelation("pointsto_objcont.@info.303",&wrapper_rel_244_pointsto_objcont_info_303,false,false);
addRelation("pointsto_objcont.@info.304",&wrapper_rel_245_pointsto_objcont_info_304,false,false);
addRelation("pointsto_objcont.@info.305",&wrapper_rel_246_pointsto_objcont_info_305,false,false);
addRelation("pointsto_objcont.@info.306",&wrapper_rel_247_pointsto_objcont_info_306,false,false);
addRelation("pointsto_objcont.@info.307",&wrapper_rel_248_pointsto_objcont_info_307,false,false);
addRelation("pointsto_objcont.@info.308",&wrapper_rel_249_pointsto_objcont_info_308,false,false);
addRelation("pointsto_objcont.@info.309",&wrapper_rel_250_pointsto_objcont_info_309,false,false);
addRelation("pointsto_objcont.@info.31",&wrapper_rel_251_pointsto_objcont_info_31,false,false);
addRelation("pointsto_objcont.@info.310",&wrapper_rel_252_pointsto_objcont_info_310,false,false);
addRelation("pointsto_objcont.@info.311",&wrapper_rel_253_pointsto_objcont_info_311,false,false);
addRelation("pointsto_objcont.@info.312",&wrapper_rel_254_pointsto_objcont_info_312,false,false);
addRelation("pointsto_objcont.@info.313",&wrapper_rel_255_pointsto_objcont_info_313,false,false);
addRelation("pointsto_objcont.@info.314",&wrapper_rel_256_pointsto_objcont_info_314,false,false);
addRelation("pointsto_objcont.@info.315",&wrapper_rel_257_pointsto_objcont_info_315,false,false);
addRelation("pointsto_objcont.@info.316",&wrapper_rel_258_pointsto_objcont_info_316,false,false);
addRelation("pointsto_objcont.@info.317",&wrapper_rel_259_pointsto_objcont_info_317,false,false);
addRelation("pointsto_objcont.@info.318",&wrapper_rel_260_pointsto_objcont_info_318,false,false);
addRelation("pointsto_objcont.@info.319",&wrapper_rel_261_pointsto_objcont_info_319,false,false);
addRelation("pointsto_objcont.@info.32",&wrapper_rel_262_pointsto_objcont_info_32,false,false);
addRelation("pointsto_objcont.@info.320",&wrapper_rel_263_pointsto_objcont_info_320,false,false);
addRelation("pointsto_objcont.@info.321",&wrapper_rel_264_pointsto_objcont_info_321,false,false);
addRelation("pointsto_objcont.@info.322",&wrapper_rel_265_pointsto_objcont_info_322,false,false);
addRelation("pointsto_objcont.@info.323",&wrapper_rel_266_pointsto_objcont_info_323,false,false);
addRelation("pointsto_objcont.@info.324",&wrapper_rel_267_pointsto_objcont_info_324,false,false);
addRelation("pointsto_objcont.@info.325",&wrapper_rel_268_pointsto_objcont_info_325,false,false);
addRelation("pointsto_objcont.@info.326",&wrapper_rel_269_pointsto_objcont_info_326,false,false);
addRelation("pointsto_objcont.@info.327",&wrapper_rel_270_pointsto_objcont_info_327,false,false);
addRelation("pointsto_objcont.@info.328",&wrapper_rel_271_pointsto_objcont_info_328,false,false);
addRelation("pointsto_objcont.@info.329",&wrapper_rel_272_pointsto_objcont_info_329,false,false);
addRelation("pointsto_objcont.@info.33",&wrapper_rel_273_pointsto_objcont_info_33,false,false);
addRelation("pointsto_objcont.@info.330",&wrapper_rel_274_pointsto_objcont_info_330,false,false);
addRelation("pointsto_objcont.@info.331",&wrapper_rel_275_pointsto_objcont_info_331,false,false);
addRelation("pointsto_objcont.@info.332",&wrapper_rel_276_pointsto_objcont_info_332,false,false);
addRelation("pointsto_objcont.@info.333",&wrapper_rel_277_pointsto_objcont_info_333,false,false);
addRelation("pointsto_objcont.@info.334",&wrapper_rel_278_pointsto_objcont_info_334,false,false);
addRelation("pointsto_objcont.@info.335",&wrapper_rel_279_pointsto_objcont_info_335,false,false);
addRelation("pointsto_objcont.@info.336",&wrapper_rel_280_pointsto_objcont_info_336,false,false);
addRelation("pointsto_objcont.@info.337",&wrapper_rel_281_pointsto_objcont_info_337,false,false);
addRelation("pointsto_objcont.@info.338",&wrapper_rel_282_pointsto_objcont_info_338,false,false);
addRelation("pointsto_objcont.@info.339",&wrapper_rel_283_pointsto_objcont_info_339,false,false);
addRelation("pointsto_objcont.@info.34",&wrapper_rel_284_pointsto_objcont_info_34,false,false);
addRelation("pointsto_objcont.@info.340",&wrapper_rel_285_pointsto_objcont_info_340,false,false);
addRelation("pointsto_objcont.@info.341",&wrapper_rel_286_pointsto_objcont_info_341,false,false);
addRelation("pointsto_objcont.@info.342",&wrapper_rel_287_pointsto_objcont_info_342,false,false);
addRelation("pointsto_objcont.@info.343",&wrapper_rel_288_pointsto_objcont_info_343,false,false);
addRelation("pointsto_objcont.@info.344",&wrapper_rel_289_pointsto_objcont_info_344,false,false);
addRelation("pointsto_objcont.@info.345",&wrapper_rel_290_pointsto_objcont_info_345,false,false);
addRelation("pointsto_objcont.@info.346",&wrapper_rel_291_pointsto_objcont_info_346,false,false);
addRelation("pointsto_objcont.@info.347",&wrapper_rel_292_pointsto_objcont_info_347,false,false);
addRelation("pointsto_objcont.@info.348",&wrapper_rel_293_pointsto_objcont_info_348,false,false);
addRelation("pointsto_objcont.@info.349",&wrapper_rel_294_pointsto_objcont_info_349,false,false);
addRelation("pointsto_objcont.@info.35",&wrapper_rel_295_pointsto_objcont_info_35,false,false);
addRelation("pointsto_objcont.@info.350",&wrapper_rel_296_pointsto_objcont_info_350,false,false);
addRelation("pointsto_objcont.@info.351",&wrapper_rel_297_pointsto_objcont_info_351,false,false);
addRelation("pointsto_objcont.@info.352",&wrapper_rel_298_pointsto_objcont_info_352,false,false);
addRelation("pointsto_objcont.@info.353",&wrapper_rel_299_pointsto_objcont_info_353,false,false);
addRelation("pointsto_objcont.@info.354",&wrapper_rel_300_pointsto_objcont_info_354,false,false);
addRelation("pointsto_objcont.@info.355",&wrapper_rel_301_pointsto_objcont_info_355,false,false);
addRelation("pointsto_objcont.@info.356",&wrapper_rel_302_pointsto_objcont_info_356,false,false);
addRelation("pointsto_objcont.@info.357",&wrapper_rel_303_pointsto_objcont_info_357,false,false);
addRelation("pointsto_objcont.@info.358",&wrapper_rel_304_pointsto_objcont_info_358,false,false);
addRelation("pointsto_objcont.@info.359",&wrapper_rel_305_pointsto_objcont_info_359,false,false);
addRelation("pointsto_objcont.@info.36",&wrapper_rel_306_pointsto_objcont_info_36,false,false);
addRelation("pointsto_objcont.@info.360",&wrapper_rel_307_pointsto_objcont_info_360,false,false);
addRelation("pointsto_objcont.@info.361",&wrapper_rel_308_pointsto_objcont_info_361,false,false);
addRelation("pointsto_objcont.@info.362",&wrapper_rel_309_pointsto_objcont_info_362,false,false);
addRelation("pointsto_objcont.@info.363",&wrapper_rel_310_pointsto_objcont_info_363,false,false);
addRelation("pointsto_objcont.@info.364",&wrapper_rel_311_pointsto_objcont_info_364,false,false);
addRelation("pointsto_objcont.@info.365",&wrapper_rel_312_pointsto_objcont_info_365,false,false);
addRelation("pointsto_objcont.@info.366",&wrapper_rel_313_pointsto_objcont_info_366,false,false);
addRelation("pointsto_objcont.@info.367",&wrapper_rel_314_pointsto_objcont_info_367,false,false);
addRelation("pointsto_objcont.@info.368",&wrapper_rel_315_pointsto_objcont_info_368,false,false);
addRelation("pointsto_objcont.@info.369",&wrapper_rel_316_pointsto_objcont_info_369,false,false);
addRelation("pointsto_objcont.@info.37",&wrapper_rel_317_pointsto_objcont_info_37,false,false);
addRelation("pointsto_objcont.@info.370",&wrapper_rel_318_pointsto_objcont_info_370,false,false);
addRelation("pointsto_objcont.@info.371",&wrapper_rel_319_pointsto_objcont_info_371,false,false);
addRelation("pointsto_objcont.@info.372",&wrapper_rel_320_pointsto_objcont_info_372,false,false);
addRelation("pointsto_objcont.@info.373",&wrapper_rel_321_pointsto_objcont_info_373,false,false);
addRelation("pointsto_objcont.@info.374",&wrapper_rel_322_pointsto_objcont_info_374,false,false);
addRelation("pointsto_objcont.@info.375",&wrapper_rel_323_pointsto_objcont_info_375,false,false);
addRelation("pointsto_objcont.@info.376",&wrapper_rel_324_pointsto_objcont_info_376,false,false);
addRelation("pointsto_objcont.@info.377",&wrapper_rel_325_pointsto_objcont_info_377,false,false);
addRelation("pointsto_objcont.@info.378",&wrapper_rel_326_pointsto_objcont_info_378,false,false);
addRelation("pointsto_objcont.@info.379",&wrapper_rel_327_pointsto_objcont_info_379,false,false);
addRelation("pointsto_objcont.@info.38",&wrapper_rel_328_pointsto_objcont_info_38,false,false);
addRelation("pointsto_objcont.@info.380",&wrapper_rel_329_pointsto_objcont_info_380,false,false);
addRelation("pointsto_objcont.@info.381",&wrapper_rel_330_pointsto_objcont_info_381,false,false);
addRelation("pointsto_objcont.@info.382",&wrapper_rel_331_pointsto_objcont_info_382,false,false);
addRelation("pointsto_objcont.@info.383",&wrapper_rel_332_pointsto_objcont_info_383,false,false);
addRelation("pointsto_objcont.@info.384",&wrapper_rel_333_pointsto_objcont_info_384,false,false);
addRelation("pointsto_objcont.@info.385",&wrapper_rel_334_pointsto_objcont_info_385,false,false);
addRelation("pointsto_objcont.@info.386",&wrapper_rel_335_pointsto_objcont_info_386,false,false);
addRelation("pointsto_objcont.@info.387",&wrapper_rel_336_pointsto_objcont_info_387,false,false);
addRelation("pointsto_objcont.@info.388",&wrapper_rel_337_pointsto_objcont_info_388,false,false);
addRelation("pointsto_objcont.@info.389",&wrapper_rel_338_pointsto_objcont_info_389,false,false);
addRelation("pointsto_objcont.@info.39",&wrapper_rel_339_pointsto_objcont_info_39,false,false);
addRelation("pointsto_objcont.@info.390",&wrapper_rel_340_pointsto_objcont_info_390,false,false);
addRelation("pointsto_objcont.@info.391",&wrapper_rel_341_pointsto_objcont_info_391,false,false);
addRelation("pointsto_objcont.@info.392",&wrapper_rel_342_pointsto_objcont_info_392,false,false);
addRelation("pointsto_objcont.@info.393",&wrapper_rel_343_pointsto_objcont_info_393,false,false);
addRelation("pointsto_objcont.@info.394",&wrapper_rel_344_pointsto_objcont_info_394,false,false);
addRelation("pointsto_objcont.@info.395",&wrapper_rel_345_pointsto_objcont_info_395,false,false);
addRelation("pointsto_objcont.@info.396",&wrapper_rel_346_pointsto_objcont_info_396,false,false);
addRelation("pointsto_objcont.@info.397",&wrapper_rel_347_pointsto_objcont_info_397,false,false);
addRelation("pointsto_objcont.@info.398",&wrapper_rel_348_pointsto_objcont_info_398,false,false);
addRelation("pointsto_objcont.@info.399",&wrapper_rel_349_pointsto_objcont_info_399,false,false);
addRelation("pointsto_objcont.@info.4",&wrapper_rel_350_pointsto_objcont_info_4,false,false);
addRelation("pointsto_objcont.@info.40",&wrapper_rel_351_pointsto_objcont_info_40,false,false);
addRelation("pointsto_objcont.@info.400",&wrapper_rel_352_pointsto_objcont_info_400,false,false);
addRelation("pointsto_objcont.@info.41",&wrapper_rel_353_pointsto_objcont_info_41,false,false);
addRelation("pointsto_objcont.@info.42",&wrapper_rel_354_pointsto_objcont_info_42,false,false);
addRelation("pointsto_objcont.@info.43",&wrapper_rel_355_pointsto_objcont_info_43,false,false);
addRelation("pointsto_objcont.@info.44",&wrapper_rel_356_pointsto_objcont_info_44,false,false);
addRelation("pointsto_objcont.@info.45",&wrapper_rel_357_pointsto_objcont_info_45,false,false);
addRelation("pointsto_objcont.@info.46",&wrapper_rel_358_pointsto_objcont_info_46,false,false);
addRelation("pointsto_objcont.@info.47",&wrapper_rel_359_pointsto_objcont_info_47,false,false);
addRelation("pointsto_objcont.@info.48",&wrapper_rel_360_pointsto_objcont_info_48,false,false);
addRelation("pointsto_objcont.@info.49",&wrapper_rel_361_pointsto_objcont_info_49,false,false);
addRelation("pointsto_objcont.@info.5",&wrapper_rel_362_pointsto_objcont_info_5,false,false);
addRelation("pointsto_objcont.@info.50",&wrapper_rel_363_pointsto_objcont_info_50,false,false);
addRelation("pointsto_objcont.@info.51",&wrapper_rel_364_pointsto_objcont_info_51,false,false);
addRelation("pointsto_objcont.@info.52",&wrapper_rel_365_pointsto_objcont_info_52,false,false);
addRelation("pointsto_objcont.@info.53",&wrapper_rel_366_pointsto_objcont_info_53,false,false);
addRelation("pointsto_objcont.@info.54",&wrapper_rel_367_pointsto_objcont_info_54,false,false);
addRelation("pointsto_objcont.@info.55",&wrapper_rel_368_pointsto_objcont_info_55,false,false);
addRelation("pointsto_objcont.@info.56",&wrapper_rel_369_pointsto_objcont_info_56,false,false);
addRelation("pointsto_objcont.@info.57",&wrapper_rel_370_pointsto_objcont_info_57,false,false);
addRelation("pointsto_objcont.@info.58",&wrapper_rel_371_pointsto_objcont_info_58,false,false);
addRelation("pointsto_objcont.@info.59",&wrapper_rel_372_pointsto_objcont_info_59,false,false);
addRelation("pointsto_objcont.@info.6",&wrapper_rel_373_pointsto_objcont_info_6,false,false);
addRelation("pointsto_objcont.@info.60",&wrapper_rel_374_pointsto_objcont_info_60,false,false);
addRelation("pointsto_objcont.@info.61",&wrapper_rel_375_pointsto_objcont_info_61,false,false);
addRelation("pointsto_objcont.@info.62",&wrapper_rel_376_pointsto_objcont_info_62,false,false);
addRelation("pointsto_objcont.@info.63",&wrapper_rel_377_pointsto_objcont_info_63,false,false);
addRelation("pointsto_objcont.@info.64",&wrapper_rel_378_pointsto_objcont_info_64,false,false);
addRelation("pointsto_objcont.@info.65",&wrapper_rel_379_pointsto_objcont_info_65,false,false);
addRelation("pointsto_objcont.@info.66",&wrapper_rel_380_pointsto_objcont_info_66,false,false);
addRelation("pointsto_objcont.@info.67",&wrapper_rel_381_pointsto_objcont_info_67,false,false);
addRelation("pointsto_objcont.@info.68",&wrapper_rel_382_pointsto_objcont_info_68,false,false);
addRelation("pointsto_objcont.@info.69",&wrapper_rel_383_pointsto_objcont_info_69,false,false);
addRelation("pointsto_objcont.@info.7",&wrapper_rel_384_pointsto_objcont_info_7,false,false);
addRelation("pointsto_objcont.@info.70",&wrapper_rel_385_pointsto_objcont_info_70,false,false);
addRelation("pointsto_objcont.@info.71",&wrapper_rel_386_pointsto_objcont_info_71,false,false);
addRelation("pointsto_objcont.@info.72",&wrapper_rel_387_pointsto_objcont_info_72,false,false);
addRelation("pointsto_objcont.@info.73",&wrapper_rel_388_pointsto_objcont_info_73,false,false);
addRelation("pointsto_objcont.@info.74",&wrapper_rel_389_pointsto_objcont_info_74,false,false);
addRelation("pointsto_objcont.@info.75",&wrapper_rel_390_pointsto_objcont_info_75,false,false);
addRelation("pointsto_objcont.@info.76",&wrapper_rel_391_pointsto_objcont_info_76,false,false);
addRelation("pointsto_objcont.@info.77",&wrapper_rel_392_pointsto_objcont_info_77,false,false);
addRelation("pointsto_objcont.@info.78",&wrapper_rel_393_pointsto_objcont_info_78,false,false);
addRelation("pointsto_objcont.@info.79",&wrapper_rel_394_pointsto_objcont_info_79,false,false);
addRelation("pointsto_objcont.@info.8",&wrapper_rel_395_pointsto_objcont_info_8,false,false);
addRelation("pointsto_objcont.@info.80",&wrapper_rel_396_pointsto_objcont_info_80,false,false);
addRelation("pointsto_objcont.@info.81",&wrapper_rel_397_pointsto_objcont_info_81,false,false);
addRelation("pointsto_objcont.@info.82",&wrapper_rel_398_pointsto_objcont_info_82,false,false);
addRelation("pointsto_objcont.@info.83",&wrapper_rel_399_pointsto_objcont_info_83,false,false);
addRelation("pointsto_objcont.@info.84",&wrapper_rel_400_pointsto_objcont_info_84,false,false);
addRelation("pointsto_objcont.@info.85",&wrapper_rel_401_pointsto_objcont_info_85,false,false);
addRelation("pointsto_objcont.@info.86",&wrapper_rel_402_pointsto_objcont_info_86,false,false);
addRelation("pointsto_objcont.@info.87",&wrapper_rel_403_pointsto_objcont_info_87,false,false);
addRelation("pointsto_objcont.@info.88",&wrapper_rel_404_pointsto_objcont_info_88,false,false);
addRelation("pointsto_objcont.@info.89",&wrapper_rel_405_pointsto_objcont_info_89,false,false);
addRelation("pointsto_objcont.@info.9",&wrapper_rel_406_pointsto_objcont_info_9,false,false);
addRelation("pointsto_objcont.@info.90",&wrapper_rel_407_pointsto_objcont_info_90,false,false);
addRelation("pointsto_objcont.@info.91",&wrapper_rel_408_pointsto_objcont_info_91,false,false);
addRelation("pointsto_objcont.@info.92",&wrapper_rel_409_pointsto_objcont_info_92,false,false);
addRelation("pointsto_objcont.@info.93",&wrapper_rel_410_pointsto_objcont_info_93,false,false);
addRelation("pointsto_objcont.@info.94",&wrapper_rel_411_pointsto_objcont_info_94,false,false);
addRelation("pointsto_objcont.@info.95",&wrapper_rel_412_pointsto_objcont_info_95,false,false);
addRelation("pointsto_objcont.@info.96",&wrapper_rel_413_pointsto_objcont_info_96,false,false);
addRelation("pointsto_objcont.@info.97",&wrapper_rel_414_pointsto_objcont_info_97,false,false);
addRelation("pointsto_objcont.@info.98",&wrapper_rel_415_pointsto_objcont_info_98,false,false);
addRelation("pointsto_objcont.@info.99",&wrapper_rel_416_pointsto_objcont_info_99,false,false);
}
~Sf_souffle_small() {
}
private:
void runFunction(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1, bool performIO = false) {
SignalHandler::instance()->set();
std::atomic<size_t> iter(0);

// -- query evaluation --
/* BEGIN STRATUM 0 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 0 */
/* BEGIN STRATUM 1 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./actual.facts"},{"name","actual"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_actual);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 1 */
/* BEGIN STRATUM 2 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./assign.facts"},{"name","assign"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_3_assign);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 2 */
/* BEGIN STRATUM 3 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./enclosing_type.facts"},{"name","enclosing_type"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_4_enclosing_type);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 3 */
/* BEGIN STRATUM 4 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./formal.facts"},{"name","formal"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_5_formal);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 4 */
/* BEGIN STRATUM 5 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1\tv2"},{"filename","./heappointsto.csv"},{"name","heappointsto"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_heappointsto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 5 */
/* BEGIN STRATUM 6 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./invocation.facts"},{"name","invocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_7_invocation);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 6 */
/* BEGIN STRATUM 7 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./load.facts"},{"name","load"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_8_load);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 7 */
/* BEGIN STRATUM 8 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./points_initial.facts"},{"name","points_initial"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_9_points_initial);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 8 */
/* BEGIN STRATUM 9 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1\tv2\tv3"},{"filename","./pointsto.csv"},{"name","pointsto"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_10_pointsto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 9 */
/* BEGIN STRATUM 10 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./receiver_actual.facts"},{"name","receiver_actual"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_11_receiver_actual);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 10 */
/* BEGIN STRATUM 11 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./receiver_formal.facts"},{"name","receiver_formal"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_12_receiver_formal);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 11 */
/* BEGIN STRATUM 12 */
[&]() {
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./store.facts"},{"name","store"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_13_store);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
}();
/* END STRATUM 12 */
/* BEGIN STRATUM 13 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v2,v1,1,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(10,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   receiver_formal(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [40:1-40:91])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_12_receiver_formal->equalRange_1(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(1)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v2,v0,v1,2,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(6,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   store(v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [41:1-41:84])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_13_store->equalRange_3(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(2)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,3,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11,_,@level_num_0),
   actual(v0,v1,v2,_,@level_num_1),
   points_initial(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [42:1-42:86])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_2_actual->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_2_actual) {
const Tuple<RamDomain,4> key({{env1[0],env1[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(3)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v1,v0,v2,5,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(0,_,@level_num_0),
   load(v0,v1,v2,_,@level_num_1),
   points_initial(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [44:1-44:83])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_8_load->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_load) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(5)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v2,v0,v1,7,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(8,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   receiver_formal(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [46:1-46:90])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,4> key({{env1[1],0,0,0}});
auto range = rel_12_receiver_formal->equalRange_1(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(7)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v2,v1,8,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(9,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   points_initial(v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [47:1-47:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_points_initial->equalRange_2(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(8)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v2,v1,10,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(1,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   store(v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [49:1-49:84])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_13_store->equalRange_3(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(10)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,11,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(3,_,@level_num_0),
   load(v0,v1,v2,_,@level_num_1),
   points_initial(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [50:1-50:83])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_8_load->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_load) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(11)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,13,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(69300,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [52:1-52:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69300),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(13)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,14,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(56630,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [53:1-53:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56630),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(14)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,15,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34295,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [54:1-54:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34295),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_25(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(15)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,16,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19791,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   actual(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [55:1-55:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19791),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],0,env1[0],0,0}});
auto range = rel_2_actual->equalRange_5(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(16)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,17,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(48017,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [56:1-56:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48017),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(17)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,18,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(13813,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   load(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [57:1-57:87])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13813),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_8_load->equalRange_3(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(18)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,19,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28791,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [58:1-58:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28791),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(19)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,20,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36691,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [59:1-59:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36691),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(20)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,21,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(15217,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   invocation(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [60:1-60:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_7_invocation->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_7_invocation_op_ctxt,rel_7_invocation->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15217),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_7_invocation->equalRange_1(key,READ_OP_CONTEXT(rel_7_invocation_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(21)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,22,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(27895,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [61:1-61:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27895),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(22)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,23,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35837,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [62:1-62:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35837),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(23)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,24,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(86626,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [63:1-63:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86626),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(24)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,25,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22946,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [64:1-64:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22946),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(25)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,26,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(84399,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [65:1-65:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84399),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(26)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,27,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(18672,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   actual(v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [66:1-66:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18672),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],0,env1[0],0,0}});
auto range = rel_2_actual->equalRange_5(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(27)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,28,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73858,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v2,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [67:1-67:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73858),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(28)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,29,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28989,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [68:1-68:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28989),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(29)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,30,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78609,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [69:1-69:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78609),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(30)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,31,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35569,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [70:1-70:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35569),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(31)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,32,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62907,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [71:1-71:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62907),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(32)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,33,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40656,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [72:1-72:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40656),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],0,env1[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_58(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(33)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,34,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19390,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   actual(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [73:1-73:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19390),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_2_actual->equalRange_3(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(34)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,35,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41025,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [74:1-74:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41025),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(35)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,36,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36249,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [75:1-75:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36249),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(36)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,37,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62351,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [76:1-76:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62351),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_22(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(37)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,38,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2567,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [77:1-77:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2567),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(38)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,39,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40179,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [78:1-78:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40179),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(39)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,40,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(59120,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [79:1-79:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59120),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(40)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,41,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78420,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [80:1-80:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(41)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,42,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64858,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [81:1-81:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64858),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(42)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,43,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28441,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [82:1-82:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28441),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(43)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,44,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47932,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [83:1-83:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47932),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(44)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,45,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40777,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [84:1-84:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40777),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(45)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,46,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38959,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [85:1-85:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38959),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(46)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,47,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(52193,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [86:1-86:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52193),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(47)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,48,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(5063,_,@level_num_0),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [87:1-87:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5063),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[4]))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(48)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,49,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63698,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [88:1-88:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63698),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(49)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,50,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(53306,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v0,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [89:1-89:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53306),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(50)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,51,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64812,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [90:1-90:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64812),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(51)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,52,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(79085,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [91:1-91:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79085),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(52)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,53,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35495,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [92:1-92:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35495),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(53)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,54,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43610,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [93:1-93:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43610),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(54)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,55,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33581,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [94:1-94:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33581),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(55)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,56,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(88964,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [95:1-95:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88964),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(56)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,57,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41537,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [96:1-96:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41537),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(57)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,58,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6139,_,@level_num_0),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [97:1-97:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6139),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[4]))) && (((env1[2]) == (env1[3]))))) && (((env1[1]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(58)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,59,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(66026,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [98:1-98:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66026),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(59)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,60,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78281,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [99:1-99:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78281),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(60)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,61,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34234,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [100:1-100:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34234),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_26(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(61)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,62,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(48347,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [101:1-101:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48347),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(62)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,63,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36826,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [102:1-102:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36826),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(63)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,64,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19964,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [103:1-103:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19964),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(64)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,65,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70583,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [104:1-104:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70583),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(65)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,66,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9423,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [105:1-105:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9423),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(66)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,67,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(59394,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [106:1-106:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59394),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_58(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(67)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,68,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8227,_,@level_num_0),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [107:1-107:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8227),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[5]),static_cast<RamDomain>(RamDomain(68)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,69,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22304,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v1,v0,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [108:1-108:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22304),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,0,env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_44(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[4]))) && (((env2[0]) == (env2[1]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(69)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,70,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21947,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [109:1-109:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21947),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(70)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,71,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82029,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [110:1-110:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82029),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(71)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,72,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(79077,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [111:1-111:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79077),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(72)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,73,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(4839,_,@level_num_0),
   assign(v0,v0,v1,v2,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [112:1-112:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4839),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[5]))))) && (((env1[3]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(RamDomain(73)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,74,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(20846,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [113:1-113:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20846),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(74)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,75,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(10458,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [114:1-114:77])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10458),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(75)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,76,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25015,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [115:1-115:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25015),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(76)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,77,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65996,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [116:1-116:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65996),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(77)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,78,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34638,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [117:1-117:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34638),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(78)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,79,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(27604,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [118:1-118:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27604),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(79)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,80,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67769,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [119:1-119:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67769),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_57(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(80)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,81,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63016,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [120:1-120:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63016),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(81)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,82,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42257,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [121:1-121:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42257),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(82)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,83,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(24992,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [122:1-122:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(24992),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(83)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,84,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(32795,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [123:1-123:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32795),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_62(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(84)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,85,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3548,_,@level_num_0),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [124:1-124:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3548),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[2]) == (env1[4]))))) && (((env1[3]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(RamDomain(85)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,86,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41694,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [125:1-125:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41694),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(86)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,87,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64161,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [126:1-126:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64161),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[1],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(87)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,88,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(14576,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   load(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [127:1-127:87])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(14576),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_8_load->equalRange_3(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(88)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,89,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43687,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [128:1-128:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43687),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(89)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,90,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7005,_,@level_num_0),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [129:1-129:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7005),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[4]))) && (((env1[1]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(90)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,91,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22493,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [130:1-130:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22493),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_22(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(91)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,92,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40917,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [131:1-131:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40917),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(92)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,93,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67708,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [132:1-132:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67708),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(93)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,94,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(90086,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [133:1-133:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90086),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(94)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,95,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47927,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [134:1-134:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47927),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_22(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(95)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,96,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(86220,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v2,v1,v0,v2,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [135:1-135:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86220),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_38(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[4]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(96)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,97,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(87963,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [136:1-136:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87963),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(97)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,98,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(20685,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [137:1-137:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20685),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(98)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,99,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(39726,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [138:1-138:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39726),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(99)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,100,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73695,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [139:1-139:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73695),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_61(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(100)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,101,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25962,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [140:1-140:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25962),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(101)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,102,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(17004,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   formal(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [141:1-141:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17004),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],0,env1[1],0,0}});
auto range = rel_5_formal->equalRange_5(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(102)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,103,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(76127,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [142:1-142:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76127),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(103)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,104,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(4802,_,@level_num_0),
   assign(v1,v0,v2,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [143:1-143:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4802),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[4]))) && (((env1[2]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(104)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,105,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(79890,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [144:1-144:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79890),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(105)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,106,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70047,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [145:1-145:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70047),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(106)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,107,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72259,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [146:1-146:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(107)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,108,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57647,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [147:1-147:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57647),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(108)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,109,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41683,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [148:1-148:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41683),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(109)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,110,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70884,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [149:1-149:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70884),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(110)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,111,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19066,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   actual(v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [150:1-150:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19066),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{0,env1[0],env1[1],0,0}});
auto range = rel_2_actual->equalRange_6(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(111)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,112,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(56544,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [151:1-151:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56544),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(112)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,113,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(50975,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [152:1-152:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50975),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(113)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,114,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1665,_,@level_num_0),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [153:1-153:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1665),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[5]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(114)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,115,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19450,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   actual(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [154:1-154:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19450),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_2_actual->equalRange_3(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(115)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,116,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(56468,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [155:1-155:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56468),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(116)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,117,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(5608,_,@level_num_0),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [156:1-156:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[4]))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(117)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,118,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67044,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [157:1-157:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67044),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(118)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,119,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(75403,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [158:1-158:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75403),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(119)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,120,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(52086,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [159:1-159:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52086),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(120)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,121,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37139,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [160:1-160:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37139),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(121)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,122,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64840,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [161:1-161:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64840),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(122)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,123,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57339,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [162:1-162:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57339),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(123)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,124,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(10964,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   points_initial(v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [163:1-163:93])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10964),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_points_initial->equalRange_2(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(124)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,125,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(89827,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [164:1-164:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89827),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_19(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[2]) == (env2[5]))) && (((env2[2]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(125)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,126,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(89093,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [165:1-165:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89093),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(126)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,127,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(23476,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [166:1-166:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23476),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(127)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,128,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(17280,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   formal(v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [167:1-167:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17280),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_5_formal->equalRange_3(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(128)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,129,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64388,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [168:1-168:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64388),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(129)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,130,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22401,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [169:1-169:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22401),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,0,env1[1],env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_60(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[1]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(130)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,131,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34014,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [170:1-170:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34014),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(131)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,132,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(32608,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [171:1-171:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(132)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,133,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(60907,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [172:1-172:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(60907),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(133)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,134,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65891,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [173:1-173:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65891),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(134)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,135,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37048,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [174:1-174:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37048),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(135)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,136,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74379,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [175:1-175:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74379),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(136)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,137,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47342,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [176:1-176:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47342),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(137)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,138,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(49990,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [177:1-177:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49990),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(138)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,139,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(51700,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [178:1-178:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51700),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(139)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,140,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6709,_,@level_num_0),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [179:1-179:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6709),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[4]))) && (((env1[1]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(140)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,141,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(85928,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [180:1-180:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85928),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(141)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,142,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(27710,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [181:1-181:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27710),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(142)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,143,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82355,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [182:1-182:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(143)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,144,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9044,_,@level_num_0),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [183:1-183:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9044),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[2]) == (env1[4]))) && (((env1[0]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(144)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,145,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(54183,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [184:1-184:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54183),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(145)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,146,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78074,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [185:1-185:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78074),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(146)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,147,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74364,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [186:1-186:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74364),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(147)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,148,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(80260,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [187:1-187:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80260),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(148)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,149,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67346,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [188:1-188:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67346),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(149)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,150,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35125,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [189:1-189:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35125),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(150)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,151,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(59200,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [190:1-190:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59200),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(151)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,152,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78013,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [191:1-191:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78013),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(152)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,153,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64376,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [192:1-192:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64376),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(153)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,154,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(29254,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [193:1-193:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29254),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(154)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,155,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43019,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [194:1-194:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43019),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(155)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,156,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72564,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [195:1-195:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72564),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(156)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,157,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21285,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [196:1-196:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21285),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(157)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,158,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(69299,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [197:1-197:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69299),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(158)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,159,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21348,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [198:1-198:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21348),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(159)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,160,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(54555,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [199:1-199:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54555),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(160)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,161,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62981,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [200:1-200:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62981),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(161)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,162,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(68694,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [201:1-201:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68694),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[5]),static_cast<RamDomain>(RamDomain(162)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,163,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6750,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [202:1-202:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6750),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(163)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,164,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47086,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [203:1-203:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47086),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(164)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,165,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(26939,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [204:1-204:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(26939),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(165)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,166,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(67670,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [205:1-205:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67670),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(166)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,167,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73511,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [206:1-206:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73511),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(167)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,168,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58608,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [207:1-207:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(168)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,169,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(91582,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [208:1-208:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(91582),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(169)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,170,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(170,_,@level_num_0),
   load(v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [209:1-209:61])_");
if(((!(rel_1_Rule->empty())) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(170),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_8_load) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(170)),static_cast<RamDomain>((std::max({env0[2], env1[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,171,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25399,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [210:1-210:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25399),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[5]),static_cast<RamDomain>(RamDomain(171)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,172,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(75363,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [211:1-211:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75363),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(172)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,173,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(30037,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [212:1-212:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30037),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(173)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,174,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(17833,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   formal(v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [213:1-213:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17833),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_5_formal->equalRange_3(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(174)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,175,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35561,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [214:1-214:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35561),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(175)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,176,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(18241,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   actual(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [215:1-215:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18241),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_2_actual->equalRange_3(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(176)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,177,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47462,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [216:1-216:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47462),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(177)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,178,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47663,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [217:1-217:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47663),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(178)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,179,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(71901,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v1,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [218:1-218:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71901),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],0,env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(179)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,180,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3343,_,@level_num_0),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [219:1-219:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3343),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[2]))) && (((env1[0]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(180)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,181,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6138,_,@level_num_0),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [220:1-220:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6138),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[3]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(181)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,182,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28853,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [221:1-221:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28853),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(182)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,183,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11948,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   store(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [222:1-222:88])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11948),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_13_store->equalRange_3(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(183)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,184,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(85549,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [223:1-223:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85549),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(184)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,185,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7943,_,@level_num_0),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [224:1-224:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7943),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[3]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(185)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,186,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58357,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [225:1-225:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58357),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(186)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,187,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9616,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [226:1-226:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9616),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(187)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,188,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78374,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [227:1-227:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78374),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(188)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,189,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(89794,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [228:1-228:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89794),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_25(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(189)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,190,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73931,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [229:1-229:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73931),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(190)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,191,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61289,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [230:1-230:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61289),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(191)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,192,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(46907,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v1,v0,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [231:1-231:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(46907),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(192)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,193,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(81145,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [232:1-232:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81145),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(193)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,194,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(50995,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [233:1-233:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50995),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(194)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,195,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6355,_,@level_num_0),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [234:1-234:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[2]) == (env1[4]))) && (((env1[0]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(195)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,196,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7560,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [235:1-235:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7560),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(196)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,197,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33965,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [236:1-236:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33965),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_22(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(197)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,198,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3904,_,@level_num_0),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [237:1-237:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3904),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[4]))) && (((env1[0]) == (env1[5]))))) && (((env1[2]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(198)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,199,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(79705,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [238:1-238:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79705),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(199)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,200,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(54686,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [239:1-239:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54686),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(200)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,201,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(71957,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [240:1-240:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71957),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(201)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,202,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57810,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [241:1-241:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57810),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(202)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,203,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(81803,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [242:1-242:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81803),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(203)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,204,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(53640,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [243:1-243:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53640),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_25(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(204)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,205,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(85336,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [244:1-244:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85336),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(205)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,206,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11627,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   store(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [245:1-245:88])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11627),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],0,env1[0],0,0}});
auto range = rel_13_store->equalRange_5(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(206)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,207,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(75557,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [246:1-246:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75557),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(207)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,208,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(18878,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   actual(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [247:1-247:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18878),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],0,env1[1],0,0}});
auto range = rel_2_actual->equalRange_5(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(208)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,209,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(30106,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [248:1-248:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30106),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(209)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,210,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(75720,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [249:1-249:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75720),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(210)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,211,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9210,_,@level_num_0),
   assign(v0,v0,v1,v2,v0,v1,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [250:1-250:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9210),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(RamDomain(211)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,212,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38590,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [251:1-251:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38590),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(212)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,213,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(29854,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [252:1-252:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29854),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],0,env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(213)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,214,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1420,_,@level_num_0),
   assign(v1,v0,v2,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [253:1-253:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[4]))) && (((env1[2]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(214)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,215,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65965,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [254:1-254:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65965),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(215)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,216,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(86199,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [255:1-255:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86199),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(216)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,217,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42621,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [256:1-256:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42621),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_57(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(217)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,218,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28746,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [257:1-257:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28746),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(218)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,219,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25525,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [258:1-258:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25525),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(219)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,220,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(84605,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [259:1-259:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84605),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(220)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,221,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63851,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [260:1-260:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63851),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(221)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,222,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7190,_,@level_num_0),
   assign(v2,v0,v1,v2,v0,v1,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [261:1-261:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7190),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[4]))) && (((env1[2]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(222)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,223,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72049,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [262:1-262:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72049),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_25(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(223)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,224,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(31145,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [263:1-263:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31145),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(224)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,225,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8461,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [264:1-264:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8461),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(225)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,226,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58678,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [265:1-265:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58678),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(226)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,227,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7528,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [266:1-266:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7528),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(227)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,228,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65106,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [267:1-267:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65106),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(228)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,229,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(54138,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [268:1-268:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54138),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(229)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,230,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62378,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [269:1-269:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62378),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(230)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,231,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2915,_,@level_num_0),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [270:1-270:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2915),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[1]) == (env1[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[4]),static_cast<RamDomain>(RamDomain(231)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,232,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(76168,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [271:1-271:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76168),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(232)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,233,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(87560,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [272:1-272:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87560),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(233)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,234,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9716,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [273:1-273:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9716),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(234)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,235,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61577,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [274:1-274:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61577),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],0,env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(235)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,236,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(88216,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [275:1-275:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88216),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(236)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,237,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(88040,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [276:1-276:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88040),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(237)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,238,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35188,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [277:1-277:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35188),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(238)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,239,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(474,_,@level_num_0),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [278:1-278:75])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(474),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[2]))) && (((env1[0]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(239)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,240,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62935,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [279:1-279:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62935),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(240)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,241,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43064,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [280:1-280:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43064),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(241)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,242,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57077,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [281:1-281:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57077),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(242)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,243,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61633,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [282:1-282:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61633),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(243)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,244,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11958,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   store(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [283:1-283:88])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11958),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_13_store->equalRange_3(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(244)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,245,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58726,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v1,v0,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [284:1-284:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58726),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_22(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(245)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,246,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(56946,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [285:1-285:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56946),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(246)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,247,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1338,_,@level_num_0),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [286:1-286:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1338),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[2]) == (env1[4]))) && (((env1[0]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(247)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,248,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(50426,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [287:1-287:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50426),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(248)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,249,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(46740,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [288:1-288:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(46740),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(249)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,250,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(66661,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [289:1-289:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66661),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(250)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,251,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42383,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [290:1-290:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42383),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(251)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,252,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(85064,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [291:1-291:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85064),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(252)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,253,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35514,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [292:1-292:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35514),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(253)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,254,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22098,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [293:1-293:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22098),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_57(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(254)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,255,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(88993,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [294:1-294:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88993),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_21(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(255)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,256,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25146,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [295:1-295:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25146),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_26(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(256)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,257,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47655,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [296:1-296:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47655),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(257)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,258,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6397,_,@level_num_0),
   assign(v1,v1,v0,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [297:1-297:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6397),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[4]))))) && (((env1[3]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(RamDomain(258)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,259,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(439,_,@level_num_0),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [298:1-298:75])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(439),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[4]))) && (((env1[1]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(259)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,260,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(51294,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [299:1-299:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51294),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(260)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,261,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78205,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [300:1-300:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78205),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(261)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,262,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(86206,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [301:1-301:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(262)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,263,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(51600,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [302:1-302:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51600),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(263)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,264,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38146,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [303:1-303:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38146),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[5]),static_cast<RamDomain>(RamDomain(264)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,265,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82123,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v1,v1,v0,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [304:1-304:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82123),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(265)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,266,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8929,_,@level_num_0),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [305:1-305:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8929),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[5]))) && (((env1[1]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(266)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,267,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(58529,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [306:1-306:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58529),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(267)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,268,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3527,_,@level_num_0),
   assign(v0,v0,v1,v2,v1,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [307:1-307:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3527),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[5]))))) && (((env1[2]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(RamDomain(268)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,269,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74481,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [308:1-308:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74481),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(269)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,270,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(39415,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v2,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [309:1-309:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39415),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(270)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,271,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(55665,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [310:1-310:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(55665),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(271)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,272,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8579,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [311:1-311:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8579),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(272)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,273,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(39475,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [312:1-312:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39475),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(273)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,274,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1197,_,@level_num_0),
   assign(v0,v2,v0,v1,v2,v1,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [313:1-313:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1197),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[2]))) && (((env1[3]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(274)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,275,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8358,_,@level_num_0),
   assign(v2,v1,v0,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [314:1-314:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8358),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[2]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(275)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,276,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(7893,_,@level_num_0),
   assign(v2,v0,v0,v1,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [315:1-315:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7893),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[1]) == (env1[2]))) && (((env1[1]) == (env1[5]))))) && (((env1[0]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(276)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,277,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21380,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [316:1-316:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21380),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(277)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,278,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(9894,_,@level_num_0),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [317:1-317:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9894),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[5]),static_cast<RamDomain>(RamDomain(278)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,279,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(28898,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [318:1-318:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28898),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(279)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,280,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41705,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [319:1-319:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41705),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(280)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,281,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(15571,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   receiver_actual(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [320:1-320:94])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_11_receiver_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_11_receiver_actual_op_ctxt,rel_11_receiver_actual->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15571),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_11_receiver_actual->equalRange_1(key,READ_OP_CONTEXT(rel_11_receiver_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(281)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,282,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(26717,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [321:1-321:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(26717),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(282)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,283,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61156,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [322:1-322:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61156),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(283)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,284,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(68901,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [323:1-323:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68901),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_62(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(284)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,285,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(23206,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v0,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [324:1-324:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_61(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(285)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,286,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25283,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [325:1-325:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25283),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(286)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,287,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(31758,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [326:1-326:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31758),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(287)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,288,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37984,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [327:1-327:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37984),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(288)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,289,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47385,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [328:1-328:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47385),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(289)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,290,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41373,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [329:1-329:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41373),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(290)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,291,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(52977,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [330:1-330:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52977),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,0,env1[0],env1[1],env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_60(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[1]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(291)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,292,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(90514,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [331:1-331:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90514),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_22(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(292)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,293,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(43754,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [332:1-332:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43754),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(293)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,294,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47926,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [333:1-333:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47926),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(294)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,295,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41394,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [334:1-334:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41394),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(295)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,296,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(57499,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [335:1-335:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57499),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(296)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,297,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(51220,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [336:1-336:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51220),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(297)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,298,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(32354,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [337:1-337:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32354),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(298)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,299,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(25411,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [338:1-338:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25411),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(299)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,300,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(13126,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   store(v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [339:1-339:88])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13126),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],0,0,0,0}});
auto range = rel_13_store->equalRange_1(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(300)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,301,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(69742,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [340:1-340:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69742),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(301)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,302,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(65932,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [341:1-341:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65932),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],0,env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(302)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,303,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(85236,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v2,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [342:1-342:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85236),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_26(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(303)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,304,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(29810,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [343:1-343:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29810),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_57(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(304)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,305,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(42564,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [344:1-344:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42564),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(305)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,306,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19565,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   actual(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [345:1-345:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19565),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_2_actual->equalRange_3(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(306)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,307,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72665,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [346:1-346:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72665),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(307)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,308,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(68281,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [347:1-347:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68281),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(308)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,309,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22831,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [348:1-348:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22831),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(309)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,310,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37332,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [349:1-349:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37332),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(310)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,311,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74385,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [350:1-350:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74385),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(311)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,312,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(78437,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [351:1-351:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78437),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[5]),static_cast<RamDomain>(RamDomain(312)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,313,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(22838,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [352:1-352:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22838),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(313)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,314,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(87809,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [353:1-353:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87809),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(314)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,315,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(49254,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [354:1-354:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49254),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_25(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(315)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,316,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(44215,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [355:1-355:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(44215),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[5]),static_cast<RamDomain>(RamDomain(316)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,317,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(80523,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v2,v1,v0,v2,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [356:1-356:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80523),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_6(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(317)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,318,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82193,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [357:1-357:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82193),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_44(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[4]))) && (((env2[0]) == (env2[1]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(318)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,319,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(45987,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v1,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [358:1-358:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45987),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(319)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,320,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(6975,_,@level_num_0),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [359:1-359:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6975),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[5]))) && (((env1[1]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(320)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,321,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36827,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [360:1-360:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36827),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(321)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,322,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11485,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   store(v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [361:1-361:88])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11485),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_13_store->equalRange_3(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(322)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,323,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(16357,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   formal(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [362:1-362:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16357),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{0,env1[1],env1[0],0,0}});
auto range = rel_5_formal->equalRange_6(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(323)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,324,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(645,_,@level_num_0),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [363:1-363:75])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(645),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[2]) == (env1[4]))))) && (((env1[3]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[3]),static_cast<RamDomain>(RamDomain(324)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,325,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(48143,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [364:1-364:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48143),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(325)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,326,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(49737,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [365:1-365:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49737),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(326)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,327,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(35157,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [366:1-366:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35157),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(327)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,328,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(83549,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [367:1-367:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(83549),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(328)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,329,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38054,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [368:1-368:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38054),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(329)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,330,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40513,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [369:1-369:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40513),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(330)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,331,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73312,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v1,v2,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [370:1-370:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73312),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[1],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(331)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,332,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2993,_,@level_num_0),
   assign(v2,v0,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [371:1-371:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2993),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[2]) == (env1[4]))) && (((env1[0]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(332)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,333,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(24761,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [372:1-372:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(24761),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(333)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,334,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74331,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [373:1-373:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74331),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(334)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,335,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(86947,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [374:1-374:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86947),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(335)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,336,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73061,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [375:1-375:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73061),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(336)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,337,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(34796,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [376:1-376:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34796),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(337)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,338,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(16408,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   formal(v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [377:1-377:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16408),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],0,0,0}});
auto range = rel_5_formal->equalRange_3(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(338)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,339,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62682,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [378:1-378:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62682),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(339)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,340,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(45099,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [379:1-379:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45099),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(340)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,341,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(23577,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [380:1-380:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23577),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(341)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,342,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(1817,_,@level_num_0),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [381:1-381:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1817),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(342)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,343,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(72525,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [382:1-382:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72525),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],0,0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_39(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(343)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,344,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(15594,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   receiver_actual(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [383:1-383:94])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_11_receiver_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_11_receiver_actual_op_ctxt,rel_11_receiver_actual->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15594),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_11_receiver_actual->equalRange_2(key,READ_OP_CONTEXT(rel_11_receiver_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(344)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,345,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(59956,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [384:1-384:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59956),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(345)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,346,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2691,_,@level_num_0),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [385:1-385:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2691),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[5]),static_cast<RamDomain>(RamDomain(346)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,347,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(77526,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [386:1-386:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(77526),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_46(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(347)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,348,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(62521,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [387:1-387:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62521),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],0,env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(348)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,349,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(71978,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v1,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [388:1-388:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71978),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(349)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,350,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33996,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v2,v1,v0,v2,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [389:1-389:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33996),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_38(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[4]))) && (((env2[0]) == (env2[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(350)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,351,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(2566,_,@level_num_0),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [390:1-390:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2566),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[1]) == (env1[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[4]),static_cast<RamDomain>(RamDomain(351)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,352,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(37569,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [391:1-391:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37569),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(352)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,353,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41823,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [392:1-392:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41823),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(353)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,354,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70372,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [393:1-393:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70372),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(354)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,355,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63076,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [394:1-394:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63076),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(355)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,356,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(3206,_,@level_num_0),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [395:1-395:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[1]))) && (((env1[0]) == (env1[4]))))) && (((env1[2]) == (env1[3]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[5]),static_cast<RamDomain>(RamDomain(356)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,357,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(81025,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [396:1-396:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81025),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(357)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,358,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(73095,_,@level_num_0),
   enclosing_type(v2,v1,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [397:1-397:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73095),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,0,env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_44(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[4]))) && (((env2[0]) == (env2[1]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(358)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,359,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74223,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [398:1-398:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74223),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[1]) == (env2[5]))) && (((env2[1]) == (env2[4]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(359)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,360,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(38235,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v2,v0,v1,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [399:1-399:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38235),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(360)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,361,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(8420,_,@level_num_0),
   assign(v0,v2,v1,v0,v2,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [400:1-400:76])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[0]) == (env1[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[1]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(361)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,362,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(84341,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [401:1-401:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84341),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(362)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,363,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(82506,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [402:1-402:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82506),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(363)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,364,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(41355,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v2,v0,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [403:1-403:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(RamDomain(364)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,365,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(69902,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [404:1-404:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69902),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(365)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,366,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(47259,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v1,v0,v2,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [405:1-405:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],0,env1[0],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_61(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(366)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,367,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(76243,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [406:1-406:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76243),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(367)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,368,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(64259,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [407:1-407:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(368)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,369,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(50646,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v1,v0,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [408:1-408:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50646),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(369)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,370,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(13416,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   load(v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [409:1-409:87])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13416),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{0,env1[1],env1[0],0,0}});
auto range = rel_8_load->equalRange_6(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(370)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,371,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74332,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [410:1-410:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74332),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(371)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,372,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(15882,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   receiver_formal(v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [411:1-411:94])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15882),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,4> key({{env1[0],0,0,0}});
auto range = rel_12_receiver_formal->equalRange_1(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(372)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,373,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(16387,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   formal(v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [412:1-412:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16387),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{0,env1[1],0,0,0}});
auto range = rel_5_formal->equalRange_2(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[2]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(373)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,374,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33055,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [413:1-413:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33055),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(374)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,375,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(30661,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [414:1-414:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30661),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(375)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,376,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(63340,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [415:1-415:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63340),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(376)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,377,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(90552,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [416:1-416:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90552),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_26(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[0]) == (env2[5]))) && (((env2[0]) == (env2[2]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(377)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,378,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(68585,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [417:1-417:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68585),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(378)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,379,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(31650,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v0,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [418:1-418:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31650),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(379)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,380,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(32953,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v2,v0,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [419:1-419:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32953),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_30(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(380)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,381,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(53568,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v0,v1,v2,v1,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [420:1-420:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53568),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(RamDomain(381)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,382,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(90982,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [421:1-421:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90982),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_53(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(382)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,383,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(45301,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [422:1-422:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45301),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],0,env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(383)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,384,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(74923,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [423:1-423:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74923),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(384)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,385,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(44452,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [424:1-424:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(44452),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(385)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,386,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(61826,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [425:1-425:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61826),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(386)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,387,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(21073,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v2,v0,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [426:1-426:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21073),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[3]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(387)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,388,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(70304,_,@level_num_0),
   enclosing_type(v0,v2,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [427:1-427:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70304),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(388)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,389,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(80494,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v2,v1,v0,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [428:1-428:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80494),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_51(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(389)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,390,(max(@level_num_0,@level_num_1)+1)) :- 
   Rule(667,_,@level_num_0),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_1).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [429:1-429:75])_");
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(667),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_3_assign) {
if( ((((((env1[2]) == (env1[4]))) && (((env1[1]) == (env1[3]))))) && (((env1[1]) == (env1[5]))))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(390)),static_cast<RamDomain>((std::max({env0[2], env1[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,391,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(33317,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v1,v1,v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [430:1-430:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33317),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[4]),static_cast<RamDomain>(RamDomain(391)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,392,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(30928,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [431:1-431:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30928),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{0,env1[1],env1[0],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_54(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[0]) == (env2[3]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(392)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,393,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11024,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   points_initial(v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [432:1-432:93])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11024),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,4> key({{0,env1[1],0,0}});
auto range = rel_9_points_initial->equalRange_2(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[0]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(393)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[3], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,394,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(19870,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   actual(v0,v2,v1,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [433:1-433:89])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19870),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[0],0,env1[1],0,0}});
auto range = rel_2_actual->equalRange_5(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(394)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,395,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(20342,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v1,v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [434:1-434:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20342),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(395)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,396,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(40936,_,@level_num_0),
   enclosing_type(v0,v1,_,@level_num_1),
   assign(v0,v2,v0,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [435:1-435:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40936),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(396)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,397,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(11329,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   store(v0,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [436:1-436:88])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11329),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,5> key({{env1[1],0,env1[1],0,0}});
auto range = rel_13_store->equalRange_5(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(RamDomain(397)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,398,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(39077,_,@level_num_0),
   enclosing_type(v1,v2,_,@level_num_1),
   assign(v1,v0,v2,v1,v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [437:1-437:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39077),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[0],0,env1[1],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_29(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[1]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(398)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,399,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(36263,_,@level_num_0),
   enclosing_type(v1,v0,_,@level_num_1),
   assign(v0,v1,v2,v0,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [438:1-438:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36263),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[5]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(RamDomain(399)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,400,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(83758,_,@level_num_0),
   enclosing_type(v2,v0,_,@level_num_1),
   assign(v0,v2,v1,v2,v1,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [439:1-439:101])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(83758),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_4_enclosing_type) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],0,env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_43(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[2]) == (env2[4]))) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(RamDomain(400)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[7], })) + (RamDomain(1)))}});
rel_14_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
rel_15_delta_pointsto_objcont->insertAll(*rel_14_pointsto_objcont);
iter = 0;
for(;;) {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v1,v2,4,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(2,_,@level_num_0),
   pointsto_objcont(v0,v1,v2,_,@level_num_1),
   receiver_formal(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [43:1-43:96])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_15_delta_pointsto_objcont->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_15_delta_pointsto_objcont_op_ctxt,rel_15_delta_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt,rel_16_new_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_15_delta_pointsto_objcont) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{env1[0],env1[1],env1[2],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[4] <= (std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(4)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1)))}});
rel_16_new_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v1,v0,v2,6,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(4,_,@level_num_0),
   pointsto_objcont(v0,v1,v2,_,@level_num_1),
   receiver_formal(v2,v0,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [45:1-45:96])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_15_delta_pointsto_objcont->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_15_delta_pointsto_objcont_op_ctxt,rel_15_delta_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt,rel_16_new_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_15_delta_pointsto_objcont) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{env1[1],env1[0],env1[2],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[4] <= (std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[2]),static_cast<RamDomain>(RamDomain(6)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[4], }), env2[3], })) + (RamDomain(1)))}});
rel_16_new_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v2,v0,v1,9,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(5,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   pointsto_objcont(v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [48:1-48:95])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_15_delta_pointsto_objcont->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_15_delta_pointsto_objcont_op_ctxt,rel_15_delta_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt,rel_16_new_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_15_delta_pointsto_objcont->equalRange_3(key,READ_OP_CONTEXT(rel_15_delta_pointsto_objcont_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{env2[2],env1[0],env1[1],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[4] <= (std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(9)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_16_new_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
SignalHandler::instance()->setMsg(R"_(pointsto_objcont(v0,v2,v1,12,(max(max(@level_num_0,@level_num_1),@level_num_2)+1)) :- 
   Rule(7,_,@level_num_0),
   points_initial(v0,v1,_,@level_num_1),
   pointsto_objcont(v1,v0,v2,_,@level_num_2).
in file /Users/jonathan/Desktop/Research/POPL20/artifact/scale_benchmarks/1-object-1-type_400/rules.small.dl [51:1-51:95])_");
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_15_delta_pointsto_objcont->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_15_delta_pointsto_objcont_op_ctxt,rel_15_delta_pointsto_objcont->createContext());
CREATE_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt,rel_16_new_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
for(const auto& env1 : *rel_9_points_initial) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],0,0,0}});
auto range = rel_15_delta_pointsto_objcont->equalRange_3(key,READ_OP_CONTEXT(rel_15_delta_pointsto_objcont_op_ctxt));
for(const auto& env2 : range) {
if( !([&]() -> bool {
auto existenceCheck = rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{env1[0],env2[2],env1[1],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
if (existenceCheck.empty()) return false; else return (*existenceCheck.begin())[4] <= (std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1));}()
)) {
Tuple<RamDomain,5> tuple({{static_cast<RamDomain>(env1[0]),static_cast<RamDomain>(env2[2]),static_cast<RamDomain>(env1[1]),static_cast<RamDomain>(RamDomain(12)),static_cast<RamDomain>((std::max({std::max({env0[2], env1[3], }), env2[4], })) + (RamDomain(1)))}});
rel_16_new_pointsto_objcont->insert(tuple,READ_OP_CONTEXT(rel_16_new_pointsto_objcont_op_ctxt));
}
}
}
}
}
}
if(rel_16_new_pointsto_objcont->empty()) break;
rel_14_pointsto_objcont->insertAll(*rel_16_new_pointsto_objcont);
std::swap(rel_15_delta_pointsto_objcont, rel_16_new_pointsto_objcont);
rel_16_new_pointsto_objcont->purge();
iter++;
}
iter = 0;
if (!isHintsProfilingEnabled()) rel_15_delta_pointsto_objcont->purge();
if (!isHintsProfilingEnabled()) rel_16_new_pointsto_objcont->purge();
if (performIO) {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1\tv2"},{"filename","./pointsto_objcont.csv"},{"name","pointsto_objcont"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_14_pointsto_objcont);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
}();
/* END STRATUM 13 */
/* BEGIN STRATUM 14 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.1(1,"v0,v2,v1","Rule","points_initial,v0,v1","receiver_formal,v1,v2","pointsto_objcont(v0,v2,v1) :- 
   Rule(10),
   points_initial(v0,v1),
   receiver_formal(v1,v2).").
in file  [0:0-0:0])_");
rel_17_pointsto_objcont_info_1->insert(RamDomain(1),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(3),RamDomain(4));
}();
/* END STRATUM 14 */
/* BEGIN STRATUM 15 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.10(10,"v0,v2,v1","Rule","points_initial,v0,v1","store,v1,v0,v2","pointsto_objcont(v0,v2,v1) :- 
   Rule(1),
   points_initial(v0,v1),
   store(v1,v0,v2).").
in file  [0:0-0:0])_");
rel_18_pointsto_objcont_info_10->insert(RamDomain(10),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(25));
}();
/* END STRATUM 15 */
/* BEGIN STRATUM 16 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.100(100,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(73695),
   enclosing_type(v2,v1),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_19_pointsto_objcont_info_100->insert(RamDomain(100),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(69),RamDomain(157));
}();
/* END STRATUM 16 */
/* BEGIN STRATUM 17 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.101(101,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(25962),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_20_pointsto_objcont_info_101->insert(RamDomain(101),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(122),RamDomain(158));
}();
/* END STRATUM 17 */
/* BEGIN STRATUM 18 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.102(102,"v0,v1,v2","Rule","enclosing_type,v0,v2","formal,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(17004),
   enclosing_type(v0,v2),
   formal(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_21_pointsto_objcont_info_102->insert(RamDomain(102),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(159),RamDomain(160));
}();
/* END STRATUM 18 */
/* BEGIN STRATUM 19 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.103(103,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(76127),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_22_pointsto_objcont_info_103->insert(RamDomain(103),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(72),RamDomain(161));
}();
/* END STRATUM 19 */
/* BEGIN STRATUM 20 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.104(104,"v0,v1,v2","Rule","assign,v1,v0,v2,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(4802),
   assign(v1,v0,v2,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_23_pointsto_objcont_info_104->insert(RamDomain(104),RamDomain(8),RamDomain(1),RamDomain(162),RamDomain(163));
}();
/* END STRATUM 20 */
/* BEGIN STRATUM 21 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.105(105,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(79890),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_24_pointsto_objcont_info_105->insert(RamDomain(105),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(85),RamDomain(164));
}();
/* END STRATUM 21 */
/* BEGIN STRATUM 22 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.106(106,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(70047),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_25_pointsto_objcont_info_106->insert(RamDomain(106),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(165));
}();
/* END STRATUM 22 */
/* BEGIN STRATUM 23 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.107(107,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(72259),
   enclosing_type(v1,v2),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_26_pointsto_objcont_info_107->insert(RamDomain(107),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(99),RamDomain(166));
}();
/* END STRATUM 23 */
/* BEGIN STRATUM 24 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.108(108,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(57647),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_27_pointsto_objcont_info_108->insert(RamDomain(108),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(47),RamDomain(167));
}();
/* END STRATUM 24 */
/* BEGIN STRATUM 25 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.109(109,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(41683),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_28_pointsto_objcont_info_109->insert(RamDomain(109),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(83),RamDomain(168));
}();
/* END STRATUM 25 */
/* BEGIN STRATUM 26 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.11(11,"v0,v1,v2","Rule","load,v0,v1,v2","points_initial,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(3),
   load(v0,v1,v2),
   points_initial(v2,v0).").
in file  [0:0-0:0])_");
rel_29_pointsto_objcont_info_11->insert(RamDomain(11),RamDomain(8),RamDomain(1),RamDomain(16),RamDomain(17),RamDomain(26));
}();
/* END STRATUM 26 */
/* BEGIN STRATUM 27 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.110(110,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(70884),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_30_pointsto_objcont_info_110->insert(RamDomain(110),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(92),RamDomain(169));
}();
/* END STRATUM 27 */
/* BEGIN STRATUM 28 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.111(111,"v0,v1,v2","Rule","enclosing_type,v0,v2","actual,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(19066),
   enclosing_type(v0,v2),
   actual(v1,v0,v2).").
in file  [0:0-0:0])_");
rel_31_pointsto_objcont_info_111->insert(RamDomain(111),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(170),RamDomain(171));
}();
/* END STRATUM 28 */
/* BEGIN STRATUM 29 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.112(112,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(56544),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_32_pointsto_objcont_info_112->insert(RamDomain(112),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(87),RamDomain(172));
}();
/* END STRATUM 29 */
/* BEGIN STRATUM 30 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.113(113,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(50975),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_33_pointsto_objcont_info_113->insert(RamDomain(113),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(173));
}();
/* END STRATUM 30 */
/* BEGIN STRATUM 31 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.114(114,"v0,v1,v2","Rule","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(1665),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_34_pointsto_objcont_info_114->insert(RamDomain(114),RamDomain(8),RamDomain(1),RamDomain(32),RamDomain(174));
}();
/* END STRATUM 31 */
/* BEGIN STRATUM 32 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.115(115,"v0,v1,v2","Rule","enclosing_type,v0,v1","actual,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(19450),
   enclosing_type(v0,v1),
   actual(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_35_pointsto_objcont_info_115->insert(RamDomain(115),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(9),RamDomain(175));
}();
/* END STRATUM 32 */
/* BEGIN STRATUM 33 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.116(116,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(56468),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_36_pointsto_objcont_info_116->insert(RamDomain(116),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(176));
}();
/* END STRATUM 33 */
/* BEGIN STRATUM 34 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.117(117,"v0,v1,v2","Rule","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(5608),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_37_pointsto_objcont_info_117->insert(RamDomain(117),RamDomain(8),RamDomain(1),RamDomain(85),RamDomain(177));
}();
/* END STRATUM 34 */
/* BEGIN STRATUM 35 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.118(118,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(67044),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_38_pointsto_objcont_info_118->insert(RamDomain(118),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(92),RamDomain(178));
}();
/* END STRATUM 35 */
/* BEGIN STRATUM 36 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.119(119,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(75403),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_39_pointsto_objcont_info_119->insert(RamDomain(119),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(87),RamDomain(179));
}();
/* END STRATUM 36 */
/* BEGIN STRATUM 37 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.12(12,"v0,v2,v1","Rule","points_initial,v0,v1","pointsto_objcont,v1,v0,v2","pointsto_objcont(v0,v2,v1) :- 
   Rule(7),
   points_initial(v0,v1),
   pointsto_objcont(v1,v0,v2).").
in file  [0:0-0:0])_");
rel_40_pointsto_objcont_info_12->insert(RamDomain(12),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(23),RamDomain(27));
}();
/* END STRATUM 37 */
/* BEGIN STRATUM 38 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.120(120,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(52086),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_41_pointsto_objcont_info_120->insert(RamDomain(120),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(180),RamDomain(181));
}();
/* END STRATUM 38 */
/* BEGIN STRATUM 39 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.121(121,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(37139),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_42_pointsto_objcont_info_121->insert(RamDomain(121),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(34),RamDomain(182));
}();
/* END STRATUM 39 */
/* BEGIN STRATUM 40 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.122(122,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(64840),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_43_pointsto_objcont_info_122->insert(RamDomain(122),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(183));
}();
/* END STRATUM 40 */
/* BEGIN STRATUM 41 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.123(123,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(57339),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_44_pointsto_objcont_info_123->insert(RamDomain(123),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(42),RamDomain(184));
}();
/* END STRATUM 41 */
/* BEGIN STRATUM 42 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.124(124,"v0,v1,v2","Rule","enclosing_type,v0,v2","points_initial,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(10964),
   enclosing_type(v0,v2),
   points_initial(v1,v2).").
in file  [0:0-0:0])_");
rel_45_pointsto_objcont_info_124->insert(RamDomain(124),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(185),RamDomain(186));
}();
/* END STRATUM 42 */
/* BEGIN STRATUM 43 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.125(125,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(89827),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_46_pointsto_objcont_info_125->insert(RamDomain(125),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(162),RamDomain(187));
}();
/* END STRATUM 43 */
/* BEGIN STRATUM 44 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.126(126,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(89093),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_47_pointsto_objcont_info_126->insert(RamDomain(126),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(66),RamDomain(188));
}();
/* END STRATUM 44 */
/* BEGIN STRATUM 45 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.127(127,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(23476),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_48_pointsto_objcont_info_127->insert(RamDomain(127),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(92),RamDomain(189));
}();
/* END STRATUM 45 */
/* BEGIN STRATUM 46 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.128(128,"v0,v1,v2","Rule","enclosing_type,v0,v2","formal,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(17280),
   enclosing_type(v0,v2),
   formal(v2,v0,v1).").
in file  [0:0-0:0])_");
rel_49_pointsto_objcont_info_128->insert(RamDomain(128),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(190),RamDomain(191));
}();
/* END STRATUM 46 */
/* BEGIN STRATUM 47 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.129(129,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(64388),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_50_pointsto_objcont_info_129->insert(RamDomain(129),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(192));
}();
/* END STRATUM 47 */
/* BEGIN STRATUM 48 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.13(13,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(69300),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_51_pointsto_objcont_info_13->insert(RamDomain(13),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(29),RamDomain(30));
}();
/* END STRATUM 48 */
/* BEGIN STRATUM 49 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.130(130,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(22401),
   enclosing_type(v2,v1),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_52_pointsto_objcont_info_130->insert(RamDomain(130),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(94),RamDomain(193));
}();
/* END STRATUM 49 */
/* BEGIN STRATUM 50 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.131(131,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(34014),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_53_pointsto_objcont_info_131->insert(RamDomain(131),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(47),RamDomain(194));
}();
/* END STRATUM 50 */
/* BEGIN STRATUM 51 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.132(132,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(32608),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_54_pointsto_objcont_info_132->insert(RamDomain(132),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(195));
}();
/* END STRATUM 51 */
/* BEGIN STRATUM 52 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.133(133,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(60907),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_55_pointsto_objcont_info_133->insert(RamDomain(133),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(135),RamDomain(196));
}();
/* END STRATUM 52 */
/* BEGIN STRATUM 53 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.134(134,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(65891),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_56_pointsto_objcont_info_134->insert(RamDomain(134),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(69),RamDomain(197));
}();
/* END STRATUM 53 */
/* BEGIN STRATUM 54 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.135(135,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(37048),
   enclosing_type(v2,v0),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_57_pointsto_objcont_info_135->insert(RamDomain(135),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(85),RamDomain(198));
}();
/* END STRATUM 54 */
/* BEGIN STRATUM 55 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.136(136,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74379),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_58_pointsto_objcont_info_136->insert(RamDomain(136),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(199));
}();
/* END STRATUM 55 */
/* BEGIN STRATUM 56 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.137(137,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(47342),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_59_pointsto_objcont_info_137->insert(RamDomain(137),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(66),RamDomain(200));
}();
/* END STRATUM 56 */
/* BEGIN STRATUM 57 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.138(138,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(49990),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_60_pointsto_objcont_info_138->insert(RamDomain(138),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(47),RamDomain(201));
}();
/* END STRATUM 57 */
/* BEGIN STRATUM 58 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.139(139,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(51700),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_61_pointsto_objcont_info_139->insert(RamDomain(139),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(202));
}();
/* END STRATUM 58 */
/* BEGIN STRATUM 59 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.14(14,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(56630),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_62_pointsto_objcont_info_14->insert(RamDomain(14),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(32),RamDomain(33));
}();
/* END STRATUM 59 */
/* BEGIN STRATUM 60 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.140(140,"v0,v1,v2","Rule","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(6709),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_63_pointsto_objcont_info_140->insert(RamDomain(140),RamDomain(8),RamDomain(1),RamDomain(78),RamDomain(203));
}();
/* END STRATUM 60 */
/* BEGIN STRATUM 61 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.141(141,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(85928),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_64_pointsto_objcont_info_141->insert(RamDomain(141),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(85),RamDomain(204));
}();
/* END STRATUM 61 */
/* BEGIN STRATUM 62 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.142(142,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(27710),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_65_pointsto_objcont_info_142->insert(RamDomain(142),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(72),RamDomain(205));
}();
/* END STRATUM 62 */
/* BEGIN STRATUM 63 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.143(143,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(82355),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_66_pointsto_objcont_info_143->insert(RamDomain(143),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(135),RamDomain(206));
}();
/* END STRATUM 63 */
/* BEGIN STRATUM 64 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.144(144,"v0,v1,v2","Rule","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(9044),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_67_pointsto_objcont_info_144->insert(RamDomain(144),RamDomain(8),RamDomain(1),RamDomain(69),RamDomain(207));
}();
/* END STRATUM 64 */
/* BEGIN STRATUM 65 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.145(145,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(54183),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_68_pointsto_objcont_info_145->insert(RamDomain(145),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(208));
}();
/* END STRATUM 65 */
/* BEGIN STRATUM 66 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.146(146,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(78074),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_69_pointsto_objcont_info_146->insert(RamDomain(146),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(209));
}();
/* END STRATUM 66 */
/* BEGIN STRATUM 67 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.147(147,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74364),
   enclosing_type(v2,v1),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_70_pointsto_objcont_info_147->insert(RamDomain(147),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(135),RamDomain(210));
}();
/* END STRATUM 67 */
/* BEGIN STRATUM 68 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.148(148,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(80260),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_71_pointsto_objcont_info_148->insert(RamDomain(148),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(38),RamDomain(211));
}();
/* END STRATUM 68 */
/* BEGIN STRATUM 69 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.149(149,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(67346),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_72_pointsto_objcont_info_149->insert(RamDomain(149),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(212),RamDomain(213));
}();
/* END STRATUM 69 */
/* BEGIN STRATUM 70 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.15(15,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(34295),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_73_pointsto_objcont_info_15->insert(RamDomain(15),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(34),RamDomain(35));
}();
/* END STRATUM 70 */
/* BEGIN STRATUM 71 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.150(150,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(35125),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_74_pointsto_objcont_info_150->insert(RamDomain(150),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(87),RamDomain(214));
}();
/* END STRATUM 71 */
/* BEGIN STRATUM 72 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.151(151,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(59200),
   enclosing_type(v2,v0),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_75_pointsto_objcont_info_151->insert(RamDomain(151),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(135),RamDomain(215));
}();
/* END STRATUM 72 */
/* BEGIN STRATUM 73 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.152(152,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(78013),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_76_pointsto_objcont_info_152->insert(RamDomain(152),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(92),RamDomain(216));
}();
/* END STRATUM 73 */
/* BEGIN STRATUM 74 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.153(153,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(64376),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_77_pointsto_objcont_info_153->insert(RamDomain(153),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(38),RamDomain(217));
}();
/* END STRATUM 74 */
/* BEGIN STRATUM 75 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.154(154,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(29254),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_78_pointsto_objcont_info_154->insert(RamDomain(154),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(52),RamDomain(218));
}();
/* END STRATUM 75 */
/* BEGIN STRATUM 76 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.155(155,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(43019),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_79_pointsto_objcont_info_155->insert(RamDomain(155),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(219));
}();
/* END STRATUM 76 */
/* BEGIN STRATUM 77 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.156(156,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(72564),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_80_pointsto_objcont_info_156->insert(RamDomain(156),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(72),RamDomain(220));
}();
/* END STRATUM 77 */
/* BEGIN STRATUM 78 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.157(157,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(21285),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_81_pointsto_objcont_info_157->insert(RamDomain(157),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(47),RamDomain(221));
}();
/* END STRATUM 78 */
/* BEGIN STRATUM 79 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.158(158,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(69299),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_82_pointsto_objcont_info_158->insert(RamDomain(158),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(99),RamDomain(222));
}();
/* END STRATUM 79 */
/* BEGIN STRATUM 80 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.159(159,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(21348),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_83_pointsto_objcont_info_159->insert(RamDomain(159),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(42),RamDomain(223));
}();
/* END STRATUM 80 */
/* BEGIN STRATUM 81 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.16(16,"v0,v1,v2","Rule","enclosing_type,v2,v0","actual,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(19791),
   enclosing_type(v2,v0),
   actual(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_84_pointsto_objcont_info_16->insert(RamDomain(16),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(9),RamDomain(37));
}();
/* END STRATUM 81 */
/* BEGIN STRATUM 82 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.160(160,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(54555),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_85_pointsto_objcont_info_160->insert(RamDomain(160),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(115),RamDomain(224));
}();
/* END STRATUM 82 */
/* BEGIN STRATUM 83 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.161(161,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(62981),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_86_pointsto_objcont_info_161->insert(RamDomain(161),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(122),RamDomain(225));
}();
/* END STRATUM 83 */
/* BEGIN STRATUM 84 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.162(162,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(68694),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_87_pointsto_objcont_info_162->insert(RamDomain(162),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(115),RamDomain(226));
}();
/* END STRATUM 84 */
/* BEGIN STRATUM 85 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.163(163,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(6750),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_88_pointsto_objcont_info_163->insert(RamDomain(163),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(227));
}();
/* END STRATUM 85 */
/* BEGIN STRATUM 86 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.164(164,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(47086),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_89_pointsto_objcont_info_164->insert(RamDomain(164),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(228));
}();
/* END STRATUM 86 */
/* BEGIN STRATUM 87 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.165(165,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(26939),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_90_pointsto_objcont_info_165->insert(RamDomain(165),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(229));
}();
/* END STRATUM 87 */
/* BEGIN STRATUM 88 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.166(166,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(67670),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_91_pointsto_objcont_info_166->insert(RamDomain(166),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(47),RamDomain(230));
}();
/* END STRATUM 88 */
/* BEGIN STRATUM 89 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.167(167,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(73511),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_92_pointsto_objcont_info_167->insert(RamDomain(167),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(72),RamDomain(231));
}();
/* END STRATUM 89 */
/* BEGIN STRATUM 90 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.168(168,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(58608),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_93_pointsto_objcont_info_168->insert(RamDomain(168),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(232));
}();
/* END STRATUM 90 */
/* BEGIN STRATUM 91 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.169(169,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(91582),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_94_pointsto_objcont_info_169->insert(RamDomain(169),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(38),RamDomain(233));
}();
/* END STRATUM 91 */
/* BEGIN STRATUM 92 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.17(17,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(48017),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_95_pointsto_objcont_info_17->insert(RamDomain(17),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(39));
}();
/* END STRATUM 92 */
/* BEGIN STRATUM 93 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.170(170,"v0,v1,v2","Rule","load,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(170),
   load(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_96_pointsto_objcont_info_170->insert(RamDomain(170),RamDomain(8),RamDomain(1),RamDomain(16),RamDomain(234));
}();
/* END STRATUM 93 */
/* BEGIN STRATUM 94 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.171(171,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(25399),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_97_pointsto_objcont_info_171->insert(RamDomain(171),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(115),RamDomain(235));
}();
/* END STRATUM 94 */
/* BEGIN STRATUM 95 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.172(172,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(75363),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_98_pointsto_objcont_info_172->insert(RamDomain(172),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(99),RamDomain(236));
}();
/* END STRATUM 95 */
/* BEGIN STRATUM 96 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.173(173,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(30037),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_99_pointsto_objcont_info_173->insert(RamDomain(173),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(237));
}();
/* END STRATUM 96 */
/* BEGIN STRATUM 97 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.174(174,"v0,v1,v2","Rule","enclosing_type,v1,v0","formal,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(17833),
   enclosing_type(v1,v0),
   formal(v1,v0,v2).").
in file  [0:0-0:0])_");
rel_100_pointsto_objcont_info_174->insert(RamDomain(174),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(238),RamDomain(239));
}();
/* END STRATUM 97 */
/* BEGIN STRATUM 98 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.175(175,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(35561),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_101_pointsto_objcont_info_175->insert(RamDomain(175),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(85),RamDomain(240));
}();
/* END STRATUM 98 */
/* BEGIN STRATUM 99 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.176(176,"v0,v1,v2","Rule","enclosing_type,v0,v1","actual,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(18241),
   enclosing_type(v0,v1),
   actual(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_102_pointsto_objcont_info_176->insert(RamDomain(176),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(9),RamDomain(241));
}();
/* END STRATUM 99 */
/* BEGIN STRATUM 100 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.177(177,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(47462),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_103_pointsto_objcont_info_177->insert(RamDomain(177),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(135),RamDomain(242));
}();
/* END STRATUM 100 */
/* BEGIN STRATUM 101 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.178(178,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(47663),
   enclosing_type(v2,v1),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_104_pointsto_objcont_info_178->insert(RamDomain(178),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(47),RamDomain(243));
}();
/* END STRATUM 101 */
/* BEGIN STRATUM 102 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.179(179,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v1,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(71901),
   enclosing_type(v1,v2),
   assign(v1,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_105_pointsto_objcont_info_179->insert(RamDomain(179),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(63),RamDomain(244));
}();
/* END STRATUM 102 */
/* BEGIN STRATUM 103 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.18(18,"v0,v1,v2","Rule","enclosing_type,v0,v1","load,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(13813),
   enclosing_type(v0,v1),
   load(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_106_pointsto_objcont_info_18->insert(RamDomain(18),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(16),RamDomain(40));
}();
/* END STRATUM 103 */
/* BEGIN STRATUM 104 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.180(180,"v0,v1,v2","Rule","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(3343),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_107_pointsto_objcont_info_180->insert(RamDomain(180),RamDomain(8),RamDomain(1),RamDomain(105),RamDomain(245));
}();
/* END STRATUM 104 */
/* BEGIN STRATUM 105 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.181(181,"v0,v1,v2","Rule","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(6138),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_108_pointsto_objcont_info_181->insert(RamDomain(181),RamDomain(8),RamDomain(1),RamDomain(135),RamDomain(246));
}();
/* END STRATUM 105 */
/* BEGIN STRATUM 106 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.182(182,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(28853),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_109_pointsto_objcont_info_182->insert(RamDomain(182),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(105),RamDomain(247));
}();
/* END STRATUM 106 */
/* BEGIN STRATUM 107 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.183(183,"v0,v1,v2","Rule","enclosing_type,v0,v1","store,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(11948),
   enclosing_type(v0,v1),
   store(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_110_pointsto_objcont_info_183->insert(RamDomain(183),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(248),RamDomain(249));
}();
/* END STRATUM 107 */
/* BEGIN STRATUM 108 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.184(184,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(85549),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_111_pointsto_objcont_info_184->insert(RamDomain(184),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(250));
}();
/* END STRATUM 108 */
/* BEGIN STRATUM 109 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.185(185,"v0,v1,v2","Rule","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(7943),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_112_pointsto_objcont_info_185->insert(RamDomain(185),RamDomain(8),RamDomain(1),RamDomain(135),RamDomain(251));
}();
/* END STRATUM 109 */
/* BEGIN STRATUM 110 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.186(186,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(58357),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_113_pointsto_objcont_info_186->insert(RamDomain(186),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(252));
}();
/* END STRATUM 110 */
/* BEGIN STRATUM 111 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.187(187,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(9616),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_114_pointsto_objcont_info_187->insert(RamDomain(187),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(253));
}();
/* END STRATUM 111 */
/* BEGIN STRATUM 112 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.188(188,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(78374),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_115_pointsto_objcont_info_188->insert(RamDomain(188),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(254),RamDomain(255));
}();
/* END STRATUM 112 */
/* BEGIN STRATUM 113 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.189(189,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(89794),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_116_pointsto_objcont_info_189->insert(RamDomain(189),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(34),RamDomain(256));
}();
/* END STRATUM 113 */
/* BEGIN STRATUM 114 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.19(19,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(28791),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_117_pointsto_objcont_info_19->insert(RamDomain(19),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(42),RamDomain(43));
}();
/* END STRATUM 114 */
/* BEGIN STRATUM 115 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.190(190,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(73931),
   enclosing_type(v1,v0),
   assign(v0,v2,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_118_pointsto_objcont_info_190->insert(RamDomain(190),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(257),RamDomain(258));
}();
/* END STRATUM 115 */
/* BEGIN STRATUM 116 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.191(191,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(61289),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_119_pointsto_objcont_info_191->insert(RamDomain(191),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(259));
}();
/* END STRATUM 116 */
/* BEGIN STRATUM 117 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.192(192,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v1,v0,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(46907),
   enclosing_type(v0,v1),
   assign(v1,v1,v0,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_120_pointsto_objcont_info_192->insert(RamDomain(192),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(117),RamDomain(260));
}();
/* END STRATUM 117 */
/* BEGIN STRATUM 118 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.193(193,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(81145),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_121_pointsto_objcont_info_193->insert(RamDomain(193),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(38),RamDomain(261));
}();
/* END STRATUM 118 */
/* BEGIN STRATUM 119 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.194(194,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(50995),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_122_pointsto_objcont_info_194->insert(RamDomain(194),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(38),RamDomain(262));
}();
/* END STRATUM 119 */
/* BEGIN STRATUM 120 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.195(195,"v0,v1,v2","Rule","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(6355),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_123_pointsto_objcont_info_195->insert(RamDomain(195),RamDomain(8),RamDomain(1),RamDomain(69),RamDomain(263));
}();
/* END STRATUM 120 */
/* BEGIN STRATUM 121 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.196(196,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(7560),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_124_pointsto_objcont_info_196->insert(RamDomain(196),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(264));
}();
/* END STRATUM 121 */
/* BEGIN STRATUM 122 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.197(197,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(33965),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_125_pointsto_objcont_info_197->insert(RamDomain(197),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(69),RamDomain(265));
}();
/* END STRATUM 122 */
/* BEGIN STRATUM 123 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.198(198,"v0,v1,v2","Rule","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(3904),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_126_pointsto_objcont_info_198->insert(RamDomain(198),RamDomain(8),RamDomain(1),RamDomain(75),RamDomain(266));
}();
/* END STRATUM 123 */
/* BEGIN STRATUM 124 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.199(199,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(79705),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_127_pointsto_objcont_info_199->insert(RamDomain(199),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(105),RamDomain(267));
}();
/* END STRATUM 124 */
/* BEGIN STRATUM 125 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.2(2,"v2,v0,v1","Rule","points_initial,v0,v1","store,v1,v0,v2","pointsto_objcont(v2,v0,v1) :- 
   Rule(6),
   points_initial(v0,v1),
   store(v1,v0,v2).").
in file  [0:0-0:0])_");
rel_128_pointsto_objcont_info_2->insert(RamDomain(2),RamDomain(5),RamDomain(1),RamDomain(2),RamDomain(6),RamDomain(7));
}();
/* END STRATUM 125 */
/* BEGIN STRATUM 126 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.20(20,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(36691),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_129_pointsto_objcont_info_20->insert(RamDomain(20),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(44));
}();
/* END STRATUM 126 */
/* BEGIN STRATUM 127 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.200(200,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(54686),
   enclosing_type(v0,v2),
   assign(v2,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_130_pointsto_objcont_info_200->insert(RamDomain(200),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(268),RamDomain(269));
}();
/* END STRATUM 127 */
/* BEGIN STRATUM 128 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.201(201,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(71957),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_131_pointsto_objcont_info_201->insert(RamDomain(201),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(270));
}();
/* END STRATUM 128 */
/* BEGIN STRATUM 129 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.202(202,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(57810),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_132_pointsto_objcont_info_202->insert(RamDomain(202),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(32),RamDomain(271));
}();
/* END STRATUM 129 */
/* BEGIN STRATUM 130 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.203(203,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(81803),
   enclosing_type(v0,v2),
   assign(v1,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_133_pointsto_objcont_info_203->insert(RamDomain(203),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(133),RamDomain(272));
}();
/* END STRATUM 130 */
/* BEGIN STRATUM 131 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.204(204,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(53640),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_134_pointsto_objcont_info_204->insert(RamDomain(204),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(34),RamDomain(273));
}();
/* END STRATUM 131 */
/* BEGIN STRATUM 132 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.205(205,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(85336),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_135_pointsto_objcont_info_205->insert(RamDomain(205),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(78),RamDomain(274));
}();
/* END STRATUM 132 */
/* BEGIN STRATUM 133 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.206(206,"v0,v1,v2","Rule","enclosing_type,v2,v0","store,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(11627),
   enclosing_type(v2,v0),
   store(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_136_pointsto_objcont_info_206->insert(RamDomain(206),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(248),RamDomain(275));
}();
/* END STRATUM 133 */
/* BEGIN STRATUM 134 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.207(207,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(75557),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_137_pointsto_objcont_info_207->insert(RamDomain(207),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(72),RamDomain(276));
}();
/* END STRATUM 134 */
/* BEGIN STRATUM 135 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.208(208,"v0,v1,v2","Rule","enclosing_type,v0,v2","actual,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(18878),
   enclosing_type(v0,v2),
   actual(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_138_pointsto_objcont_info_208->insert(RamDomain(208),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(9),RamDomain(277));
}();
/* END STRATUM 135 */
/* BEGIN STRATUM 136 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.209(209,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(30106),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_139_pointsto_objcont_info_209->insert(RamDomain(209),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(278));
}();
/* END STRATUM 136 */
/* BEGIN STRATUM 137 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.21(21,"v0,v1,v2","Rule","enclosing_type,v0,v1","invocation,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(15217),
   enclosing_type(v0,v1),
   invocation(v0,v2).").
in file  [0:0-0:0])_");
rel_140_pointsto_objcont_info_21->insert(RamDomain(21),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(45),RamDomain(46));
}();
/* END STRATUM 137 */
/* BEGIN STRATUM 138 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.210(210,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(75720),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_141_pointsto_objcont_info_210->insert(RamDomain(210),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(279));
}();
/* END STRATUM 138 */
/* BEGIN STRATUM 139 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.211(211,"v0,v1,v2","Rule","assign,v0,v0,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(9210),
   assign(v0,v0,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_142_pointsto_objcont_info_211->insert(RamDomain(211),RamDomain(8),RamDomain(1),RamDomain(254),RamDomain(280));
}();
/* END STRATUM 139 */
/* BEGIN STRATUM 140 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.212(212,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v2,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(38590),
   enclosing_type(v1,v0),
   assign(v2,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_143_pointsto_objcont_info_212->insert(RamDomain(212),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(281),RamDomain(282));
}();
/* END STRATUM 140 */
/* BEGIN STRATUM 141 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.213(213,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(29854),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_144_pointsto_objcont_info_213->insert(RamDomain(213),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(257),RamDomain(283));
}();
/* END STRATUM 141 */
/* BEGIN STRATUM 142 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.214(214,"v0,v1,v2","Rule","assign,v1,v0,v2,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(1420),
   assign(v1,v0,v2,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_145_pointsto_objcont_info_214->insert(RamDomain(214),RamDomain(8),RamDomain(1),RamDomain(162),RamDomain(284));
}();
/* END STRATUM 142 */
/* BEGIN STRATUM 143 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.215(215,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(65965),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_146_pointsto_objcont_info_215->insert(RamDomain(215),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(66),RamDomain(285));
}();
/* END STRATUM 143 */
/* BEGIN STRATUM 144 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.216(216,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(86199),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_147_pointsto_objcont_info_216->insert(RamDomain(216),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(72),RamDomain(286));
}();
/* END STRATUM 144 */
/* BEGIN STRATUM 145 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.217(217,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(42621),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_148_pointsto_objcont_info_217->insert(RamDomain(217),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(52),RamDomain(287));
}();
/* END STRATUM 145 */
/* BEGIN STRATUM 146 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.218(218,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(28746),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_149_pointsto_objcont_info_218->insert(RamDomain(218),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(75),RamDomain(288));
}();
/* END STRATUM 146 */
/* BEGIN STRATUM 147 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.219(219,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(25525),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_150_pointsto_objcont_info_219->insert(RamDomain(219),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(135),RamDomain(289));
}();
/* END STRATUM 147 */
/* BEGIN STRATUM 148 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.22(22,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(27895),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_151_pointsto_objcont_info_22->insert(RamDomain(22),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(47),RamDomain(48));
}();
/* END STRATUM 148 */
/* BEGIN STRATUM 149 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.220(220,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(84605),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_152_pointsto_objcont_info_220->insert(RamDomain(220),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(99),RamDomain(290));
}();
/* END STRATUM 149 */
/* BEGIN STRATUM 150 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.221(221,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(63851),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_153_pointsto_objcont_info_221->insert(RamDomain(221),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(291));
}();
/* END STRATUM 150 */
/* BEGIN STRATUM 151 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.222(222,"v0,v1,v2","Rule","assign,v2,v0,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(7190),
   assign(v2,v0,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_154_pointsto_objcont_info_222->insert(RamDomain(222),RamDomain(8),RamDomain(1),RamDomain(292),RamDomain(293));
}();
/* END STRATUM 151 */
/* BEGIN STRATUM 152 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.223(223,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(72049),
   enclosing_type(v2,v0),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_155_pointsto_objcont_info_223->insert(RamDomain(223),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(34),RamDomain(294));
}();
/* END STRATUM 152 */
/* BEGIN STRATUM 153 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.224(224,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(31145),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_156_pointsto_objcont_info_224->insert(RamDomain(224),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(295));
}();
/* END STRATUM 153 */
/* BEGIN STRATUM 154 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.225(225,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(8461),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_157_pointsto_objcont_info_225->insert(RamDomain(225),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(296));
}();
/* END STRATUM 154 */
/* BEGIN STRATUM 155 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.226(226,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(58678),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_158_pointsto_objcont_info_226->insert(RamDomain(226),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(297));
}();
/* END STRATUM 155 */
/* BEGIN STRATUM 156 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.227(227,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(7528),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_159_pointsto_objcont_info_227->insert(RamDomain(227),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(298));
}();
/* END STRATUM 156 */
/* BEGIN STRATUM 157 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.228(228,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(65106),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_160_pointsto_objcont_info_228->insert(RamDomain(228),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(94),RamDomain(299));
}();
/* END STRATUM 157 */
/* BEGIN STRATUM 158 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.229(229,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(54138),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_161_pointsto_objcont_info_229->insert(RamDomain(229),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(300));
}();
/* END STRATUM 158 */
/* BEGIN STRATUM 159 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.23(23,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(35837),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_162_pointsto_objcont_info_23->insert(RamDomain(23),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(49));
}();
/* END STRATUM 159 */
/* BEGIN STRATUM 160 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.230(230,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(62378),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_163_pointsto_objcont_info_230->insert(RamDomain(230),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(69),RamDomain(301));
}();
/* END STRATUM 160 */
/* BEGIN STRATUM 161 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.231(231,"v0,v1,v2","Rule","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(2915),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_164_pointsto_objcont_info_231->insert(RamDomain(231),RamDomain(8),RamDomain(1),RamDomain(52),RamDomain(302));
}();
/* END STRATUM 161 */
/* BEGIN STRATUM 162 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.232(232,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(76168),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_165_pointsto_objcont_info_232->insert(RamDomain(232),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(83),RamDomain(303));
}();
/* END STRATUM 162 */
/* BEGIN STRATUM 163 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.233(233,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(87560),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_166_pointsto_objcont_info_233->insert(RamDomain(233),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(304));
}();
/* END STRATUM 163 */
/* BEGIN STRATUM 164 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.234(234,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(9716),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_167_pointsto_objcont_info_234->insert(RamDomain(234),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(305));
}();
/* END STRATUM 164 */
/* BEGIN STRATUM 165 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.235(235,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(61577),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_168_pointsto_objcont_info_235->insert(RamDomain(235),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(306),RamDomain(307));
}();
/* END STRATUM 165 */
/* BEGIN STRATUM 166 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.236(236,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(88216),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_169_pointsto_objcont_info_236->insert(RamDomain(236),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(32),RamDomain(308));
}();
/* END STRATUM 166 */
/* BEGIN STRATUM 167 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.237(237,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(88040),
   enclosing_type(v1,v2),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_170_pointsto_objcont_info_237->insert(RamDomain(237),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(47),RamDomain(309));
}();
/* END STRATUM 167 */
/* BEGIN STRATUM 168 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.238(238,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(35188),
   enclosing_type(v1,v0),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_171_pointsto_objcont_info_238->insert(RamDomain(238),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(94),RamDomain(310));
}();
/* END STRATUM 168 */
/* BEGIN STRATUM 169 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.239(239,"v0,v1,v2","Rule","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(474),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_172_pointsto_objcont_info_239->insert(RamDomain(239),RamDomain(8),RamDomain(1),RamDomain(105),RamDomain(311));
}();
/* END STRATUM 169 */
/* BEGIN STRATUM 170 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.24(24,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(86626),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_173_pointsto_objcont_info_24->insert(RamDomain(24),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(32),RamDomain(51));
}();
/* END STRATUM 170 */
/* BEGIN STRATUM 171 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.240(240,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(62935),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_174_pointsto_objcont_info_240->insert(RamDomain(240),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(180),RamDomain(312));
}();
/* END STRATUM 171 */
/* BEGIN STRATUM 172 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.241(241,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(43064),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_175_pointsto_objcont_info_241->insert(RamDomain(241),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(85),RamDomain(313));
}();
/* END STRATUM 172 */
/* BEGIN STRATUM 173 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.242(242,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(57077),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_176_pointsto_objcont_info_242->insert(RamDomain(242),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(52),RamDomain(314));
}();
/* END STRATUM 173 */
/* BEGIN STRATUM 174 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.243(243,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(61633),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_177_pointsto_objcont_info_243->insert(RamDomain(243),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(38),RamDomain(315));
}();
/* END STRATUM 174 */
/* BEGIN STRATUM 175 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.244(244,"v0,v1,v2","Rule","enclosing_type,v0,v1","store,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(11958),
   enclosing_type(v0,v1),
   store(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_178_pointsto_objcont_info_244->insert(RamDomain(244),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(248),RamDomain(316));
}();
/* END STRATUM 175 */
/* BEGIN STRATUM 176 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.245(245,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v1,v0,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(58726),
   enclosing_type(v0,v1),
   assign(v2,v1,v0,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_179_pointsto_objcont_info_245->insert(RamDomain(245),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(89),RamDomain(317));
}();
/* END STRATUM 176 */
/* BEGIN STRATUM 177 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.246(246,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(56946),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_180_pointsto_objcont_info_246->insert(RamDomain(246),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(87),RamDomain(318));
}();
/* END STRATUM 177 */
/* BEGIN STRATUM 178 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.247(247,"v0,v1,v2","Rule","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(1338),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_181_pointsto_objcont_info_247->insert(RamDomain(247),RamDomain(8),RamDomain(1),RamDomain(69),RamDomain(319));
}();
/* END STRATUM 178 */
/* BEGIN STRATUM 179 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.248(248,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(50426),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_182_pointsto_objcont_info_248->insert(RamDomain(248),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(320));
}();
/* END STRATUM 179 */
/* BEGIN STRATUM 180 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.249(249,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v2,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(46740),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_183_pointsto_objcont_info_249->insert(RamDomain(249),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(124),RamDomain(321));
}();
/* END STRATUM 180 */
/* BEGIN STRATUM 181 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.25(25,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(22946),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_184_pointsto_objcont_info_25->insert(RamDomain(25),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(52),RamDomain(53));
}();
/* END STRATUM 181 */
/* BEGIN STRATUM 182 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.250(250,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(66661),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_185_pointsto_objcont_info_250->insert(RamDomain(250),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(115),RamDomain(322));
}();
/* END STRATUM 182 */
/* BEGIN STRATUM 183 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.251(251,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(42383),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_186_pointsto_objcont_info_251->insert(RamDomain(251),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(47),RamDomain(323));
}();
/* END STRATUM 183 */
/* BEGIN STRATUM 184 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.252(252,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(85064),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_187_pointsto_objcont_info_252->insert(RamDomain(252),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(78),RamDomain(324));
}();
/* END STRATUM 184 */
/* BEGIN STRATUM 185 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.253(253,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(35514),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_188_pointsto_objcont_info_253->insert(RamDomain(253),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(162),RamDomain(325));
}();
/* END STRATUM 185 */
/* BEGIN STRATUM 186 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.254(254,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(22098),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_189_pointsto_objcont_info_254->insert(RamDomain(254),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(52),RamDomain(326));
}();
/* END STRATUM 186 */
/* BEGIN STRATUM 187 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.255(255,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(88993),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_190_pointsto_objcont_info_255->insert(RamDomain(255),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(42),RamDomain(327));
}();
/* END STRATUM 187 */
/* BEGIN STRATUM 188 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.256(256,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(25146),
   enclosing_type(v1,v2),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_191_pointsto_objcont_info_256->insert(RamDomain(256),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(105),RamDomain(328));
}();
/* END STRATUM 188 */
/* BEGIN STRATUM 189 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.257(257,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(47655),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_192_pointsto_objcont_info_257->insert(RamDomain(257),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(99),RamDomain(329));
}();
/* END STRATUM 189 */
/* BEGIN STRATUM 190 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.258(258,"v0,v1,v2","Rule","assign,v1,v1,v0,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(6397),
   assign(v1,v1,v0,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_193_pointsto_objcont_info_258->insert(RamDomain(258),RamDomain(8),RamDomain(1),RamDomain(117),RamDomain(330));
}();
/* END STRATUM 190 */
/* BEGIN STRATUM 191 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.259(259,"v0,v1,v2","Rule","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(439),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_194_pointsto_objcont_info_259->insert(RamDomain(259),RamDomain(8),RamDomain(1),RamDomain(78),RamDomain(331));
}();
/* END STRATUM 191 */
/* BEGIN STRATUM 192 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.26(26,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(84399),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_195_pointsto_objcont_info_26->insert(RamDomain(26),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(54),RamDomain(55));
}();
/* END STRATUM 192 */
/* BEGIN STRATUM 193 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.260(260,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(51294),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_196_pointsto_objcont_info_260->insert(RamDomain(260),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(332));
}();
/* END STRATUM 193 */
/* BEGIN STRATUM 194 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.261(261,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(78205),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_197_pointsto_objcont_info_261->insert(RamDomain(261),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(78),RamDomain(333));
}();
/* END STRATUM 194 */
/* BEGIN STRATUM 195 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.262(262,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(86206),
   enclosing_type(v1,v0),
   assign(v1,v0,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_198_pointsto_objcont_info_262->insert(RamDomain(262),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(334),RamDomain(335));
}();
/* END STRATUM 195 */
/* BEGIN STRATUM 196 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.263(263,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(51600),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_199_pointsto_objcont_info_263->insert(RamDomain(263),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(29),RamDomain(336));
}();
/* END STRATUM 196 */
/* BEGIN STRATUM 197 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.264(264,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(38146),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_200_pointsto_objcont_info_264->insert(RamDomain(264),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(115),RamDomain(337));
}();
/* END STRATUM 197 */
/* BEGIN STRATUM 198 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.265(265,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v1,v1,v0,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(82123),
   enclosing_type(v2,v1),
   assign(v1,v1,v0,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_201_pointsto_objcont_info_265->insert(RamDomain(265),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(117),RamDomain(338));
}();
/* END STRATUM 198 */
/* BEGIN STRATUM 199 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.266(266,"v0,v1,v2","Rule","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(8929),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_202_pointsto_objcont_info_266->insert(RamDomain(266),RamDomain(8),RamDomain(1),RamDomain(87),RamDomain(339));
}();
/* END STRATUM 199 */
/* BEGIN STRATUM 200 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.267(267,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(58529),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_203_pointsto_objcont_info_267->insert(RamDomain(267),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(92),RamDomain(340));
}();
/* END STRATUM 200 */
/* BEGIN STRATUM 201 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.268(268,"v0,v1,v2","Rule","assign,v0,v0,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(3527),
   assign(v0,v0,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_204_pointsto_objcont_info_268->insert(RamDomain(268),RamDomain(8),RamDomain(1),RamDomain(341),RamDomain(342));
}();
/* END STRATUM 201 */
/* BEGIN STRATUM 202 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.269(269,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74481),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_205_pointsto_objcont_info_269->insert(RamDomain(269),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(66),RamDomain(343));
}();
/* END STRATUM 202 */
/* BEGIN STRATUM 203 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.27(27,"v0,v1,v2","Rule","enclosing_type,v0,v1","actual,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(18672),
   enclosing_type(v0,v1),
   actual(v1,v2,v0).").
in file  [0:0-0:0])_");
rel_206_pointsto_objcont_info_27->insert(RamDomain(27),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(56),RamDomain(57));
}();
/* END STRATUM 203 */
/* BEGIN STRATUM 204 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.270(270,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v2,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(39415),
   enclosing_type(v1,v0),
   assign(v2,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_207_pointsto_objcont_info_270->insert(RamDomain(270),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(29),RamDomain(344));
}();
/* END STRATUM 204 */
/* BEGIN STRATUM 205 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.271(271,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(55665),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_208_pointsto_objcont_info_271->insert(RamDomain(271),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(345));
}();
/* END STRATUM 205 */
/* BEGIN STRATUM 206 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.272(272,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(8579),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_209_pointsto_objcont_info_272->insert(RamDomain(272),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(346));
}();
/* END STRATUM 206 */
/* BEGIN STRATUM 207 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.273(273,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(39475),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_210_pointsto_objcont_info_273->insert(RamDomain(273),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(347));
}();
/* END STRATUM 207 */
/* BEGIN STRATUM 208 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.274(274,"v0,v1,v2","Rule","assign,v0,v2,v0,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(1197),
   assign(v0,v2,v0,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_211_pointsto_objcont_info_274->insert(RamDomain(274),RamDomain(8),RamDomain(1),RamDomain(141),RamDomain(348));
}();
/* END STRATUM 208 */
/* BEGIN STRATUM 209 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.275(275,"v0,v1,v2","Rule","assign,v2,v1,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(8358),
   assign(v2,v1,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_212_pointsto_objcont_info_275->insert(RamDomain(275),RamDomain(8),RamDomain(1),RamDomain(180),RamDomain(349));
}();
/* END STRATUM 209 */
/* BEGIN STRATUM 210 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.276(276,"v0,v1,v2","Rule","assign,v2,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(7893),
   assign(v2,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_213_pointsto_objcont_info_276->insert(RamDomain(276),RamDomain(8),RamDomain(1),RamDomain(281),RamDomain(350));
}();
/* END STRATUM 210 */
/* BEGIN STRATUM 211 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.277(277,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(21380),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_214_pointsto_objcont_info_277->insert(RamDomain(277),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(351));
}();
/* END STRATUM 211 */
/* BEGIN STRATUM 212 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.278(278,"v0,v1,v2","Rule","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(9894),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_215_pointsto_objcont_info_278->insert(RamDomain(278),RamDomain(8),RamDomain(1),RamDomain(115),RamDomain(352));
}();
/* END STRATUM 212 */
/* BEGIN STRATUM 213 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.279(279,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(28898),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_216_pointsto_objcont_info_279->insert(RamDomain(279),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(353));
}();
/* END STRATUM 213 */
/* BEGIN STRATUM 214 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.28(28,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v2,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(73858),
   enclosing_type(v1,v0),
   assign(v2,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_217_pointsto_objcont_info_28->insert(RamDomain(28),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(29),RamDomain(58));
}();
/* END STRATUM 214 */
/* BEGIN STRATUM 215 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.280(280,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(41705),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_218_pointsto_objcont_info_280->insert(RamDomain(280),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(78),RamDomain(354));
}();
/* END STRATUM 215 */
/* BEGIN STRATUM 216 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.281(281,"v0,v1,v2","Rule","enclosing_type,v0,v1","receiver_actual,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(15571),
   enclosing_type(v0,v1),
   receiver_actual(v0,v2).").
in file  [0:0-0:0])_");
rel_219_pointsto_objcont_info_281->insert(RamDomain(281),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(355),RamDomain(356));
}();
/* END STRATUM 216 */
/* BEGIN STRATUM 217 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.282(282,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(26717),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_220_pointsto_objcont_info_282->insert(RamDomain(282),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(124),RamDomain(357));
}();
/* END STRATUM 217 */
/* BEGIN STRATUM 218 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.283(283,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(61156),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_221_pointsto_objcont_info_283->insert(RamDomain(283),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(358));
}();
/* END STRATUM 218 */
/* BEGIN STRATUM 219 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.284(284,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(68901),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_222_pointsto_objcont_info_284->insert(RamDomain(284),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(137),RamDomain(359));
}();
/* END STRATUM 219 */
/* BEGIN STRATUM 220 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.285(285,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v0,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(23206),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_223_pointsto_objcont_info_285->insert(RamDomain(285),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(360),RamDomain(361));
}();
/* END STRATUM 220 */
/* BEGIN STRATUM 221 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.286(286,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(25283),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_224_pointsto_objcont_info_286->insert(RamDomain(286),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(115),RamDomain(362));
}();
/* END STRATUM 221 */
/* BEGIN STRATUM 222 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.287(287,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(31758),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_225_pointsto_objcont_info_287->insert(RamDomain(287),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(69),RamDomain(363));
}();
/* END STRATUM 222 */
/* BEGIN STRATUM 223 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.288(288,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(37984),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_226_pointsto_objcont_info_288->insert(RamDomain(288),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(92),RamDomain(364));
}();
/* END STRATUM 223 */
/* BEGIN STRATUM 224 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.289(289,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(47385),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_227_pointsto_objcont_info_289->insert(RamDomain(289),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(47),RamDomain(365));
}();
/* END STRATUM 224 */
/* BEGIN STRATUM 225 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.29(29,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(28989),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_228_pointsto_objcont_info_29->insert(RamDomain(29),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(59));
}();
/* END STRATUM 225 */
/* BEGIN STRATUM 226 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.290(290,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(41373),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_229_pointsto_objcont_info_290->insert(RamDomain(290),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(366));
}();
/* END STRATUM 226 */
/* BEGIN STRATUM 227 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.291(291,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(52977),
   enclosing_type(v1,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_230_pointsto_objcont_info_291->insert(RamDomain(291),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(94),RamDomain(367));
}();
/* END STRATUM 227 */
/* BEGIN STRATUM 228 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.292(292,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(90514),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_231_pointsto_objcont_info_292->insert(RamDomain(292),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(368),RamDomain(369));
}();
/* END STRATUM 228 */
/* BEGIN STRATUM 229 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.293(293,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(43754),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_232_pointsto_objcont_info_293->insert(RamDomain(293),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(83),RamDomain(370));
}();
/* END STRATUM 229 */
/* BEGIN STRATUM 230 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.294(294,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(47926),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_233_pointsto_objcont_info_294->insert(RamDomain(294),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(107),RamDomain(371));
}();
/* END STRATUM 230 */
/* BEGIN STRATUM 231 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.295(295,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(41394),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_234_pointsto_objcont_info_295->insert(RamDomain(295),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(341),RamDomain(372));
}();
/* END STRATUM 231 */
/* BEGIN STRATUM 232 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.296(296,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(57499),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_235_pointsto_objcont_info_296->insert(RamDomain(296),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(124),RamDomain(373));
}();
/* END STRATUM 232 */
/* BEGIN STRATUM 233 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.297(297,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(51220),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_236_pointsto_objcont_info_297->insert(RamDomain(297),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(254),RamDomain(374));
}();
/* END STRATUM 233 */
/* BEGIN STRATUM 234 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.298(298,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(32354),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_237_pointsto_objcont_info_298->insert(RamDomain(298),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(47),RamDomain(375));
}();
/* END STRATUM 234 */
/* BEGIN STRATUM 235 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.299(299,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(25411),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_238_pointsto_objcont_info_299->insert(RamDomain(299),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(52),RamDomain(376));
}();
/* END STRATUM 235 */
/* BEGIN STRATUM 236 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.3(3,"v0,v1,v2","Rule","actual,v0,v1,v2","points_initial,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(11),
   actual(v0,v1,v2),
   points_initial(v0,v2).").
in file  [0:0-0:0])_");
rel_239_pointsto_objcont_info_3->insert(RamDomain(3),RamDomain(8),RamDomain(1),RamDomain(9),RamDomain(10),RamDomain(11));
}();
/* END STRATUM 236 */
/* BEGIN STRATUM 237 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.30(30,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(78609),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_240_pointsto_objcont_info_30->insert(RamDomain(30),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(60));
}();
/* END STRATUM 237 */
/* BEGIN STRATUM 238 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.300(300,"v0,v1,v2","Rule","enclosing_type,v0,v1","store,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(13126),
   enclosing_type(v0,v1),
   store(v1,v2,v2).").
in file  [0:0-0:0])_");
rel_241_pointsto_objcont_info_300->insert(RamDomain(300),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(377),RamDomain(378));
}();
/* END STRATUM 238 */
/* BEGIN STRATUM 239 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.301(301,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(69742),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_242_pointsto_objcont_info_301->insert(RamDomain(301),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(75),RamDomain(379));
}();
/* END STRATUM 239 */
/* BEGIN STRATUM 240 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.302(302,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(65932),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_243_pointsto_objcont_info_302->insert(RamDomain(302),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(306),RamDomain(380));
}();
/* END STRATUM 240 */
/* BEGIN STRATUM 241 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.303(303,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(85236),
   enclosing_type(v0,v2),
   assign(v1,v2,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_244_pointsto_objcont_info_303->insert(RamDomain(303),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(381),RamDomain(382));
}();
/* END STRATUM 241 */
/* BEGIN STRATUM 242 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.304(304,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(29810),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_245_pointsto_objcont_info_304->insert(RamDomain(304),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(52),RamDomain(383));
}();
/* END STRATUM 242 */
/* BEGIN STRATUM 243 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.305(305,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(42564),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_246_pointsto_objcont_info_305->insert(RamDomain(305),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(83),RamDomain(384));
}();
/* END STRATUM 243 */
/* BEGIN STRATUM 244 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.306(306,"v0,v1,v2","Rule","enclosing_type,v1,v0","actual,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(19565),
   enclosing_type(v1,v0),
   actual(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_247_pointsto_objcont_info_306->insert(RamDomain(306),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(9),RamDomain(385));
}();
/* END STRATUM 244 */
/* BEGIN STRATUM 245 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.307(307,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(72665),
   enclosing_type(v0,v1),
   assign(v2,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_248_pointsto_objcont_info_307->insert(RamDomain(307),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(281),RamDomain(386));
}();
/* END STRATUM 245 */
/* BEGIN STRATUM 246 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.308(308,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(68281),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_249_pointsto_objcont_info_308->insert(RamDomain(308),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(387));
}();
/* END STRATUM 246 */
/* BEGIN STRATUM 247 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.309(309,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(22831),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_250_pointsto_objcont_info_309->insert(RamDomain(309),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(32),RamDomain(388));
}();
/* END STRATUM 247 */
/* BEGIN STRATUM 248 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.31(31,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(35569),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_251_pointsto_objcont_info_31->insert(RamDomain(31),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(42),RamDomain(61));
}();
/* END STRATUM 248 */
/* BEGIN STRATUM 249 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.310(310,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(37332),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_252_pointsto_objcont_info_310->insert(RamDomain(310),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(389));
}();
/* END STRATUM 249 */
/* BEGIN STRATUM 250 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.311(311,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74385),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_253_pointsto_objcont_info_311->insert(RamDomain(311),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(38),RamDomain(390));
}();
/* END STRATUM 250 */
/* BEGIN STRATUM 251 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.312(312,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(78437),
   enclosing_type(v1,v0),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_254_pointsto_objcont_info_312->insert(RamDomain(312),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(115),RamDomain(391));
}();
/* END STRATUM 251 */
/* BEGIN STRATUM 252 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.313(313,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(22838),
   enclosing_type(v1,v0),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_255_pointsto_objcont_info_313->insert(RamDomain(313),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(52),RamDomain(392));
}();
/* END STRATUM 252 */
/* BEGIN STRATUM 253 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.314(314,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(87809),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_256_pointsto_objcont_info_314->insert(RamDomain(314),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(83),RamDomain(393));
}();
/* END STRATUM 253 */
/* BEGIN STRATUM 254 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.315(315,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(49254),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_257_pointsto_objcont_info_315->insert(RamDomain(315),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(34),RamDomain(394));
}();
/* END STRATUM 254 */
/* BEGIN STRATUM 255 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.316(316,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(44215),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_258_pointsto_objcont_info_316->insert(RamDomain(316),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(115),RamDomain(395));
}();
/* END STRATUM 255 */
/* BEGIN STRATUM 256 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.317(317,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v1,v0,v2,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(80523),
   enclosing_type(v0,v1),
   assign(v2,v1,v0,v2,v2,v2).").
in file  [0:0-0:0])_");
rel_259_pointsto_objcont_info_317->insert(RamDomain(317),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(396),RamDomain(397));
}();
/* END STRATUM 256 */
/* BEGIN STRATUM 257 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.318(318,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v0,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(82193),
   enclosing_type(v1,v2),
   assign(v0,v0,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_260_pointsto_objcont_info_318->insert(RamDomain(318),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(254),RamDomain(398));
}();
/* END STRATUM 257 */
/* BEGIN STRATUM 258 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.319(319,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v1,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(45987),
   enclosing_type(v2,v0),
   assign(v1,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_261_pointsto_objcont_info_319->insert(RamDomain(319),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(399),RamDomain(400));
}();
/* END STRATUM 258 */
/* BEGIN STRATUM 259 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.32(32,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(62907),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_262_pointsto_objcont_info_32->insert(RamDomain(32),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(47),RamDomain(62));
}();
/* END STRATUM 259 */
/* BEGIN STRATUM 260 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.320(320,"v0,v1,v2","Rule","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(6975),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_263_pointsto_objcont_info_320->insert(RamDomain(320),RamDomain(8),RamDomain(1),RamDomain(87),RamDomain(401));
}();
/* END STRATUM 260 */
/* BEGIN STRATUM 261 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.321(321,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(36827),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_264_pointsto_objcont_info_321->insert(RamDomain(321),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(75),RamDomain(402));
}();
/* END STRATUM 261 */
/* BEGIN STRATUM 262 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.322(322,"v0,v1,v2","Rule","enclosing_type,v0,v2","store,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(11485),
   enclosing_type(v0,v2),
   store(v0,v2,v1).").
in file  [0:0-0:0])_");
rel_265_pointsto_objcont_info_322->insert(RamDomain(322),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(403),RamDomain(404));
}();
/* END STRATUM 262 */
/* BEGIN STRATUM 263 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.323(323,"v0,v1,v2","Rule","enclosing_type,v2,v1","formal,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(16357),
   enclosing_type(v2,v1),
   formal(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_266_pointsto_objcont_info_323->insert(RamDomain(323),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(159),RamDomain(405));
}();
/* END STRATUM 263 */
/* BEGIN STRATUM 264 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.324(324,"v0,v1,v2","Rule","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(645),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_267_pointsto_objcont_info_324->insert(RamDomain(324),RamDomain(8),RamDomain(1),RamDomain(94),RamDomain(406));
}();
/* END STRATUM 264 */
/* BEGIN STRATUM 265 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.325(325,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(48143),
   enclosing_type(v2,v1),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_268_pointsto_objcont_info_325->insert(RamDomain(325),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(87),RamDomain(407));
}();
/* END STRATUM 265 */
/* BEGIN STRATUM 266 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.326(326,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(49737),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_269_pointsto_objcont_info_326->insert(RamDomain(326),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(85),RamDomain(408));
}();
/* END STRATUM 266 */
/* BEGIN STRATUM 267 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.327(327,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(35157),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_270_pointsto_objcont_info_327->insert(RamDomain(327),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(72),RamDomain(409));
}();
/* END STRATUM 267 */
/* BEGIN STRATUM 268 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.328(328,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(83549),
   enclosing_type(v2,v0),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_271_pointsto_objcont_info_328->insert(RamDomain(328),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(69),RamDomain(410));
}();
/* END STRATUM 268 */
/* BEGIN STRATUM 269 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.329(329,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(38054),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_272_pointsto_objcont_info_329->insert(RamDomain(329),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(85),RamDomain(411));
}();
/* END STRATUM 269 */
/* BEGIN STRATUM 270 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.33(33,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(40656),
   enclosing_type(v0,v2),
   assign(v1,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_273_pointsto_objcont_info_33->insert(RamDomain(33),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(63),RamDomain(64));
}();
/* END STRATUM 270 */
/* BEGIN STRATUM 271 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.330(330,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(40513),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_274_pointsto_objcont_info_330->insert(RamDomain(330),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(412));
}();
/* END STRATUM 271 */
/* BEGIN STRATUM 272 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.331(331,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v1,v2,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(73312),
   enclosing_type(v2,v1),
   assign(v1,v2,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_275_pointsto_objcont_info_331->insert(RamDomain(331),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(113),RamDomain(413));
}();
/* END STRATUM 272 */
/* BEGIN STRATUM 273 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.332(332,"v0,v1,v2","Rule","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(2993),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_276_pointsto_objcont_info_332->insert(RamDomain(332),RamDomain(8),RamDomain(1),RamDomain(69),RamDomain(414));
}();
/* END STRATUM 273 */
/* BEGIN STRATUM 274 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.333(333,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(24761),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_277_pointsto_objcont_info_333->insert(RamDomain(333),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(415));
}();
/* END STRATUM 274 */
/* BEGIN STRATUM 275 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.334(334,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74331),
   enclosing_type(v1,v0),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_278_pointsto_objcont_info_334->insert(RamDomain(334),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(66),RamDomain(416));
}();
/* END STRATUM 275 */
/* BEGIN STRATUM 276 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.335(335,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(86947),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_279_pointsto_objcont_info_335->insert(RamDomain(335),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(135),RamDomain(417));
}();
/* END STRATUM 276 */
/* BEGIN STRATUM 277 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.336(336,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(73061),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_280_pointsto_objcont_info_336->insert(RamDomain(336),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(162),RamDomain(418));
}();
/* END STRATUM 277 */
/* BEGIN STRATUM 278 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.337(337,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v1,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(34796),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v1).").
in file  [0:0-0:0])_");
rel_281_pointsto_objcont_info_337->insert(RamDomain(337),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(34),RamDomain(419));
}();
/* END STRATUM 278 */
/* BEGIN STRATUM 279 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.338(338,"v0,v1,v2","Rule","enclosing_type,v0,v1","formal,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(16408),
   enclosing_type(v0,v1),
   formal(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_282_pointsto_objcont_info_338->insert(RamDomain(338),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(159),RamDomain(420));
}();
/* END STRATUM 279 */
/* BEGIN STRATUM 280 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.339(339,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v2,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(62682),
   enclosing_type(v2,v0),
   assign(v2,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_283_pointsto_objcont_info_339->insert(RamDomain(339),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(281),RamDomain(421));
}();
/* END STRATUM 280 */
/* BEGIN STRATUM 281 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.34(34,"v0,v1,v2","Rule","enclosing_type,v1,v0","actual,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(19390),
   enclosing_type(v1,v0),
   actual(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_284_pointsto_objcont_info_34->insert(RamDomain(34),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(9),RamDomain(65));
}();
/* END STRATUM 281 */
/* BEGIN STRATUM 282 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.340(340,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(45099),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_285_pointsto_objcont_info_340->insert(RamDomain(340),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(85),RamDomain(422));
}();
/* END STRATUM 282 */
/* BEGIN STRATUM 283 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.341(341,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(23577),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_286_pointsto_objcont_info_341->insert(RamDomain(341),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(423));
}();
/* END STRATUM 283 */
/* BEGIN STRATUM 284 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.342(342,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(1817),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_287_pointsto_objcont_info_342->insert(RamDomain(342),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(424));
}();
/* END STRATUM 284 */
/* BEGIN STRATUM 285 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.343(343,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(72525),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_288_pointsto_objcont_info_343->insert(RamDomain(343),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(122),RamDomain(425));
}();
/* END STRATUM 285 */
/* BEGIN STRATUM 286 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.344(344,"v0,v1,v2","Rule","enclosing_type,v1,v2","receiver_actual,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(15594),
   enclosing_type(v1,v2),
   receiver_actual(v0,v2).").
in file  [0:0-0:0])_");
rel_289_pointsto_objcont_info_344->insert(RamDomain(344),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(355),RamDomain(426));
}();
/* END STRATUM 286 */
/* BEGIN STRATUM 287 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.345(345,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(59956),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_290_pointsto_objcont_info_345->insert(RamDomain(345),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(180),RamDomain(427));
}();
/* END STRATUM 287 */
/* BEGIN STRATUM 288 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.346(346,"v0,v1,v2","Rule","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(2691),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_291_pointsto_objcont_info_346->insert(RamDomain(346),RamDomain(8),RamDomain(1),RamDomain(115),RamDomain(428));
}();
/* END STRATUM 288 */
/* BEGIN STRATUM 289 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.347(347,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(77526),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_292_pointsto_objcont_info_347->insert(RamDomain(347),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(135),RamDomain(429));
}();
/* END STRATUM 289 */
/* BEGIN STRATUM 290 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.348(348,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(62521),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_293_pointsto_objcont_info_348->insert(RamDomain(348),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(306),RamDomain(430));
}();
/* END STRATUM 290 */
/* BEGIN STRATUM 291 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.349(349,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(71978),
   enclosing_type(v0,v1),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_294_pointsto_objcont_info_349->insert(RamDomain(349),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(99),RamDomain(431));
}();
/* END STRATUM 291 */
/* BEGIN STRATUM 292 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.35(35,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(41025),
   enclosing_type(v2,v0),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_295_pointsto_objcont_info_35->insert(RamDomain(35),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(66),RamDomain(67));
}();
/* END STRATUM 292 */
/* BEGIN STRATUM 293 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.350(350,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v2,v1,v0,v2,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(33996),
   enclosing_type(v1,v0),
   assign(v2,v1,v0,v2,v2,v1).").
in file  [0:0-0:0])_");
rel_296_pointsto_objcont_info_350->insert(RamDomain(350),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(152),RamDomain(432));
}();
/* END STRATUM 293 */
/* BEGIN STRATUM 294 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.351(351,"v0,v1,v2","Rule","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(2566),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_297_pointsto_objcont_info_351->insert(RamDomain(351),RamDomain(8),RamDomain(1),RamDomain(52),RamDomain(433));
}();
/* END STRATUM 294 */
/* BEGIN STRATUM 295 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.352(352,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(37569),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_298_pointsto_objcont_info_352->insert(RamDomain(352),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(434));
}();
/* END STRATUM 295 */
/* BEGIN STRATUM 296 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.353(353,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(41823),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_299_pointsto_objcont_info_353->insert(RamDomain(353),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(42),RamDomain(435));
}();
/* END STRATUM 296 */
/* BEGIN STRATUM 297 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.354(354,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(70372),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_300_pointsto_objcont_info_354->insert(RamDomain(354),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(32),RamDomain(436));
}();
/* END STRATUM 297 */
/* BEGIN STRATUM 298 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.355(355,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(63076),
   enclosing_type(v1,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_301_pointsto_objcont_info_355->insert(RamDomain(355),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(38),RamDomain(437));
}();
/* END STRATUM 298 */
/* BEGIN STRATUM 299 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.356(356,"v0,v1,v2","Rule","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(3206),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_302_pointsto_objcont_info_356->insert(RamDomain(356),RamDomain(8),RamDomain(1),RamDomain(115),RamDomain(438));
}();
/* END STRATUM 299 */
/* BEGIN STRATUM 300 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.357(357,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(81025),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_303_pointsto_objcont_info_357->insert(RamDomain(357),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(439));
}();
/* END STRATUM 300 */
/* BEGIN STRATUM 301 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.358(358,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(73095),
   enclosing_type(v2,v1),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_304_pointsto_objcont_info_358->insert(RamDomain(358),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(115),RamDomain(440));
}();
/* END STRATUM 301 */
/* BEGIN STRATUM 302 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.359(359,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74223),
   enclosing_type(v1,v0),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_305_pointsto_objcont_info_359->insert(RamDomain(359),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(92),RamDomain(441));
}();
/* END STRATUM 302 */
/* BEGIN STRATUM 303 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.36(36,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(36249),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_306_pointsto_objcont_info_36->insert(RamDomain(36),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(68));
}();
/* END STRATUM 303 */
/* BEGIN STRATUM 304 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.360(360,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v2,v0,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(38235),
   enclosing_type(v2,v0),
   assign(v2,v0,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_307_pointsto_objcont_info_360->insert(RamDomain(360),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(292),RamDomain(442));
}();
/* END STRATUM 304 */
/* BEGIN STRATUM 305 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.361(361,"v0,v1,v2","Rule","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(8420),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_308_pointsto_objcont_info_361->insert(RamDomain(361),RamDomain(8),RamDomain(1),RamDomain(92),RamDomain(443));
}();
/* END STRATUM 305 */
/* BEGIN STRATUM 306 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.362(362,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(84341),
   enclosing_type(v0,v2),
   assign(v2,v0,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_309_pointsto_objcont_info_362->insert(RamDomain(362),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(54),RamDomain(444));
}();
/* END STRATUM 306 */
/* BEGIN STRATUM 307 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.363(363,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(82506),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_310_pointsto_objcont_info_363->insert(RamDomain(363),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(445));
}();
/* END STRATUM 307 */
/* BEGIN STRATUM 308 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.364(364,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v2,v0,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(41355),
   enclosing_type(v1,v0),
   assign(v2,v0,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_311_pointsto_objcont_info_364->insert(RamDomain(364),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(54),RamDomain(446));
}();
/* END STRATUM 308 */
/* BEGIN STRATUM 309 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.365(365,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(69902),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_312_pointsto_objcont_info_365->insert(RamDomain(365),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(447));
}();
/* END STRATUM 309 */
/* BEGIN STRATUM 310 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.366(366,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v0,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(47259),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_313_pointsto_objcont_info_366->insert(RamDomain(366),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(360),RamDomain(448));
}();
/* END STRATUM 310 */
/* BEGIN STRATUM 311 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.367(367,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(76243),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_314_pointsto_objcont_info_367->insert(RamDomain(367),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(75),RamDomain(449));
}();
/* END STRATUM 311 */
/* BEGIN STRATUM 312 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.368(368,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(64259),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_315_pointsto_objcont_info_368->insert(RamDomain(368),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(450));
}();
/* END STRATUM 312 */
/* BEGIN STRATUM 313 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.369(369,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(50646),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_316_pointsto_objcont_info_369->insert(RamDomain(369),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(135),RamDomain(451));
}();
/* END STRATUM 313 */
/* BEGIN STRATUM 314 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.37(37,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v2,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(62351),
   enclosing_type(v0,v1),
   assign(v2,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_317_pointsto_objcont_info_37->insert(RamDomain(37),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(69),RamDomain(70));
}();
/* END STRATUM 314 */
/* BEGIN STRATUM 315 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.370(370,"v0,v1,v2","Rule","enclosing_type,v0,v2","load,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(13416),
   enclosing_type(v0,v2),
   load(v1,v2,v0).").
in file  [0:0-0:0])_");
rel_318_pointsto_objcont_info_370->insert(RamDomain(370),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(452),RamDomain(453));
}();
/* END STRATUM 315 */
/* BEGIN STRATUM 316 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.371(371,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(74332),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_319_pointsto_objcont_info_371->insert(RamDomain(371),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(124),RamDomain(454));
}();
/* END STRATUM 316 */
/* BEGIN STRATUM 317 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.372(372,"v0,v1,v2","Rule","enclosing_type,v1,v2","receiver_formal,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(15882),
   enclosing_type(v1,v2),
   receiver_formal(v1,v0).").
in file  [0:0-0:0])_");
rel_320_pointsto_objcont_info_372->insert(RamDomain(372),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(455),RamDomain(456));
}();
/* END STRATUM 317 */
/* BEGIN STRATUM 318 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.373(373,"v0,v1,v2","Rule","enclosing_type,v1,v2","formal,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(16387),
   enclosing_type(v1,v2),
   formal(v0,v2,v0).").
in file  [0:0-0:0])_");
rel_321_pointsto_objcont_info_373->insert(RamDomain(373),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(457),RamDomain(458));
}();
/* END STRATUM 318 */
/* BEGIN STRATUM 319 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.374(374,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(33055),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_322_pointsto_objcont_info_374->insert(RamDomain(374),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(459));
}();
/* END STRATUM 319 */
/* BEGIN STRATUM 320 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.375(375,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(30661),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_323_pointsto_objcont_info_375->insert(RamDomain(375),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(105),RamDomain(460));
}();
/* END STRATUM 320 */
/* BEGIN STRATUM 321 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.376(376,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(63340),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_324_pointsto_objcont_info_376->insert(RamDomain(376),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(47),RamDomain(461));
}();
/* END STRATUM 321 */
/* BEGIN STRATUM 322 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.377(377,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(90552),
   enclosing_type(v1,v2),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_325_pointsto_objcont_info_377->insert(RamDomain(377),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(105),RamDomain(462));
}();
/* END STRATUM 322 */
/* BEGIN STRATUM 323 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.378(378,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(68585),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_326_pointsto_objcont_info_378->insert(RamDomain(378),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(124),RamDomain(463));
}();
/* END STRATUM 323 */
/* BEGIN STRATUM 324 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.379(379,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(31650),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_327_pointsto_objcont_info_379->insert(RamDomain(379),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(115),RamDomain(464));
}();
/* END STRATUM 324 */
/* BEGIN STRATUM 325 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.38(38,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(2567),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_328_pointsto_objcont_info_38->insert(RamDomain(38),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(71));
}();
/* END STRATUM 325 */
/* BEGIN STRATUM 326 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.380(380,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(32953),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_329_pointsto_objcont_info_380->insert(RamDomain(380),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(75),RamDomain(465));
}();
/* END STRATUM 326 */
/* BEGIN STRATUM 327 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.381(381,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(53568),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_330_pointsto_objcont_info_381->insert(RamDomain(381),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(341),RamDomain(466));
}();
/* END STRATUM 327 */
/* BEGIN STRATUM 328 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.382(382,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(90982),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_331_pointsto_objcont_info_382->insert(RamDomain(382),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(467));
}();
/* END STRATUM 328 */
/* BEGIN STRATUM 329 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.383(383,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v0,v1,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(45301),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v2).").
in file  [0:0-0:0])_");
rel_332_pointsto_objcont_info_383->insert(RamDomain(383),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(306),RamDomain(468));
}();
/* END STRATUM 329 */
/* BEGIN STRATUM 330 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.384(384,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(74923),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_333_pointsto_objcont_info_384->insert(RamDomain(384),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(85),RamDomain(469));
}();
/* END STRATUM 330 */
/* BEGIN STRATUM 331 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.385(385,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(44452),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_334_pointsto_objcont_info_385->insert(RamDomain(385),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(470));
}();
/* END STRATUM 331 */
/* BEGIN STRATUM 332 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.386(386,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(61826),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_335_pointsto_objcont_info_386->insert(RamDomain(386),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(471));
}();
/* END STRATUM 332 */
/* BEGIN STRATUM 333 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.387(387,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(21073),
   enclosing_type(v0,v2),
   assign(v2,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_336_pointsto_objcont_info_387->insert(RamDomain(387),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(281),RamDomain(472));
}();
/* END STRATUM 333 */
/* BEGIN STRATUM 334 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.388(388,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(70304),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_337_pointsto_objcont_info_388->insert(RamDomain(388),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(473));
}();
/* END STRATUM 334 */
/* BEGIN STRATUM 335 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.389(389,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v2,v1,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(80494),
   enclosing_type(v1,v2),
   assign(v2,v1,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_338_pointsto_objcont_info_389->insert(RamDomain(389),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(180),RamDomain(474));
}();
/* END STRATUM 335 */
/* BEGIN STRATUM 336 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.39(39,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(40179),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_339_pointsto_objcont_info_39->insert(RamDomain(39),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(72),RamDomain(73));
}();
/* END STRATUM 336 */
/* BEGIN STRATUM 337 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.390(390,"v0,v1,v2","Rule","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(667),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_340_pointsto_objcont_info_390->insert(RamDomain(390),RamDomain(8),RamDomain(1),RamDomain(42),RamDomain(475));
}();
/* END STRATUM 337 */
/* BEGIN STRATUM 338 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.391(391,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(33317),
   enclosing_type(v0,v1),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_341_pointsto_objcont_info_391->insert(RamDomain(391),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(52),RamDomain(476));
}();
/* END STRATUM 338 */
/* BEGIN STRATUM 339 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.392(392,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(30928),
   enclosing_type(v2,v0),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_342_pointsto_objcont_info_392->insert(RamDomain(392),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(83),RamDomain(477));
}();
/* END STRATUM 339 */
/* BEGIN STRATUM 340 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.393(393,"v0,v1,v2","Rule","enclosing_type,v1,v2","points_initial,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(11024),
   enclosing_type(v1,v2),
   points_initial(v0,v2).").
in file  [0:0-0:0])_");
rel_343_pointsto_objcont_info_393->insert(RamDomain(393),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(10),RamDomain(478));
}();
/* END STRATUM 340 */
/* BEGIN STRATUM 341 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.394(394,"v0,v1,v2","Rule","enclosing_type,v0,v1","actual,v0,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(19870),
   enclosing_type(v0,v1),
   actual(v0,v2,v1).").
in file  [0:0-0:0])_");
rel_344_pointsto_objcont_info_394->insert(RamDomain(394),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(479),RamDomain(480));
}();
/* END STRATUM 341 */
/* BEGIN STRATUM 342 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.395(395,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(20342),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_345_pointsto_objcont_info_395->insert(RamDomain(395),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(47),RamDomain(481));
}();
/* END STRATUM 342 */
/* BEGIN STRATUM 343 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.396(396,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(40936),
   enclosing_type(v0,v1),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_346_pointsto_objcont_info_396->insert(RamDomain(396),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(105),RamDomain(482));
}();
/* END STRATUM 343 */
/* BEGIN STRATUM 344 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.397(397,"v0,v1,v2","Rule","enclosing_type,v1,v0","store,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(11329),
   enclosing_type(v1,v0),
   store(v0,v2,v0).").
in file  [0:0-0:0])_");
rel_347_pointsto_objcont_info_397->insert(RamDomain(397),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(483),RamDomain(484));
}();
/* END STRATUM 344 */
/* BEGIN STRATUM 345 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.398(398,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(39077),
   enclosing_type(v1,v2),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_348_pointsto_objcont_info_398->insert(RamDomain(398),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(83),RamDomain(485));
}();
/* END STRATUM 345 */
/* BEGIN STRATUM 346 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.399(399,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(36263),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_349_pointsto_objcont_info_399->insert(RamDomain(399),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(38),RamDomain(486));
}();
/* END STRATUM 346 */
/* BEGIN STRATUM 347 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.4(4,"v0,v1,v2","Rule","pointsto_objcont,v0,v1,v2","receiver_formal,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(2),
   pointsto_objcont(v0,v1,v2),
   receiver_formal(v2,v0).").
in file  [0:0-0:0])_");
rel_350_pointsto_objcont_info_4->insert(RamDomain(4),RamDomain(8),RamDomain(1),RamDomain(12),RamDomain(13),RamDomain(14));
}();
/* END STRATUM 347 */
/* BEGIN STRATUM 348 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.40(40,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(59120),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_351_pointsto_objcont_info_40->insert(RamDomain(40),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(74));
}();
/* END STRATUM 348 */
/* BEGIN STRATUM 349 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.400(400,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(83758),
   enclosing_type(v2,v0),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_352_pointsto_objcont_info_400->insert(RamDomain(400),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(42),RamDomain(487));
}();
/* END STRATUM 349 */
/* BEGIN STRATUM 350 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.41(41,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(78420),
   enclosing_type(v0,v1),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_353_pointsto_objcont_info_41->insert(RamDomain(41),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(75),RamDomain(76));
}();
/* END STRATUM 350 */
/* BEGIN STRATUM 351 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.42(42,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(64858),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_354_pointsto_objcont_info_42->insert(RamDomain(42),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(77));
}();
/* END STRATUM 351 */
/* BEGIN STRATUM 352 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.43(43,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(28441),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_355_pointsto_objcont_info_43->insert(RamDomain(43),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(79));
}();
/* END STRATUM 352 */
/* BEGIN STRATUM 353 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.44(44,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(47932),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_356_pointsto_objcont_info_44->insert(RamDomain(44),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(80));
}();
/* END STRATUM 353 */
/* BEGIN STRATUM 354 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.45(45,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(40777),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_357_pointsto_objcont_info_45->insert(RamDomain(45),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(32),RamDomain(81));
}();
/* END STRATUM 354 */
/* BEGIN STRATUM 355 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.46(46,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(38959),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_358_pointsto_objcont_info_46->insert(RamDomain(46),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(82));
}();
/* END STRATUM 355 */
/* BEGIN STRATUM 356 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.47(47,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(52193),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_359_pointsto_objcont_info_47->insert(RamDomain(47),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(83),RamDomain(84));
}();
/* END STRATUM 356 */
/* BEGIN STRATUM 357 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.48(48,"v0,v1,v2","Rule","assign,v1,v0,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(5063),
   assign(v1,v0,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_360_pointsto_objcont_info_48->insert(RamDomain(48),RamDomain(8),RamDomain(1),RamDomain(85),RamDomain(86));
}();
/* END STRATUM 357 */
/* BEGIN STRATUM 358 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.49(49,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(63698),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_361_pointsto_objcont_info_49->insert(RamDomain(49),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(87),RamDomain(88));
}();
/* END STRATUM 358 */
/* BEGIN STRATUM 359 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.5(5,"v1,v0,v2","Rule","load,v0,v1,v2","points_initial,v2,v0","pointsto_objcont(v1,v0,v2) :- 
   Rule(0),
   load(v0,v1,v2),
   points_initial(v2,v0).").
in file  [0:0-0:0])_");
rel_362_pointsto_objcont_info_5->insert(RamDomain(5),RamDomain(15),RamDomain(1),RamDomain(16),RamDomain(17),RamDomain(18));
}();
/* END STRATUM 359 */
/* BEGIN STRATUM 360 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.50(50,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v2,v1,v0,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(53306),
   enclosing_type(v0,v2),
   assign(v2,v1,v0,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_363_pointsto_objcont_info_50->insert(RamDomain(50),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(89),RamDomain(90));
}();
/* END STRATUM 360 */
/* BEGIN STRATUM 361 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.51(51,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v0,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(64812),
   enclosing_type(v0,v2),
   assign(v0,v2,v0,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_364_pointsto_objcont_info_51->insert(RamDomain(51),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(66),RamDomain(91));
}();
/* END STRATUM 361 */
/* BEGIN STRATUM 362 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.52(52,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(79085),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_365_pointsto_objcont_info_52->insert(RamDomain(52),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(92),RamDomain(93));
}();
/* END STRATUM 362 */
/* BEGIN STRATUM 363 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.53(53,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(35495),
   enclosing_type(v0,v1),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_366_pointsto_objcont_info_53->insert(RamDomain(53),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(94),RamDomain(95));
}();
/* END STRATUM 363 */
/* BEGIN STRATUM 364 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.54(54,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(43610),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_367_pointsto_objcont_info_54->insert(RamDomain(54),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(83),RamDomain(96));
}();
/* END STRATUM 364 */
/* BEGIN STRATUM 365 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.55(55,"v0,v1,v2","Rule","enclosing_type,v2,v1","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(33581),
   enclosing_type(v2,v1),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_368_pointsto_objcont_info_55->insert(RamDomain(55),RamDomain(8),RamDomain(1),RamDomain(97),RamDomain(78),RamDomain(98));
}();
/* END STRATUM 365 */
/* BEGIN STRATUM 366 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.56(56,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(88964),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_369_pointsto_objcont_info_56->insert(RamDomain(56),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(99),RamDomain(100));
}();
/* END STRATUM 366 */
/* BEGIN STRATUM 367 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.57(57,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v2,v1,v0,v2,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(41537),
   enclosing_type(v0,v1),
   assign(v0,v2,v1,v0,v2,v2).").
in file  [0:0-0:0])_");
rel_370_pointsto_objcont_info_57->insert(RamDomain(57),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(92),RamDomain(101));
}();
/* END STRATUM 367 */
/* BEGIN STRATUM 368 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.58(58,"v0,v1,v2","Rule","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(6139),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_371_pointsto_objcont_info_58->insert(RamDomain(58),RamDomain(8),RamDomain(1),RamDomain(47),RamDomain(102));
}();
/* END STRATUM 368 */
/* BEGIN STRATUM 369 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.59(59,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(66026),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_372_pointsto_objcont_info_59->insert(RamDomain(59),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(103));
}();
/* END STRATUM 369 */
/* BEGIN STRATUM 370 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.6(6,"v1,v0,v2","Rule","pointsto_objcont,v0,v1,v2","receiver_formal,v2,v0","pointsto_objcont(v1,v0,v2) :- 
   Rule(4),
   pointsto_objcont(v0,v1,v2),
   receiver_formal(v2,v0).").
in file  [0:0-0:0])_");
rel_373_pointsto_objcont_info_6->insert(RamDomain(6),RamDomain(15),RamDomain(1),RamDomain(12),RamDomain(13),RamDomain(19));
}();
/* END STRATUM 370 */
/* BEGIN STRATUM 371 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.60(60,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(78281),
   enclosing_type(v0,v2),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_374_pointsto_objcont_info_60->insert(RamDomain(60),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(94),RamDomain(104));
}();
/* END STRATUM 371 */
/* BEGIN STRATUM 372 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.61(61,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(34234),
   enclosing_type(v1,v2),
   assign(v0,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_375_pointsto_objcont_info_61->insert(RamDomain(61),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(105),RamDomain(106));
}();
/* END STRATUM 372 */
/* BEGIN STRATUM 373 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.62(62,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v2,v1,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(48347),
   enclosing_type(v1,v2),
   assign(v0,v2,v1,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_376_pointsto_objcont_info_62->insert(RamDomain(62),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(107),RamDomain(108));
}();
/* END STRATUM 373 */
/* BEGIN STRATUM 374 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.63(63,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(36826),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_377_pointsto_objcont_info_63->insert(RamDomain(63),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(42),RamDomain(109));
}();
/* END STRATUM 374 */
/* BEGIN STRATUM 375 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.64(64,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(19964),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_378_pointsto_objcont_info_64->insert(RamDomain(64),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(47),RamDomain(110));
}();
/* END STRATUM 375 */
/* BEGIN STRATUM 376 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.65(65,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(70583),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_379_pointsto_objcont_info_65->insert(RamDomain(65),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(75),RamDomain(111));
}();
/* END STRATUM 376 */
/* BEGIN STRATUM 377 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.66(66,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(9423),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_380_pointsto_objcont_info_66->insert(RamDomain(66),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(112));
}();
/* END STRATUM 377 */
/* BEGIN STRATUM 378 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.67(67,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(59394),
   enclosing_type(v0,v2),
   assign(v1,v2,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_381_pointsto_objcont_info_67->insert(RamDomain(67),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(113),RamDomain(114));
}();
/* END STRATUM 378 */
/* BEGIN STRATUM 379 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.68(68,"v0,v1,v2","Rule","assign,v0,v0,v1,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(8227),
   assign(v0,v0,v1,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_382_pointsto_objcont_info_68->insert(RamDomain(68),RamDomain(8),RamDomain(1),RamDomain(115),RamDomain(116));
}();
/* END STRATUM 379 */
/* BEGIN STRATUM 380 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.69(69,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v1,v0,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(22304),
   enclosing_type(v0,v2),
   assign(v1,v1,v0,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_383_pointsto_objcont_info_69->insert(RamDomain(69),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(117),RamDomain(118));
}();
/* END STRATUM 380 */
/* BEGIN STRATUM 381 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.7(7,"v2,v0,v1","Rule","points_initial,v0,v1","receiver_formal,v1,v2","pointsto_objcont(v2,v0,v1) :- 
   Rule(8),
   points_initial(v0,v1),
   receiver_formal(v1,v2).").
in file  [0:0-0:0])_");
rel_384_pointsto_objcont_info_7->insert(RamDomain(7),RamDomain(5),RamDomain(1),RamDomain(2),RamDomain(3),RamDomain(20));
}();
/* END STRATUM 381 */
/* BEGIN STRATUM 382 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.70(70,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(21947),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_385_pointsto_objcont_info_70->insert(RamDomain(70),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(119));
}();
/* END STRATUM 382 */
/* BEGIN STRATUM 383 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.71(71,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(82029),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_386_pointsto_objcont_info_71->insert(RamDomain(71),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(78),RamDomain(120));
}();
/* END STRATUM 383 */
/* BEGIN STRATUM 384 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.72(72,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(79077),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_387_pointsto_objcont_info_72->insert(RamDomain(72),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(32),RamDomain(121));
}();
/* END STRATUM 384 */
/* BEGIN STRATUM 385 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.73(73,"v0,v1,v2","Rule","assign,v0,v0,v1,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(4839),
   assign(v0,v0,v1,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_388_pointsto_objcont_info_73->insert(RamDomain(73),RamDomain(8),RamDomain(1),RamDomain(122),RamDomain(123));
}();
/* END STRATUM 385 */
/* BEGIN STRATUM 386 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.74(74,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(20846),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v0).").
in file  [0:0-0:0])_");
rel_389_pointsto_objcont_info_74->insert(RamDomain(74),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(124),RamDomain(125));
}();
/* END STRATUM 386 */
/* BEGIN STRATUM 387 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.75(75,"v0,v1,v2","Rule","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(10458),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_390_pointsto_objcont_info_75->insert(RamDomain(75),RamDomain(8),RamDomain(1),RamDomain(38),RamDomain(126));
}();
/* END STRATUM 387 */
/* BEGIN STRATUM 388 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.76(76,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(25015),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_391_pointsto_objcont_info_76->insert(RamDomain(76),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(127));
}();
/* END STRATUM 388 */
/* BEGIN STRATUM 389 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.77(77,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(65996),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_392_pointsto_objcont_info_77->insert(RamDomain(77),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(78),RamDomain(128));
}();
/* END STRATUM 389 */
/* BEGIN STRATUM 390 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.78(78,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v2,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(34638),
   enclosing_type(v0,v2),
   assign(v0,v2,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_393_pointsto_objcont_info_78->insert(RamDomain(78),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(42),RamDomain(129));
}();
/* END STRATUM 390 */
/* BEGIN STRATUM 391 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.79(79,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(27604),
   enclosing_type(v2,v0),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_394_pointsto_objcont_info_79->insert(RamDomain(79),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(38),RamDomain(130));
}();
/* END STRATUM 391 */
/* BEGIN STRATUM 392 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.8(8,"v0,v2,v1","Rule","points_initial,v0,v1","points_initial,v2,v1","pointsto_objcont(v0,v2,v1) :- 
   Rule(9),
   points_initial(v0,v1),
   points_initial(v2,v1).").
in file  [0:0-0:0])_");
rel_395_pointsto_objcont_info_8->insert(RamDomain(8),RamDomain(0),RamDomain(1),RamDomain(2),RamDomain(21),RamDomain(22));
}();
/* END STRATUM 392 */
/* BEGIN STRATUM 393 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.80(80,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(67769),
   enclosing_type(v0,v2),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_396_pointsto_objcont_info_80->insert(RamDomain(80),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(52),RamDomain(131));
}();
/* END STRATUM 393 */
/* BEGIN STRATUM 394 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.81(81,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(63016),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_397_pointsto_objcont_info_81->insert(RamDomain(81),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(132));
}();
/* END STRATUM 394 */
/* BEGIN STRATUM 395 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.82(82,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(42257),
   enclosing_type(v0,v2),
   assign(v1,v0,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_398_pointsto_objcont_info_82->insert(RamDomain(82),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(133),RamDomain(134));
}();
/* END STRATUM 395 */
/* BEGIN STRATUM 396 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.83(83,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v1,v0,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(24992),
   enclosing_type(v1,v0),
   assign(v1,v0,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_399_pointsto_objcont_info_83->insert(RamDomain(83),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(135),RamDomain(136));
}();
/* END STRATUM 396 */
/* BEGIN STRATUM 397 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.84(84,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(32795),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v2,v0).").
in file  [0:0-0:0])_");
rel_400_pointsto_objcont_info_84->insert(RamDomain(84),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(137),RamDomain(138));
}();
/* END STRATUM 397 */
/* BEGIN STRATUM 398 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.85(85,"v0,v1,v2","Rule","assign,v0,v0,v1,v2,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(3548),
   assign(v0,v0,v1,v2,v1,v2).").
in file  [0:0-0:0])_");
rel_401_pointsto_objcont_info_85->insert(RamDomain(85),RamDomain(8),RamDomain(1),RamDomain(94),RamDomain(139));
}();
/* END STRATUM 398 */
/* BEGIN STRATUM 399 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.86(86,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(41694),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_402_pointsto_objcont_info_86->insert(RamDomain(86),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(140));
}();
/* END STRATUM 399 */
/* BEGIN STRATUM 400 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.87(87,"v0,v1,v2","Rule","enclosing_type,v2,v0","assign,v0,v2,v0,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(64161),
   enclosing_type(v2,v0),
   assign(v0,v2,v0,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_403_pointsto_objcont_info_87->insert(RamDomain(87),RamDomain(8),RamDomain(1),RamDomain(36),RamDomain(141),RamDomain(142));
}();
/* END STRATUM 400 */
/* BEGIN STRATUM 401 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.88(88,"v0,v1,v2","Rule","enclosing_type,v0,v1","load,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(14576),
   enclosing_type(v0,v1),
   load(v0,v1,v2).").
in file  [0:0-0:0])_");
rel_404_pointsto_objcont_info_88->insert(RamDomain(88),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(16),RamDomain(143));
}();
/* END STRATUM 401 */
/* BEGIN STRATUM 402 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.89(89,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v0,v2,v2,v0,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(43687),
   enclosing_type(v0,v2),
   assign(v1,v0,v2,v2,v0,v1).").
in file  [0:0-0:0])_");
rel_405_pointsto_objcont_info_89->insert(RamDomain(89),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(75),RamDomain(144));
}();
/* END STRATUM 402 */
/* BEGIN STRATUM 403 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.9(9,"v2,v0,v1","Rule","points_initial,v0,v1","pointsto_objcont,v1,v0,v2","pointsto_objcont(v2,v0,v1) :- 
   Rule(5),
   points_initial(v0,v1),
   pointsto_objcont(v1,v0,v2).").
in file  [0:0-0:0])_");
rel_406_pointsto_objcont_info_9->insert(RamDomain(9),RamDomain(5),RamDomain(1),RamDomain(2),RamDomain(23),RamDomain(24));
}();
/* END STRATUM 403 */
/* BEGIN STRATUM 404 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.90(90,"v0,v1,v2","Rule","assign,v0,v1,v2,v1,v0,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(7005),
   assign(v0,v1,v2,v1,v0,v2).").
in file  [0:0-0:0])_");
rel_407_pointsto_objcont_info_90->insert(RamDomain(90),RamDomain(8),RamDomain(1),RamDomain(78),RamDomain(145));
}();
/* END STRATUM 404 */
/* BEGIN STRATUM 405 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.91(91,"v0,v1,v2","Rule","enclosing_type,v1,v2","assign,v0,v1,v1,v0,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(22493),
   enclosing_type(v1,v2),
   assign(v0,v1,v1,v0,v2,v0).").
in file  [0:0-0:0])_");
rel_408_pointsto_objcont_info_91->insert(RamDomain(91),RamDomain(8),RamDomain(1),RamDomain(50),RamDomain(52),RamDomain(146));
}();
/* END STRATUM 405 */
/* BEGIN STRATUM 406 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.92(92,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v0,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(40917),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_409_pointsto_objcont_info_92->insert(RamDomain(92),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(99),RamDomain(147));
}();
/* END STRATUM 406 */
/* BEGIN STRATUM 407 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.93(93,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(67708),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_410_pointsto_objcont_info_93->insert(RamDomain(93),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(148));
}();
/* END STRATUM 407 */
/* BEGIN STRATUM 408 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.94(94,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(90086),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_411_pointsto_objcont_info_94->insert(RamDomain(94),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(149));
}();
/* END STRATUM 408 */
/* BEGIN STRATUM 409 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.95(95,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v1,v2,v0,v1,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(47927),
   enclosing_type(v0,v2),
   assign(v1,v2,v0,v1,v2,v1).").
in file  [0:0-0:0])_");
rel_412_pointsto_objcont_info_95->insert(RamDomain(95),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(150),RamDomain(151));
}();
/* END STRATUM 409 */
/* BEGIN STRATUM 410 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.96(96,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v2,v1,v0,v2,v2,v1","pointsto_objcont(v0,v1,v2) :- 
   Rule(86220),
   enclosing_type(v1,v0),
   assign(v2,v1,v0,v2,v2,v1).").
in file  [0:0-0:0])_");
rel_413_pointsto_objcont_info_96->insert(RamDomain(96),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(152),RamDomain(153));
}();
/* END STRATUM 410 */
/* BEGIN STRATUM 411 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.97(97,"v0,v1,v2","Rule","enclosing_type,v0,v1","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(87963),
   enclosing_type(v0,v1),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_414_pointsto_objcont_info_97->insert(RamDomain(97),RamDomain(8),RamDomain(1),RamDomain(28),RamDomain(38),RamDomain(154));
}();
/* END STRATUM 411 */
/* BEGIN STRATUM 412 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.98(98,"v0,v1,v2","Rule","enclosing_type,v0,v2","assign,v0,v1,v2,v0,v1,v2","pointsto_objcont(v0,v1,v2) :- 
   Rule(20685),
   enclosing_type(v0,v2),
   assign(v0,v1,v2,v0,v1,v2).").
in file  [0:0-0:0])_");
rel_415_pointsto_objcont_info_98->insert(RamDomain(98),RamDomain(8),RamDomain(1),RamDomain(31),RamDomain(38),RamDomain(155));
}();
/* END STRATUM 412 */
/* BEGIN STRATUM 413 */
[&]() {
SignalHandler::instance()->setMsg(R"_(pointsto_objcont.@info.99(99,"v0,v1,v2","Rule","enclosing_type,v1,v0","assign,v0,v1,v2,v1,v2,v0","pointsto_objcont(v0,v1,v2) :- 
   Rule(39726),
   enclosing_type(v1,v0),
   assign(v0,v1,v2,v1,v2,v0).").
in file  [0:0-0:0])_");
rel_416_pointsto_objcont_info_99->insert(RamDomain(99),RamDomain(8),RamDomain(1),RamDomain(41),RamDomain(87),RamDomain(156));
}();
/* END STRATUM 413 */

// -- relation hint statistics --
if(isHintsProfilingEnabled()) {
std::cout << " -- Operation Hint Statistics --\n";
std::cout << "Relation rel_1_Rule:\n";
rel_1_Rule->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_2_actual:\n";
rel_2_actual->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_3_assign:\n";
rel_3_assign->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_4_enclosing_type:\n";
rel_4_enclosing_type->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_5_formal:\n";
rel_5_formal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_6_heappointsto:\n";
rel_6_heappointsto->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_7_invocation:\n";
rel_7_invocation->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_8_load:\n";
rel_8_load->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_9_points_initial:\n";
rel_9_points_initial->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_10_pointsto:\n";
rel_10_pointsto->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_11_receiver_actual:\n";
rel_11_receiver_actual->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_12_receiver_formal:\n";
rel_12_receiver_formal->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_13_store:\n";
rel_13_store->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_14_pointsto_objcont:\n";
rel_14_pointsto_objcont->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_15_delta_pointsto_objcont:\n";
rel_15_delta_pointsto_objcont->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_16_new_pointsto_objcont:\n";
rel_16_new_pointsto_objcont->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_17_pointsto_objcont_info_1:\n";
rel_17_pointsto_objcont_info_1->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_18_pointsto_objcont_info_10:\n";
rel_18_pointsto_objcont_info_10->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_19_pointsto_objcont_info_100:\n";
rel_19_pointsto_objcont_info_100->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_20_pointsto_objcont_info_101:\n";
rel_20_pointsto_objcont_info_101->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_21_pointsto_objcont_info_102:\n";
rel_21_pointsto_objcont_info_102->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_22_pointsto_objcont_info_103:\n";
rel_22_pointsto_objcont_info_103->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_23_pointsto_objcont_info_104:\n";
rel_23_pointsto_objcont_info_104->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_24_pointsto_objcont_info_105:\n";
rel_24_pointsto_objcont_info_105->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_25_pointsto_objcont_info_106:\n";
rel_25_pointsto_objcont_info_106->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_26_pointsto_objcont_info_107:\n";
rel_26_pointsto_objcont_info_107->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_27_pointsto_objcont_info_108:\n";
rel_27_pointsto_objcont_info_108->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_28_pointsto_objcont_info_109:\n";
rel_28_pointsto_objcont_info_109->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_29_pointsto_objcont_info_11:\n";
rel_29_pointsto_objcont_info_11->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_30_pointsto_objcont_info_110:\n";
rel_30_pointsto_objcont_info_110->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_31_pointsto_objcont_info_111:\n";
rel_31_pointsto_objcont_info_111->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_32_pointsto_objcont_info_112:\n";
rel_32_pointsto_objcont_info_112->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_33_pointsto_objcont_info_113:\n";
rel_33_pointsto_objcont_info_113->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_34_pointsto_objcont_info_114:\n";
rel_34_pointsto_objcont_info_114->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_35_pointsto_objcont_info_115:\n";
rel_35_pointsto_objcont_info_115->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_36_pointsto_objcont_info_116:\n";
rel_36_pointsto_objcont_info_116->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_37_pointsto_objcont_info_117:\n";
rel_37_pointsto_objcont_info_117->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_38_pointsto_objcont_info_118:\n";
rel_38_pointsto_objcont_info_118->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_39_pointsto_objcont_info_119:\n";
rel_39_pointsto_objcont_info_119->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_40_pointsto_objcont_info_12:\n";
rel_40_pointsto_objcont_info_12->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_41_pointsto_objcont_info_120:\n";
rel_41_pointsto_objcont_info_120->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_42_pointsto_objcont_info_121:\n";
rel_42_pointsto_objcont_info_121->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_43_pointsto_objcont_info_122:\n";
rel_43_pointsto_objcont_info_122->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_44_pointsto_objcont_info_123:\n";
rel_44_pointsto_objcont_info_123->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_45_pointsto_objcont_info_124:\n";
rel_45_pointsto_objcont_info_124->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_46_pointsto_objcont_info_125:\n";
rel_46_pointsto_objcont_info_125->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_47_pointsto_objcont_info_126:\n";
rel_47_pointsto_objcont_info_126->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_48_pointsto_objcont_info_127:\n";
rel_48_pointsto_objcont_info_127->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_49_pointsto_objcont_info_128:\n";
rel_49_pointsto_objcont_info_128->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_50_pointsto_objcont_info_129:\n";
rel_50_pointsto_objcont_info_129->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_51_pointsto_objcont_info_13:\n";
rel_51_pointsto_objcont_info_13->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_52_pointsto_objcont_info_130:\n";
rel_52_pointsto_objcont_info_130->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_53_pointsto_objcont_info_131:\n";
rel_53_pointsto_objcont_info_131->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_54_pointsto_objcont_info_132:\n";
rel_54_pointsto_objcont_info_132->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_55_pointsto_objcont_info_133:\n";
rel_55_pointsto_objcont_info_133->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_56_pointsto_objcont_info_134:\n";
rel_56_pointsto_objcont_info_134->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_57_pointsto_objcont_info_135:\n";
rel_57_pointsto_objcont_info_135->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_58_pointsto_objcont_info_136:\n";
rel_58_pointsto_objcont_info_136->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_59_pointsto_objcont_info_137:\n";
rel_59_pointsto_objcont_info_137->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_60_pointsto_objcont_info_138:\n";
rel_60_pointsto_objcont_info_138->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_61_pointsto_objcont_info_139:\n";
rel_61_pointsto_objcont_info_139->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_62_pointsto_objcont_info_14:\n";
rel_62_pointsto_objcont_info_14->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_63_pointsto_objcont_info_140:\n";
rel_63_pointsto_objcont_info_140->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_64_pointsto_objcont_info_141:\n";
rel_64_pointsto_objcont_info_141->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_65_pointsto_objcont_info_142:\n";
rel_65_pointsto_objcont_info_142->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_66_pointsto_objcont_info_143:\n";
rel_66_pointsto_objcont_info_143->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_67_pointsto_objcont_info_144:\n";
rel_67_pointsto_objcont_info_144->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_68_pointsto_objcont_info_145:\n";
rel_68_pointsto_objcont_info_145->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_69_pointsto_objcont_info_146:\n";
rel_69_pointsto_objcont_info_146->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_70_pointsto_objcont_info_147:\n";
rel_70_pointsto_objcont_info_147->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_71_pointsto_objcont_info_148:\n";
rel_71_pointsto_objcont_info_148->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_72_pointsto_objcont_info_149:\n";
rel_72_pointsto_objcont_info_149->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_73_pointsto_objcont_info_15:\n";
rel_73_pointsto_objcont_info_15->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_74_pointsto_objcont_info_150:\n";
rel_74_pointsto_objcont_info_150->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_75_pointsto_objcont_info_151:\n";
rel_75_pointsto_objcont_info_151->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_76_pointsto_objcont_info_152:\n";
rel_76_pointsto_objcont_info_152->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_77_pointsto_objcont_info_153:\n";
rel_77_pointsto_objcont_info_153->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_78_pointsto_objcont_info_154:\n";
rel_78_pointsto_objcont_info_154->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_79_pointsto_objcont_info_155:\n";
rel_79_pointsto_objcont_info_155->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_80_pointsto_objcont_info_156:\n";
rel_80_pointsto_objcont_info_156->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_81_pointsto_objcont_info_157:\n";
rel_81_pointsto_objcont_info_157->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_82_pointsto_objcont_info_158:\n";
rel_82_pointsto_objcont_info_158->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_83_pointsto_objcont_info_159:\n";
rel_83_pointsto_objcont_info_159->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_84_pointsto_objcont_info_16:\n";
rel_84_pointsto_objcont_info_16->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_85_pointsto_objcont_info_160:\n";
rel_85_pointsto_objcont_info_160->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_86_pointsto_objcont_info_161:\n";
rel_86_pointsto_objcont_info_161->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_87_pointsto_objcont_info_162:\n";
rel_87_pointsto_objcont_info_162->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_88_pointsto_objcont_info_163:\n";
rel_88_pointsto_objcont_info_163->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_89_pointsto_objcont_info_164:\n";
rel_89_pointsto_objcont_info_164->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_90_pointsto_objcont_info_165:\n";
rel_90_pointsto_objcont_info_165->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_91_pointsto_objcont_info_166:\n";
rel_91_pointsto_objcont_info_166->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_92_pointsto_objcont_info_167:\n";
rel_92_pointsto_objcont_info_167->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_93_pointsto_objcont_info_168:\n";
rel_93_pointsto_objcont_info_168->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_94_pointsto_objcont_info_169:\n";
rel_94_pointsto_objcont_info_169->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_95_pointsto_objcont_info_17:\n";
rel_95_pointsto_objcont_info_17->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_96_pointsto_objcont_info_170:\n";
rel_96_pointsto_objcont_info_170->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_97_pointsto_objcont_info_171:\n";
rel_97_pointsto_objcont_info_171->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_98_pointsto_objcont_info_172:\n";
rel_98_pointsto_objcont_info_172->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_99_pointsto_objcont_info_173:\n";
rel_99_pointsto_objcont_info_173->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_100_pointsto_objcont_info_174:\n";
rel_100_pointsto_objcont_info_174->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_101_pointsto_objcont_info_175:\n";
rel_101_pointsto_objcont_info_175->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_102_pointsto_objcont_info_176:\n";
rel_102_pointsto_objcont_info_176->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_103_pointsto_objcont_info_177:\n";
rel_103_pointsto_objcont_info_177->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_104_pointsto_objcont_info_178:\n";
rel_104_pointsto_objcont_info_178->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_105_pointsto_objcont_info_179:\n";
rel_105_pointsto_objcont_info_179->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_106_pointsto_objcont_info_18:\n";
rel_106_pointsto_objcont_info_18->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_107_pointsto_objcont_info_180:\n";
rel_107_pointsto_objcont_info_180->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_108_pointsto_objcont_info_181:\n";
rel_108_pointsto_objcont_info_181->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_109_pointsto_objcont_info_182:\n";
rel_109_pointsto_objcont_info_182->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_110_pointsto_objcont_info_183:\n";
rel_110_pointsto_objcont_info_183->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_111_pointsto_objcont_info_184:\n";
rel_111_pointsto_objcont_info_184->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_112_pointsto_objcont_info_185:\n";
rel_112_pointsto_objcont_info_185->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_113_pointsto_objcont_info_186:\n";
rel_113_pointsto_objcont_info_186->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_114_pointsto_objcont_info_187:\n";
rel_114_pointsto_objcont_info_187->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_115_pointsto_objcont_info_188:\n";
rel_115_pointsto_objcont_info_188->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_116_pointsto_objcont_info_189:\n";
rel_116_pointsto_objcont_info_189->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_117_pointsto_objcont_info_19:\n";
rel_117_pointsto_objcont_info_19->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_118_pointsto_objcont_info_190:\n";
rel_118_pointsto_objcont_info_190->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_119_pointsto_objcont_info_191:\n";
rel_119_pointsto_objcont_info_191->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_120_pointsto_objcont_info_192:\n";
rel_120_pointsto_objcont_info_192->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_121_pointsto_objcont_info_193:\n";
rel_121_pointsto_objcont_info_193->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_122_pointsto_objcont_info_194:\n";
rel_122_pointsto_objcont_info_194->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_123_pointsto_objcont_info_195:\n";
rel_123_pointsto_objcont_info_195->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_124_pointsto_objcont_info_196:\n";
rel_124_pointsto_objcont_info_196->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_125_pointsto_objcont_info_197:\n";
rel_125_pointsto_objcont_info_197->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_126_pointsto_objcont_info_198:\n";
rel_126_pointsto_objcont_info_198->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_127_pointsto_objcont_info_199:\n";
rel_127_pointsto_objcont_info_199->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_128_pointsto_objcont_info_2:\n";
rel_128_pointsto_objcont_info_2->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_129_pointsto_objcont_info_20:\n";
rel_129_pointsto_objcont_info_20->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_130_pointsto_objcont_info_200:\n";
rel_130_pointsto_objcont_info_200->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_131_pointsto_objcont_info_201:\n";
rel_131_pointsto_objcont_info_201->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_132_pointsto_objcont_info_202:\n";
rel_132_pointsto_objcont_info_202->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_133_pointsto_objcont_info_203:\n";
rel_133_pointsto_objcont_info_203->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_134_pointsto_objcont_info_204:\n";
rel_134_pointsto_objcont_info_204->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_135_pointsto_objcont_info_205:\n";
rel_135_pointsto_objcont_info_205->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_136_pointsto_objcont_info_206:\n";
rel_136_pointsto_objcont_info_206->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_137_pointsto_objcont_info_207:\n";
rel_137_pointsto_objcont_info_207->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_138_pointsto_objcont_info_208:\n";
rel_138_pointsto_objcont_info_208->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_139_pointsto_objcont_info_209:\n";
rel_139_pointsto_objcont_info_209->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_140_pointsto_objcont_info_21:\n";
rel_140_pointsto_objcont_info_21->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_141_pointsto_objcont_info_210:\n";
rel_141_pointsto_objcont_info_210->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_142_pointsto_objcont_info_211:\n";
rel_142_pointsto_objcont_info_211->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_143_pointsto_objcont_info_212:\n";
rel_143_pointsto_objcont_info_212->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_144_pointsto_objcont_info_213:\n";
rel_144_pointsto_objcont_info_213->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_145_pointsto_objcont_info_214:\n";
rel_145_pointsto_objcont_info_214->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_146_pointsto_objcont_info_215:\n";
rel_146_pointsto_objcont_info_215->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_147_pointsto_objcont_info_216:\n";
rel_147_pointsto_objcont_info_216->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_148_pointsto_objcont_info_217:\n";
rel_148_pointsto_objcont_info_217->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_149_pointsto_objcont_info_218:\n";
rel_149_pointsto_objcont_info_218->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_150_pointsto_objcont_info_219:\n";
rel_150_pointsto_objcont_info_219->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_151_pointsto_objcont_info_22:\n";
rel_151_pointsto_objcont_info_22->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_152_pointsto_objcont_info_220:\n";
rel_152_pointsto_objcont_info_220->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_153_pointsto_objcont_info_221:\n";
rel_153_pointsto_objcont_info_221->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_154_pointsto_objcont_info_222:\n";
rel_154_pointsto_objcont_info_222->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_155_pointsto_objcont_info_223:\n";
rel_155_pointsto_objcont_info_223->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_156_pointsto_objcont_info_224:\n";
rel_156_pointsto_objcont_info_224->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_157_pointsto_objcont_info_225:\n";
rel_157_pointsto_objcont_info_225->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_158_pointsto_objcont_info_226:\n";
rel_158_pointsto_objcont_info_226->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_159_pointsto_objcont_info_227:\n";
rel_159_pointsto_objcont_info_227->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_160_pointsto_objcont_info_228:\n";
rel_160_pointsto_objcont_info_228->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_161_pointsto_objcont_info_229:\n";
rel_161_pointsto_objcont_info_229->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_162_pointsto_objcont_info_23:\n";
rel_162_pointsto_objcont_info_23->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_163_pointsto_objcont_info_230:\n";
rel_163_pointsto_objcont_info_230->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_164_pointsto_objcont_info_231:\n";
rel_164_pointsto_objcont_info_231->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_165_pointsto_objcont_info_232:\n";
rel_165_pointsto_objcont_info_232->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_166_pointsto_objcont_info_233:\n";
rel_166_pointsto_objcont_info_233->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_167_pointsto_objcont_info_234:\n";
rel_167_pointsto_objcont_info_234->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_168_pointsto_objcont_info_235:\n";
rel_168_pointsto_objcont_info_235->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_169_pointsto_objcont_info_236:\n";
rel_169_pointsto_objcont_info_236->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_170_pointsto_objcont_info_237:\n";
rel_170_pointsto_objcont_info_237->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_171_pointsto_objcont_info_238:\n";
rel_171_pointsto_objcont_info_238->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_172_pointsto_objcont_info_239:\n";
rel_172_pointsto_objcont_info_239->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_173_pointsto_objcont_info_24:\n";
rel_173_pointsto_objcont_info_24->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_174_pointsto_objcont_info_240:\n";
rel_174_pointsto_objcont_info_240->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_175_pointsto_objcont_info_241:\n";
rel_175_pointsto_objcont_info_241->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_176_pointsto_objcont_info_242:\n";
rel_176_pointsto_objcont_info_242->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_177_pointsto_objcont_info_243:\n";
rel_177_pointsto_objcont_info_243->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_178_pointsto_objcont_info_244:\n";
rel_178_pointsto_objcont_info_244->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_179_pointsto_objcont_info_245:\n";
rel_179_pointsto_objcont_info_245->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_180_pointsto_objcont_info_246:\n";
rel_180_pointsto_objcont_info_246->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_181_pointsto_objcont_info_247:\n";
rel_181_pointsto_objcont_info_247->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_182_pointsto_objcont_info_248:\n";
rel_182_pointsto_objcont_info_248->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_183_pointsto_objcont_info_249:\n";
rel_183_pointsto_objcont_info_249->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_184_pointsto_objcont_info_25:\n";
rel_184_pointsto_objcont_info_25->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_185_pointsto_objcont_info_250:\n";
rel_185_pointsto_objcont_info_250->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_186_pointsto_objcont_info_251:\n";
rel_186_pointsto_objcont_info_251->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_187_pointsto_objcont_info_252:\n";
rel_187_pointsto_objcont_info_252->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_188_pointsto_objcont_info_253:\n";
rel_188_pointsto_objcont_info_253->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_189_pointsto_objcont_info_254:\n";
rel_189_pointsto_objcont_info_254->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_190_pointsto_objcont_info_255:\n";
rel_190_pointsto_objcont_info_255->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_191_pointsto_objcont_info_256:\n";
rel_191_pointsto_objcont_info_256->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_192_pointsto_objcont_info_257:\n";
rel_192_pointsto_objcont_info_257->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_193_pointsto_objcont_info_258:\n";
rel_193_pointsto_objcont_info_258->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_194_pointsto_objcont_info_259:\n";
rel_194_pointsto_objcont_info_259->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_195_pointsto_objcont_info_26:\n";
rel_195_pointsto_objcont_info_26->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_196_pointsto_objcont_info_260:\n";
rel_196_pointsto_objcont_info_260->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_197_pointsto_objcont_info_261:\n";
rel_197_pointsto_objcont_info_261->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_198_pointsto_objcont_info_262:\n";
rel_198_pointsto_objcont_info_262->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_199_pointsto_objcont_info_263:\n";
rel_199_pointsto_objcont_info_263->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_200_pointsto_objcont_info_264:\n";
rel_200_pointsto_objcont_info_264->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_201_pointsto_objcont_info_265:\n";
rel_201_pointsto_objcont_info_265->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_202_pointsto_objcont_info_266:\n";
rel_202_pointsto_objcont_info_266->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_203_pointsto_objcont_info_267:\n";
rel_203_pointsto_objcont_info_267->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_204_pointsto_objcont_info_268:\n";
rel_204_pointsto_objcont_info_268->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_205_pointsto_objcont_info_269:\n";
rel_205_pointsto_objcont_info_269->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_206_pointsto_objcont_info_27:\n";
rel_206_pointsto_objcont_info_27->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_207_pointsto_objcont_info_270:\n";
rel_207_pointsto_objcont_info_270->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_208_pointsto_objcont_info_271:\n";
rel_208_pointsto_objcont_info_271->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_209_pointsto_objcont_info_272:\n";
rel_209_pointsto_objcont_info_272->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_210_pointsto_objcont_info_273:\n";
rel_210_pointsto_objcont_info_273->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_211_pointsto_objcont_info_274:\n";
rel_211_pointsto_objcont_info_274->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_212_pointsto_objcont_info_275:\n";
rel_212_pointsto_objcont_info_275->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_213_pointsto_objcont_info_276:\n";
rel_213_pointsto_objcont_info_276->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_214_pointsto_objcont_info_277:\n";
rel_214_pointsto_objcont_info_277->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_215_pointsto_objcont_info_278:\n";
rel_215_pointsto_objcont_info_278->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_216_pointsto_objcont_info_279:\n";
rel_216_pointsto_objcont_info_279->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_217_pointsto_objcont_info_28:\n";
rel_217_pointsto_objcont_info_28->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_218_pointsto_objcont_info_280:\n";
rel_218_pointsto_objcont_info_280->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_219_pointsto_objcont_info_281:\n";
rel_219_pointsto_objcont_info_281->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_220_pointsto_objcont_info_282:\n";
rel_220_pointsto_objcont_info_282->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_221_pointsto_objcont_info_283:\n";
rel_221_pointsto_objcont_info_283->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_222_pointsto_objcont_info_284:\n";
rel_222_pointsto_objcont_info_284->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_223_pointsto_objcont_info_285:\n";
rel_223_pointsto_objcont_info_285->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_224_pointsto_objcont_info_286:\n";
rel_224_pointsto_objcont_info_286->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_225_pointsto_objcont_info_287:\n";
rel_225_pointsto_objcont_info_287->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_226_pointsto_objcont_info_288:\n";
rel_226_pointsto_objcont_info_288->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_227_pointsto_objcont_info_289:\n";
rel_227_pointsto_objcont_info_289->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_228_pointsto_objcont_info_29:\n";
rel_228_pointsto_objcont_info_29->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_229_pointsto_objcont_info_290:\n";
rel_229_pointsto_objcont_info_290->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_230_pointsto_objcont_info_291:\n";
rel_230_pointsto_objcont_info_291->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_231_pointsto_objcont_info_292:\n";
rel_231_pointsto_objcont_info_292->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_232_pointsto_objcont_info_293:\n";
rel_232_pointsto_objcont_info_293->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_233_pointsto_objcont_info_294:\n";
rel_233_pointsto_objcont_info_294->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_234_pointsto_objcont_info_295:\n";
rel_234_pointsto_objcont_info_295->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_235_pointsto_objcont_info_296:\n";
rel_235_pointsto_objcont_info_296->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_236_pointsto_objcont_info_297:\n";
rel_236_pointsto_objcont_info_297->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_237_pointsto_objcont_info_298:\n";
rel_237_pointsto_objcont_info_298->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_238_pointsto_objcont_info_299:\n";
rel_238_pointsto_objcont_info_299->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_239_pointsto_objcont_info_3:\n";
rel_239_pointsto_objcont_info_3->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_240_pointsto_objcont_info_30:\n";
rel_240_pointsto_objcont_info_30->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_241_pointsto_objcont_info_300:\n";
rel_241_pointsto_objcont_info_300->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_242_pointsto_objcont_info_301:\n";
rel_242_pointsto_objcont_info_301->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_243_pointsto_objcont_info_302:\n";
rel_243_pointsto_objcont_info_302->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_244_pointsto_objcont_info_303:\n";
rel_244_pointsto_objcont_info_303->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_245_pointsto_objcont_info_304:\n";
rel_245_pointsto_objcont_info_304->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_246_pointsto_objcont_info_305:\n";
rel_246_pointsto_objcont_info_305->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_247_pointsto_objcont_info_306:\n";
rel_247_pointsto_objcont_info_306->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_248_pointsto_objcont_info_307:\n";
rel_248_pointsto_objcont_info_307->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_249_pointsto_objcont_info_308:\n";
rel_249_pointsto_objcont_info_308->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_250_pointsto_objcont_info_309:\n";
rel_250_pointsto_objcont_info_309->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_251_pointsto_objcont_info_31:\n";
rel_251_pointsto_objcont_info_31->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_252_pointsto_objcont_info_310:\n";
rel_252_pointsto_objcont_info_310->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_253_pointsto_objcont_info_311:\n";
rel_253_pointsto_objcont_info_311->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_254_pointsto_objcont_info_312:\n";
rel_254_pointsto_objcont_info_312->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_255_pointsto_objcont_info_313:\n";
rel_255_pointsto_objcont_info_313->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_256_pointsto_objcont_info_314:\n";
rel_256_pointsto_objcont_info_314->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_257_pointsto_objcont_info_315:\n";
rel_257_pointsto_objcont_info_315->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_258_pointsto_objcont_info_316:\n";
rel_258_pointsto_objcont_info_316->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_259_pointsto_objcont_info_317:\n";
rel_259_pointsto_objcont_info_317->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_260_pointsto_objcont_info_318:\n";
rel_260_pointsto_objcont_info_318->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_261_pointsto_objcont_info_319:\n";
rel_261_pointsto_objcont_info_319->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_262_pointsto_objcont_info_32:\n";
rel_262_pointsto_objcont_info_32->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_263_pointsto_objcont_info_320:\n";
rel_263_pointsto_objcont_info_320->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_264_pointsto_objcont_info_321:\n";
rel_264_pointsto_objcont_info_321->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_265_pointsto_objcont_info_322:\n";
rel_265_pointsto_objcont_info_322->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_266_pointsto_objcont_info_323:\n";
rel_266_pointsto_objcont_info_323->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_267_pointsto_objcont_info_324:\n";
rel_267_pointsto_objcont_info_324->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_268_pointsto_objcont_info_325:\n";
rel_268_pointsto_objcont_info_325->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_269_pointsto_objcont_info_326:\n";
rel_269_pointsto_objcont_info_326->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_270_pointsto_objcont_info_327:\n";
rel_270_pointsto_objcont_info_327->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_271_pointsto_objcont_info_328:\n";
rel_271_pointsto_objcont_info_328->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_272_pointsto_objcont_info_329:\n";
rel_272_pointsto_objcont_info_329->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_273_pointsto_objcont_info_33:\n";
rel_273_pointsto_objcont_info_33->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_274_pointsto_objcont_info_330:\n";
rel_274_pointsto_objcont_info_330->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_275_pointsto_objcont_info_331:\n";
rel_275_pointsto_objcont_info_331->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_276_pointsto_objcont_info_332:\n";
rel_276_pointsto_objcont_info_332->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_277_pointsto_objcont_info_333:\n";
rel_277_pointsto_objcont_info_333->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_278_pointsto_objcont_info_334:\n";
rel_278_pointsto_objcont_info_334->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_279_pointsto_objcont_info_335:\n";
rel_279_pointsto_objcont_info_335->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_280_pointsto_objcont_info_336:\n";
rel_280_pointsto_objcont_info_336->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_281_pointsto_objcont_info_337:\n";
rel_281_pointsto_objcont_info_337->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_282_pointsto_objcont_info_338:\n";
rel_282_pointsto_objcont_info_338->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_283_pointsto_objcont_info_339:\n";
rel_283_pointsto_objcont_info_339->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_284_pointsto_objcont_info_34:\n";
rel_284_pointsto_objcont_info_34->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_285_pointsto_objcont_info_340:\n";
rel_285_pointsto_objcont_info_340->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_286_pointsto_objcont_info_341:\n";
rel_286_pointsto_objcont_info_341->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_287_pointsto_objcont_info_342:\n";
rel_287_pointsto_objcont_info_342->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_288_pointsto_objcont_info_343:\n";
rel_288_pointsto_objcont_info_343->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_289_pointsto_objcont_info_344:\n";
rel_289_pointsto_objcont_info_344->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_290_pointsto_objcont_info_345:\n";
rel_290_pointsto_objcont_info_345->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_291_pointsto_objcont_info_346:\n";
rel_291_pointsto_objcont_info_346->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_292_pointsto_objcont_info_347:\n";
rel_292_pointsto_objcont_info_347->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_293_pointsto_objcont_info_348:\n";
rel_293_pointsto_objcont_info_348->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_294_pointsto_objcont_info_349:\n";
rel_294_pointsto_objcont_info_349->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_295_pointsto_objcont_info_35:\n";
rel_295_pointsto_objcont_info_35->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_296_pointsto_objcont_info_350:\n";
rel_296_pointsto_objcont_info_350->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_297_pointsto_objcont_info_351:\n";
rel_297_pointsto_objcont_info_351->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_298_pointsto_objcont_info_352:\n";
rel_298_pointsto_objcont_info_352->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_299_pointsto_objcont_info_353:\n";
rel_299_pointsto_objcont_info_353->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_300_pointsto_objcont_info_354:\n";
rel_300_pointsto_objcont_info_354->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_301_pointsto_objcont_info_355:\n";
rel_301_pointsto_objcont_info_355->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_302_pointsto_objcont_info_356:\n";
rel_302_pointsto_objcont_info_356->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_303_pointsto_objcont_info_357:\n";
rel_303_pointsto_objcont_info_357->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_304_pointsto_objcont_info_358:\n";
rel_304_pointsto_objcont_info_358->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_305_pointsto_objcont_info_359:\n";
rel_305_pointsto_objcont_info_359->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_306_pointsto_objcont_info_36:\n";
rel_306_pointsto_objcont_info_36->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_307_pointsto_objcont_info_360:\n";
rel_307_pointsto_objcont_info_360->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_308_pointsto_objcont_info_361:\n";
rel_308_pointsto_objcont_info_361->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_309_pointsto_objcont_info_362:\n";
rel_309_pointsto_objcont_info_362->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_310_pointsto_objcont_info_363:\n";
rel_310_pointsto_objcont_info_363->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_311_pointsto_objcont_info_364:\n";
rel_311_pointsto_objcont_info_364->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_312_pointsto_objcont_info_365:\n";
rel_312_pointsto_objcont_info_365->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_313_pointsto_objcont_info_366:\n";
rel_313_pointsto_objcont_info_366->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_314_pointsto_objcont_info_367:\n";
rel_314_pointsto_objcont_info_367->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_315_pointsto_objcont_info_368:\n";
rel_315_pointsto_objcont_info_368->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_316_pointsto_objcont_info_369:\n";
rel_316_pointsto_objcont_info_369->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_317_pointsto_objcont_info_37:\n";
rel_317_pointsto_objcont_info_37->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_318_pointsto_objcont_info_370:\n";
rel_318_pointsto_objcont_info_370->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_319_pointsto_objcont_info_371:\n";
rel_319_pointsto_objcont_info_371->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_320_pointsto_objcont_info_372:\n";
rel_320_pointsto_objcont_info_372->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_321_pointsto_objcont_info_373:\n";
rel_321_pointsto_objcont_info_373->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_322_pointsto_objcont_info_374:\n";
rel_322_pointsto_objcont_info_374->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_323_pointsto_objcont_info_375:\n";
rel_323_pointsto_objcont_info_375->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_324_pointsto_objcont_info_376:\n";
rel_324_pointsto_objcont_info_376->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_325_pointsto_objcont_info_377:\n";
rel_325_pointsto_objcont_info_377->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_326_pointsto_objcont_info_378:\n";
rel_326_pointsto_objcont_info_378->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_327_pointsto_objcont_info_379:\n";
rel_327_pointsto_objcont_info_379->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_328_pointsto_objcont_info_38:\n";
rel_328_pointsto_objcont_info_38->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_329_pointsto_objcont_info_380:\n";
rel_329_pointsto_objcont_info_380->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_330_pointsto_objcont_info_381:\n";
rel_330_pointsto_objcont_info_381->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_331_pointsto_objcont_info_382:\n";
rel_331_pointsto_objcont_info_382->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_332_pointsto_objcont_info_383:\n";
rel_332_pointsto_objcont_info_383->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_333_pointsto_objcont_info_384:\n";
rel_333_pointsto_objcont_info_384->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_334_pointsto_objcont_info_385:\n";
rel_334_pointsto_objcont_info_385->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_335_pointsto_objcont_info_386:\n";
rel_335_pointsto_objcont_info_386->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_336_pointsto_objcont_info_387:\n";
rel_336_pointsto_objcont_info_387->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_337_pointsto_objcont_info_388:\n";
rel_337_pointsto_objcont_info_388->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_338_pointsto_objcont_info_389:\n";
rel_338_pointsto_objcont_info_389->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_339_pointsto_objcont_info_39:\n";
rel_339_pointsto_objcont_info_39->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_340_pointsto_objcont_info_390:\n";
rel_340_pointsto_objcont_info_390->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_341_pointsto_objcont_info_391:\n";
rel_341_pointsto_objcont_info_391->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_342_pointsto_objcont_info_392:\n";
rel_342_pointsto_objcont_info_392->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_343_pointsto_objcont_info_393:\n";
rel_343_pointsto_objcont_info_393->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_344_pointsto_objcont_info_394:\n";
rel_344_pointsto_objcont_info_394->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_345_pointsto_objcont_info_395:\n";
rel_345_pointsto_objcont_info_395->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_346_pointsto_objcont_info_396:\n";
rel_346_pointsto_objcont_info_396->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_347_pointsto_objcont_info_397:\n";
rel_347_pointsto_objcont_info_397->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_348_pointsto_objcont_info_398:\n";
rel_348_pointsto_objcont_info_398->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_349_pointsto_objcont_info_399:\n";
rel_349_pointsto_objcont_info_399->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_350_pointsto_objcont_info_4:\n";
rel_350_pointsto_objcont_info_4->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_351_pointsto_objcont_info_40:\n";
rel_351_pointsto_objcont_info_40->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_352_pointsto_objcont_info_400:\n";
rel_352_pointsto_objcont_info_400->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_353_pointsto_objcont_info_41:\n";
rel_353_pointsto_objcont_info_41->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_354_pointsto_objcont_info_42:\n";
rel_354_pointsto_objcont_info_42->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_355_pointsto_objcont_info_43:\n";
rel_355_pointsto_objcont_info_43->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_356_pointsto_objcont_info_44:\n";
rel_356_pointsto_objcont_info_44->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_357_pointsto_objcont_info_45:\n";
rel_357_pointsto_objcont_info_45->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_358_pointsto_objcont_info_46:\n";
rel_358_pointsto_objcont_info_46->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_359_pointsto_objcont_info_47:\n";
rel_359_pointsto_objcont_info_47->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_360_pointsto_objcont_info_48:\n";
rel_360_pointsto_objcont_info_48->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_361_pointsto_objcont_info_49:\n";
rel_361_pointsto_objcont_info_49->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_362_pointsto_objcont_info_5:\n";
rel_362_pointsto_objcont_info_5->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_363_pointsto_objcont_info_50:\n";
rel_363_pointsto_objcont_info_50->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_364_pointsto_objcont_info_51:\n";
rel_364_pointsto_objcont_info_51->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_365_pointsto_objcont_info_52:\n";
rel_365_pointsto_objcont_info_52->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_366_pointsto_objcont_info_53:\n";
rel_366_pointsto_objcont_info_53->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_367_pointsto_objcont_info_54:\n";
rel_367_pointsto_objcont_info_54->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_368_pointsto_objcont_info_55:\n";
rel_368_pointsto_objcont_info_55->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_369_pointsto_objcont_info_56:\n";
rel_369_pointsto_objcont_info_56->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_370_pointsto_objcont_info_57:\n";
rel_370_pointsto_objcont_info_57->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_371_pointsto_objcont_info_58:\n";
rel_371_pointsto_objcont_info_58->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_372_pointsto_objcont_info_59:\n";
rel_372_pointsto_objcont_info_59->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_373_pointsto_objcont_info_6:\n";
rel_373_pointsto_objcont_info_6->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_374_pointsto_objcont_info_60:\n";
rel_374_pointsto_objcont_info_60->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_375_pointsto_objcont_info_61:\n";
rel_375_pointsto_objcont_info_61->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_376_pointsto_objcont_info_62:\n";
rel_376_pointsto_objcont_info_62->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_377_pointsto_objcont_info_63:\n";
rel_377_pointsto_objcont_info_63->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_378_pointsto_objcont_info_64:\n";
rel_378_pointsto_objcont_info_64->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_379_pointsto_objcont_info_65:\n";
rel_379_pointsto_objcont_info_65->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_380_pointsto_objcont_info_66:\n";
rel_380_pointsto_objcont_info_66->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_381_pointsto_objcont_info_67:\n";
rel_381_pointsto_objcont_info_67->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_382_pointsto_objcont_info_68:\n";
rel_382_pointsto_objcont_info_68->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_383_pointsto_objcont_info_69:\n";
rel_383_pointsto_objcont_info_69->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_384_pointsto_objcont_info_7:\n";
rel_384_pointsto_objcont_info_7->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_385_pointsto_objcont_info_70:\n";
rel_385_pointsto_objcont_info_70->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_386_pointsto_objcont_info_71:\n";
rel_386_pointsto_objcont_info_71->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_387_pointsto_objcont_info_72:\n";
rel_387_pointsto_objcont_info_72->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_388_pointsto_objcont_info_73:\n";
rel_388_pointsto_objcont_info_73->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_389_pointsto_objcont_info_74:\n";
rel_389_pointsto_objcont_info_74->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_390_pointsto_objcont_info_75:\n";
rel_390_pointsto_objcont_info_75->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_391_pointsto_objcont_info_76:\n";
rel_391_pointsto_objcont_info_76->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_392_pointsto_objcont_info_77:\n";
rel_392_pointsto_objcont_info_77->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_393_pointsto_objcont_info_78:\n";
rel_393_pointsto_objcont_info_78->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_394_pointsto_objcont_info_79:\n";
rel_394_pointsto_objcont_info_79->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_395_pointsto_objcont_info_8:\n";
rel_395_pointsto_objcont_info_8->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_396_pointsto_objcont_info_80:\n";
rel_396_pointsto_objcont_info_80->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_397_pointsto_objcont_info_81:\n";
rel_397_pointsto_objcont_info_81->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_398_pointsto_objcont_info_82:\n";
rel_398_pointsto_objcont_info_82->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_399_pointsto_objcont_info_83:\n";
rel_399_pointsto_objcont_info_83->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_400_pointsto_objcont_info_84:\n";
rel_400_pointsto_objcont_info_84->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_401_pointsto_objcont_info_85:\n";
rel_401_pointsto_objcont_info_85->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_402_pointsto_objcont_info_86:\n";
rel_402_pointsto_objcont_info_86->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_403_pointsto_objcont_info_87:\n";
rel_403_pointsto_objcont_info_87->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_404_pointsto_objcont_info_88:\n";
rel_404_pointsto_objcont_info_88->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_405_pointsto_objcont_info_89:\n";
rel_405_pointsto_objcont_info_89->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_406_pointsto_objcont_info_9:\n";
rel_406_pointsto_objcont_info_9->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_407_pointsto_objcont_info_90:\n";
rel_407_pointsto_objcont_info_90->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_408_pointsto_objcont_info_91:\n";
rel_408_pointsto_objcont_info_91->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_409_pointsto_objcont_info_92:\n";
rel_409_pointsto_objcont_info_92->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_410_pointsto_objcont_info_93:\n";
rel_410_pointsto_objcont_info_93->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_411_pointsto_objcont_info_94:\n";
rel_411_pointsto_objcont_info_94->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_412_pointsto_objcont_info_95:\n";
rel_412_pointsto_objcont_info_95->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_413_pointsto_objcont_info_96:\n";
rel_413_pointsto_objcont_info_96->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_414_pointsto_objcont_info_97:\n";
rel_414_pointsto_objcont_info_97->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_415_pointsto_objcont_info_98:\n";
rel_415_pointsto_objcont_info_98->printHintStatistics(std::cout,"  ");
std::cout << "\n";
std::cout << "Relation rel_416_pointsto_objcont_info_99:\n";
rel_416_pointsto_objcont_info_99->printHintStatistics(std::cout,"  ");
std::cout << "\n";
}
SignalHandler::instance()->reset();
}
public:
void run(size_t stratumIndex = (size_t) -1) override { runFunction(".", ".", stratumIndex, false); }
public:
void runAll(std::string inputDirectory = ".", std::string outputDirectory = ".", size_t stratumIndex = (size_t) -1) override { runFunction(inputDirectory, outputDirectory, stratumIndex, true);
}
public:
void printAll(std::string outputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1\tv2"},{"filename","./heappointsto.csv"},{"name","heappointsto"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_heappointsto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1\tv2\tv3"},{"filename","./pointsto.csv"},{"name","pointsto"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_10_pointsto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"attributeNames","v0\tv1\tv2"},{"filename","./pointsto_objcont.csv"},{"name","pointsto_objcont"}});
if (!outputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = outputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_14_pointsto_objcont);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void loadAll(std::string inputDirectory = ".") override {
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./Rule.facts"},{"name","Rule"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->readAll(*rel_1_Rule);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./actual.facts"},{"name","actual"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_2_actual);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./assign.facts"},{"name","assign"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_3_assign);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./enclosing_type.facts"},{"name","enclosing_type"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_4_enclosing_type);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./formal.facts"},{"name","formal"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_5_formal);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./invocation.facts"},{"name","invocation"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_7_invocation);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./load.facts"},{"name","load"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_8_load);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./points_initial.facts"},{"name","points_initial"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_9_points_initial);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./receiver_actual.facts"},{"name","receiver_actual"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_11_receiver_actual);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./receiver_formal.facts"},{"name","receiver_formal"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_12_receiver_formal);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
try {std::map<std::string, std::string> directiveMap({{"IO","file"},{"filename","./store.facts"},{"name","store"}});
if (!inputDirectory.empty() && directiveMap["IO"] == "file" && directiveMap["filename"].front() != '/') {directiveMap["filename"] = inputDirectory + "/" + directiveMap["filename"];}
IODirectives ioDirectives(directiveMap);
IOSystem::getInstance().getReader(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->readAll(*rel_13_store);
} catch (std::exception& e) {std::cerr << "Error loading data: " << e.what() << '\n';}
}
public:
void dumpInputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_1_Rule");
IOSystem::getInstance().getWriter(std::vector<bool>({0,0,0}), symTable, ioDirectives, true)->writeAll(*rel_1_Rule);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_2_actual");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_2_actual);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_3_assign");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_3_assign);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_4_enclosing_type");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_4_enclosing_type);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_5_formal");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_5_formal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_7_invocation");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_7_invocation);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_8_load");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_8_load);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_9_points_initial");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_9_points_initial);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_11_receiver_actual");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_11_receiver_actual);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_12_receiver_formal");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_12_receiver_formal);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_13_store");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_13_store);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
void dumpOutputs(std::ostream& out = std::cout) override {
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_6_heappointsto");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_6_heappointsto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_10_pointsto");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_10_pointsto);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
try {IODirectives ioDirectives;
ioDirectives.setIOType("stdout");
ioDirectives.setRelationName("rel_14_pointsto_objcont");
IOSystem::getInstance().getWriter(std::vector<bool>({1,1,1,0,0}), symTable, ioDirectives, true)->writeAll(*rel_14_pointsto_objcont);
} catch (std::exception& e) {std::cerr << e.what();exit(1);}
}
public:
SymbolTable& getSymbolTable() override {
return symTable;
}
void executeSubroutine(std::string name, const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) override {
if (name == "pointsto_objcont_100_negation_subproof") {
subproof_0(args, ret, err);
}
if (name == "pointsto_objcont_100_subproof") {
subproof_1(args, ret, err);
}
if (name == "pointsto_objcont_101_negation_subproof") {
subproof_2(args, ret, err);
}
if (name == "pointsto_objcont_101_subproof") {
subproof_3(args, ret, err);
}
if (name == "pointsto_objcont_102_negation_subproof") {
subproof_4(args, ret, err);
}
if (name == "pointsto_objcont_102_subproof") {
subproof_5(args, ret, err);
}
if (name == "pointsto_objcont_103_negation_subproof") {
subproof_6(args, ret, err);
}
if (name == "pointsto_objcont_103_subproof") {
subproof_7(args, ret, err);
}
if (name == "pointsto_objcont_104_negation_subproof") {
subproof_8(args, ret, err);
}
if (name == "pointsto_objcont_104_subproof") {
subproof_9(args, ret, err);
}
if (name == "pointsto_objcont_105_negation_subproof") {
subproof_10(args, ret, err);
}
if (name == "pointsto_objcont_105_subproof") {
subproof_11(args, ret, err);
}
if (name == "pointsto_objcont_106_negation_subproof") {
subproof_12(args, ret, err);
}
if (name == "pointsto_objcont_106_subproof") {
subproof_13(args, ret, err);
}
if (name == "pointsto_objcont_107_negation_subproof") {
subproof_14(args, ret, err);
}
if (name == "pointsto_objcont_107_subproof") {
subproof_15(args, ret, err);
}
if (name == "pointsto_objcont_108_negation_subproof") {
subproof_16(args, ret, err);
}
if (name == "pointsto_objcont_108_subproof") {
subproof_17(args, ret, err);
}
if (name == "pointsto_objcont_109_negation_subproof") {
subproof_18(args, ret, err);
}
if (name == "pointsto_objcont_109_subproof") {
subproof_19(args, ret, err);
}
if (name == "pointsto_objcont_10_negation_subproof") {
subproof_20(args, ret, err);
}
if (name == "pointsto_objcont_10_subproof") {
subproof_21(args, ret, err);
}
if (name == "pointsto_objcont_110_negation_subproof") {
subproof_22(args, ret, err);
}
if (name == "pointsto_objcont_110_subproof") {
subproof_23(args, ret, err);
}
if (name == "pointsto_objcont_111_negation_subproof") {
subproof_24(args, ret, err);
}
if (name == "pointsto_objcont_111_subproof") {
subproof_25(args, ret, err);
}
if (name == "pointsto_objcont_112_negation_subproof") {
subproof_26(args, ret, err);
}
if (name == "pointsto_objcont_112_subproof") {
subproof_27(args, ret, err);
}
if (name == "pointsto_objcont_113_negation_subproof") {
subproof_28(args, ret, err);
}
if (name == "pointsto_objcont_113_subproof") {
subproof_29(args, ret, err);
}
if (name == "pointsto_objcont_114_negation_subproof") {
subproof_30(args, ret, err);
}
if (name == "pointsto_objcont_114_subproof") {
subproof_31(args, ret, err);
}
if (name == "pointsto_objcont_115_negation_subproof") {
subproof_32(args, ret, err);
}
if (name == "pointsto_objcont_115_subproof") {
subproof_33(args, ret, err);
}
if (name == "pointsto_objcont_116_negation_subproof") {
subproof_34(args, ret, err);
}
if (name == "pointsto_objcont_116_subproof") {
subproof_35(args, ret, err);
}
if (name == "pointsto_objcont_117_negation_subproof") {
subproof_36(args, ret, err);
}
if (name == "pointsto_objcont_117_subproof") {
subproof_37(args, ret, err);
}
if (name == "pointsto_objcont_118_negation_subproof") {
subproof_38(args, ret, err);
}
if (name == "pointsto_objcont_118_subproof") {
subproof_39(args, ret, err);
}
if (name == "pointsto_objcont_119_negation_subproof") {
subproof_40(args, ret, err);
}
if (name == "pointsto_objcont_119_subproof") {
subproof_41(args, ret, err);
}
if (name == "pointsto_objcont_11_negation_subproof") {
subproof_42(args, ret, err);
}
if (name == "pointsto_objcont_11_subproof") {
subproof_43(args, ret, err);
}
if (name == "pointsto_objcont_120_negation_subproof") {
subproof_44(args, ret, err);
}
if (name == "pointsto_objcont_120_subproof") {
subproof_45(args, ret, err);
}
if (name == "pointsto_objcont_121_negation_subproof") {
subproof_46(args, ret, err);
}
if (name == "pointsto_objcont_121_subproof") {
subproof_47(args, ret, err);
}
if (name == "pointsto_objcont_122_negation_subproof") {
subproof_48(args, ret, err);
}
if (name == "pointsto_objcont_122_subproof") {
subproof_49(args, ret, err);
}
if (name == "pointsto_objcont_123_negation_subproof") {
subproof_50(args, ret, err);
}
if (name == "pointsto_objcont_123_subproof") {
subproof_51(args, ret, err);
}
if (name == "pointsto_objcont_124_negation_subproof") {
subproof_52(args, ret, err);
}
if (name == "pointsto_objcont_124_subproof") {
subproof_53(args, ret, err);
}
if (name == "pointsto_objcont_125_negation_subproof") {
subproof_54(args, ret, err);
}
if (name == "pointsto_objcont_125_subproof") {
subproof_55(args, ret, err);
}
if (name == "pointsto_objcont_126_negation_subproof") {
subproof_56(args, ret, err);
}
if (name == "pointsto_objcont_126_subproof") {
subproof_57(args, ret, err);
}
if (name == "pointsto_objcont_127_negation_subproof") {
subproof_58(args, ret, err);
}
if (name == "pointsto_objcont_127_subproof") {
subproof_59(args, ret, err);
}
if (name == "pointsto_objcont_128_negation_subproof") {
subproof_60(args, ret, err);
}
if (name == "pointsto_objcont_128_subproof") {
subproof_61(args, ret, err);
}
if (name == "pointsto_objcont_129_negation_subproof") {
subproof_62(args, ret, err);
}
if (name == "pointsto_objcont_129_subproof") {
subproof_63(args, ret, err);
}
if (name == "pointsto_objcont_12_negation_subproof") {
subproof_64(args, ret, err);
}
if (name == "pointsto_objcont_12_subproof") {
subproof_65(args, ret, err);
}
if (name == "pointsto_objcont_130_negation_subproof") {
subproof_66(args, ret, err);
}
if (name == "pointsto_objcont_130_subproof") {
subproof_67(args, ret, err);
}
if (name == "pointsto_objcont_131_negation_subproof") {
subproof_68(args, ret, err);
}
if (name == "pointsto_objcont_131_subproof") {
subproof_69(args, ret, err);
}
if (name == "pointsto_objcont_132_negation_subproof") {
subproof_70(args, ret, err);
}
if (name == "pointsto_objcont_132_subproof") {
subproof_71(args, ret, err);
}
if (name == "pointsto_objcont_133_negation_subproof") {
subproof_72(args, ret, err);
}
if (name == "pointsto_objcont_133_subproof") {
subproof_73(args, ret, err);
}
if (name == "pointsto_objcont_134_negation_subproof") {
subproof_74(args, ret, err);
}
if (name == "pointsto_objcont_134_subproof") {
subproof_75(args, ret, err);
}
if (name == "pointsto_objcont_135_negation_subproof") {
subproof_76(args, ret, err);
}
if (name == "pointsto_objcont_135_subproof") {
subproof_77(args, ret, err);
}
if (name == "pointsto_objcont_136_negation_subproof") {
subproof_78(args, ret, err);
}
if (name == "pointsto_objcont_136_subproof") {
subproof_79(args, ret, err);
}
if (name == "pointsto_objcont_137_negation_subproof") {
subproof_80(args, ret, err);
}
if (name == "pointsto_objcont_137_subproof") {
subproof_81(args, ret, err);
}
if (name == "pointsto_objcont_138_negation_subproof") {
subproof_82(args, ret, err);
}
if (name == "pointsto_objcont_138_subproof") {
subproof_83(args, ret, err);
}
if (name == "pointsto_objcont_139_negation_subproof") {
subproof_84(args, ret, err);
}
if (name == "pointsto_objcont_139_subproof") {
subproof_85(args, ret, err);
}
if (name == "pointsto_objcont_13_negation_subproof") {
subproof_86(args, ret, err);
}
if (name == "pointsto_objcont_13_subproof") {
subproof_87(args, ret, err);
}
if (name == "pointsto_objcont_140_negation_subproof") {
subproof_88(args, ret, err);
}
if (name == "pointsto_objcont_140_subproof") {
subproof_89(args, ret, err);
}
if (name == "pointsto_objcont_141_negation_subproof") {
subproof_90(args, ret, err);
}
if (name == "pointsto_objcont_141_subproof") {
subproof_91(args, ret, err);
}
if (name == "pointsto_objcont_142_negation_subproof") {
subproof_92(args, ret, err);
}
if (name == "pointsto_objcont_142_subproof") {
subproof_93(args, ret, err);
}
if (name == "pointsto_objcont_143_negation_subproof") {
subproof_94(args, ret, err);
}
if (name == "pointsto_objcont_143_subproof") {
subproof_95(args, ret, err);
}
if (name == "pointsto_objcont_144_negation_subproof") {
subproof_96(args, ret, err);
}
if (name == "pointsto_objcont_144_subproof") {
subproof_97(args, ret, err);
}
if (name == "pointsto_objcont_145_negation_subproof") {
subproof_98(args, ret, err);
}
if (name == "pointsto_objcont_145_subproof") {
subproof_99(args, ret, err);
}
if (name == "pointsto_objcont_146_negation_subproof") {
subproof_100(args, ret, err);
}
if (name == "pointsto_objcont_146_subproof") {
subproof_101(args, ret, err);
}
if (name == "pointsto_objcont_147_negation_subproof") {
subproof_102(args, ret, err);
}
if (name == "pointsto_objcont_147_subproof") {
subproof_103(args, ret, err);
}
if (name == "pointsto_objcont_148_negation_subproof") {
subproof_104(args, ret, err);
}
if (name == "pointsto_objcont_148_subproof") {
subproof_105(args, ret, err);
}
if (name == "pointsto_objcont_149_negation_subproof") {
subproof_106(args, ret, err);
}
if (name == "pointsto_objcont_149_subproof") {
subproof_107(args, ret, err);
}
if (name == "pointsto_objcont_14_negation_subproof") {
subproof_108(args, ret, err);
}
if (name == "pointsto_objcont_14_subproof") {
subproof_109(args, ret, err);
}
if (name == "pointsto_objcont_150_negation_subproof") {
subproof_110(args, ret, err);
}
if (name == "pointsto_objcont_150_subproof") {
subproof_111(args, ret, err);
}
if (name == "pointsto_objcont_151_negation_subproof") {
subproof_112(args, ret, err);
}
if (name == "pointsto_objcont_151_subproof") {
subproof_113(args, ret, err);
}
if (name == "pointsto_objcont_152_negation_subproof") {
subproof_114(args, ret, err);
}
if (name == "pointsto_objcont_152_subproof") {
subproof_115(args, ret, err);
}
if (name == "pointsto_objcont_153_negation_subproof") {
subproof_116(args, ret, err);
}
if (name == "pointsto_objcont_153_subproof") {
subproof_117(args, ret, err);
}
if (name == "pointsto_objcont_154_negation_subproof") {
subproof_118(args, ret, err);
}
if (name == "pointsto_objcont_154_subproof") {
subproof_119(args, ret, err);
}
if (name == "pointsto_objcont_155_negation_subproof") {
subproof_120(args, ret, err);
}
if (name == "pointsto_objcont_155_subproof") {
subproof_121(args, ret, err);
}
if (name == "pointsto_objcont_156_negation_subproof") {
subproof_122(args, ret, err);
}
if (name == "pointsto_objcont_156_subproof") {
subproof_123(args, ret, err);
}
if (name == "pointsto_objcont_157_negation_subproof") {
subproof_124(args, ret, err);
}
if (name == "pointsto_objcont_157_subproof") {
subproof_125(args, ret, err);
}
if (name == "pointsto_objcont_158_negation_subproof") {
subproof_126(args, ret, err);
}
if (name == "pointsto_objcont_158_subproof") {
subproof_127(args, ret, err);
}
if (name == "pointsto_objcont_159_negation_subproof") {
subproof_128(args, ret, err);
}
if (name == "pointsto_objcont_159_subproof") {
subproof_129(args, ret, err);
}
if (name == "pointsto_objcont_15_negation_subproof") {
subproof_130(args, ret, err);
}
if (name == "pointsto_objcont_15_subproof") {
subproof_131(args, ret, err);
}
if (name == "pointsto_objcont_160_negation_subproof") {
subproof_132(args, ret, err);
}
if (name == "pointsto_objcont_160_subproof") {
subproof_133(args, ret, err);
}
if (name == "pointsto_objcont_161_negation_subproof") {
subproof_134(args, ret, err);
}
if (name == "pointsto_objcont_161_subproof") {
subproof_135(args, ret, err);
}
if (name == "pointsto_objcont_162_negation_subproof") {
subproof_136(args, ret, err);
}
if (name == "pointsto_objcont_162_subproof") {
subproof_137(args, ret, err);
}
if (name == "pointsto_objcont_163_negation_subproof") {
subproof_138(args, ret, err);
}
if (name == "pointsto_objcont_163_subproof") {
subproof_139(args, ret, err);
}
if (name == "pointsto_objcont_164_negation_subproof") {
subproof_140(args, ret, err);
}
if (name == "pointsto_objcont_164_subproof") {
subproof_141(args, ret, err);
}
if (name == "pointsto_objcont_165_negation_subproof") {
subproof_142(args, ret, err);
}
if (name == "pointsto_objcont_165_subproof") {
subproof_143(args, ret, err);
}
if (name == "pointsto_objcont_166_negation_subproof") {
subproof_144(args, ret, err);
}
if (name == "pointsto_objcont_166_subproof") {
subproof_145(args, ret, err);
}
if (name == "pointsto_objcont_167_negation_subproof") {
subproof_146(args, ret, err);
}
if (name == "pointsto_objcont_167_subproof") {
subproof_147(args, ret, err);
}
if (name == "pointsto_objcont_168_negation_subproof") {
subproof_148(args, ret, err);
}
if (name == "pointsto_objcont_168_subproof") {
subproof_149(args, ret, err);
}
if (name == "pointsto_objcont_169_negation_subproof") {
subproof_150(args, ret, err);
}
if (name == "pointsto_objcont_169_subproof") {
subproof_151(args, ret, err);
}
if (name == "pointsto_objcont_16_negation_subproof") {
subproof_152(args, ret, err);
}
if (name == "pointsto_objcont_16_subproof") {
subproof_153(args, ret, err);
}
if (name == "pointsto_objcont_170_negation_subproof") {
subproof_154(args, ret, err);
}
if (name == "pointsto_objcont_170_subproof") {
subproof_155(args, ret, err);
}
if (name == "pointsto_objcont_171_negation_subproof") {
subproof_156(args, ret, err);
}
if (name == "pointsto_objcont_171_subproof") {
subproof_157(args, ret, err);
}
if (name == "pointsto_objcont_172_negation_subproof") {
subproof_158(args, ret, err);
}
if (name == "pointsto_objcont_172_subproof") {
subproof_159(args, ret, err);
}
if (name == "pointsto_objcont_173_negation_subproof") {
subproof_160(args, ret, err);
}
if (name == "pointsto_objcont_173_subproof") {
subproof_161(args, ret, err);
}
if (name == "pointsto_objcont_174_negation_subproof") {
subproof_162(args, ret, err);
}
if (name == "pointsto_objcont_174_subproof") {
subproof_163(args, ret, err);
}
if (name == "pointsto_objcont_175_negation_subproof") {
subproof_164(args, ret, err);
}
if (name == "pointsto_objcont_175_subproof") {
subproof_165(args, ret, err);
}
if (name == "pointsto_objcont_176_negation_subproof") {
subproof_166(args, ret, err);
}
if (name == "pointsto_objcont_176_subproof") {
subproof_167(args, ret, err);
}
if (name == "pointsto_objcont_177_negation_subproof") {
subproof_168(args, ret, err);
}
if (name == "pointsto_objcont_177_subproof") {
subproof_169(args, ret, err);
}
if (name == "pointsto_objcont_178_negation_subproof") {
subproof_170(args, ret, err);
}
if (name == "pointsto_objcont_178_subproof") {
subproof_171(args, ret, err);
}
if (name == "pointsto_objcont_179_negation_subproof") {
subproof_172(args, ret, err);
}
if (name == "pointsto_objcont_179_subproof") {
subproof_173(args, ret, err);
}
if (name == "pointsto_objcont_17_negation_subproof") {
subproof_174(args, ret, err);
}
if (name == "pointsto_objcont_17_subproof") {
subproof_175(args, ret, err);
}
if (name == "pointsto_objcont_180_negation_subproof") {
subproof_176(args, ret, err);
}
if (name == "pointsto_objcont_180_subproof") {
subproof_177(args, ret, err);
}
if (name == "pointsto_objcont_181_negation_subproof") {
subproof_178(args, ret, err);
}
if (name == "pointsto_objcont_181_subproof") {
subproof_179(args, ret, err);
}
if (name == "pointsto_objcont_182_negation_subproof") {
subproof_180(args, ret, err);
}
if (name == "pointsto_objcont_182_subproof") {
subproof_181(args, ret, err);
}
if (name == "pointsto_objcont_183_negation_subproof") {
subproof_182(args, ret, err);
}
if (name == "pointsto_objcont_183_subproof") {
subproof_183(args, ret, err);
}
if (name == "pointsto_objcont_184_negation_subproof") {
subproof_184(args, ret, err);
}
if (name == "pointsto_objcont_184_subproof") {
subproof_185(args, ret, err);
}
if (name == "pointsto_objcont_185_negation_subproof") {
subproof_186(args, ret, err);
}
if (name == "pointsto_objcont_185_subproof") {
subproof_187(args, ret, err);
}
if (name == "pointsto_objcont_186_negation_subproof") {
subproof_188(args, ret, err);
}
if (name == "pointsto_objcont_186_subproof") {
subproof_189(args, ret, err);
}
if (name == "pointsto_objcont_187_negation_subproof") {
subproof_190(args, ret, err);
}
if (name == "pointsto_objcont_187_subproof") {
subproof_191(args, ret, err);
}
if (name == "pointsto_objcont_188_negation_subproof") {
subproof_192(args, ret, err);
}
if (name == "pointsto_objcont_188_subproof") {
subproof_193(args, ret, err);
}
if (name == "pointsto_objcont_189_negation_subproof") {
subproof_194(args, ret, err);
}
if (name == "pointsto_objcont_189_subproof") {
subproof_195(args, ret, err);
}
if (name == "pointsto_objcont_18_negation_subproof") {
subproof_196(args, ret, err);
}
if (name == "pointsto_objcont_18_subproof") {
subproof_197(args, ret, err);
}
if (name == "pointsto_objcont_190_negation_subproof") {
subproof_198(args, ret, err);
}
if (name == "pointsto_objcont_190_subproof") {
subproof_199(args, ret, err);
}
if (name == "pointsto_objcont_191_negation_subproof") {
subproof_200(args, ret, err);
}
if (name == "pointsto_objcont_191_subproof") {
subproof_201(args, ret, err);
}
if (name == "pointsto_objcont_192_negation_subproof") {
subproof_202(args, ret, err);
}
if (name == "pointsto_objcont_192_subproof") {
subproof_203(args, ret, err);
}
if (name == "pointsto_objcont_193_negation_subproof") {
subproof_204(args, ret, err);
}
if (name == "pointsto_objcont_193_subproof") {
subproof_205(args, ret, err);
}
if (name == "pointsto_objcont_194_negation_subproof") {
subproof_206(args, ret, err);
}
if (name == "pointsto_objcont_194_subproof") {
subproof_207(args, ret, err);
}
if (name == "pointsto_objcont_195_negation_subproof") {
subproof_208(args, ret, err);
}
if (name == "pointsto_objcont_195_subproof") {
subproof_209(args, ret, err);
}
if (name == "pointsto_objcont_196_negation_subproof") {
subproof_210(args, ret, err);
}
if (name == "pointsto_objcont_196_subproof") {
subproof_211(args, ret, err);
}
if (name == "pointsto_objcont_197_negation_subproof") {
subproof_212(args, ret, err);
}
if (name == "pointsto_objcont_197_subproof") {
subproof_213(args, ret, err);
}
if (name == "pointsto_objcont_198_negation_subproof") {
subproof_214(args, ret, err);
}
if (name == "pointsto_objcont_198_subproof") {
subproof_215(args, ret, err);
}
if (name == "pointsto_objcont_199_negation_subproof") {
subproof_216(args, ret, err);
}
if (name == "pointsto_objcont_199_subproof") {
subproof_217(args, ret, err);
}
if (name == "pointsto_objcont_19_negation_subproof") {
subproof_218(args, ret, err);
}
if (name == "pointsto_objcont_19_subproof") {
subproof_219(args, ret, err);
}
if (name == "pointsto_objcont_1_negation_subproof") {
subproof_220(args, ret, err);
}
if (name == "pointsto_objcont_1_subproof") {
subproof_221(args, ret, err);
}
if (name == "pointsto_objcont_200_negation_subproof") {
subproof_222(args, ret, err);
}
if (name == "pointsto_objcont_200_subproof") {
subproof_223(args, ret, err);
}
if (name == "pointsto_objcont_201_negation_subproof") {
subproof_224(args, ret, err);
}
if (name == "pointsto_objcont_201_subproof") {
subproof_225(args, ret, err);
}
if (name == "pointsto_objcont_202_negation_subproof") {
subproof_226(args, ret, err);
}
if (name == "pointsto_objcont_202_subproof") {
subproof_227(args, ret, err);
}
if (name == "pointsto_objcont_203_negation_subproof") {
subproof_228(args, ret, err);
}
if (name == "pointsto_objcont_203_subproof") {
subproof_229(args, ret, err);
}
if (name == "pointsto_objcont_204_negation_subproof") {
subproof_230(args, ret, err);
}
if (name == "pointsto_objcont_204_subproof") {
subproof_231(args, ret, err);
}
if (name == "pointsto_objcont_205_negation_subproof") {
subproof_232(args, ret, err);
}
if (name == "pointsto_objcont_205_subproof") {
subproof_233(args, ret, err);
}
if (name == "pointsto_objcont_206_negation_subproof") {
subproof_234(args, ret, err);
}
if (name == "pointsto_objcont_206_subproof") {
subproof_235(args, ret, err);
}
if (name == "pointsto_objcont_207_negation_subproof") {
subproof_236(args, ret, err);
}
if (name == "pointsto_objcont_207_subproof") {
subproof_237(args, ret, err);
}
if (name == "pointsto_objcont_208_negation_subproof") {
subproof_238(args, ret, err);
}
if (name == "pointsto_objcont_208_subproof") {
subproof_239(args, ret, err);
}
if (name == "pointsto_objcont_209_negation_subproof") {
subproof_240(args, ret, err);
}
if (name == "pointsto_objcont_209_subproof") {
subproof_241(args, ret, err);
}
if (name == "pointsto_objcont_20_negation_subproof") {
subproof_242(args, ret, err);
}
if (name == "pointsto_objcont_20_subproof") {
subproof_243(args, ret, err);
}
if (name == "pointsto_objcont_210_negation_subproof") {
subproof_244(args, ret, err);
}
if (name == "pointsto_objcont_210_subproof") {
subproof_245(args, ret, err);
}
if (name == "pointsto_objcont_211_negation_subproof") {
subproof_246(args, ret, err);
}
if (name == "pointsto_objcont_211_subproof") {
subproof_247(args, ret, err);
}
if (name == "pointsto_objcont_212_negation_subproof") {
subproof_248(args, ret, err);
}
if (name == "pointsto_objcont_212_subproof") {
subproof_249(args, ret, err);
}
if (name == "pointsto_objcont_213_negation_subproof") {
subproof_250(args, ret, err);
}
if (name == "pointsto_objcont_213_subproof") {
subproof_251(args, ret, err);
}
if (name == "pointsto_objcont_214_negation_subproof") {
subproof_252(args, ret, err);
}
if (name == "pointsto_objcont_214_subproof") {
subproof_253(args, ret, err);
}
if (name == "pointsto_objcont_215_negation_subproof") {
subproof_254(args, ret, err);
}
if (name == "pointsto_objcont_215_subproof") {
subproof_255(args, ret, err);
}
if (name == "pointsto_objcont_216_negation_subproof") {
subproof_256(args, ret, err);
}
if (name == "pointsto_objcont_216_subproof") {
subproof_257(args, ret, err);
}
if (name == "pointsto_objcont_217_negation_subproof") {
subproof_258(args, ret, err);
}
if (name == "pointsto_objcont_217_subproof") {
subproof_259(args, ret, err);
}
if (name == "pointsto_objcont_218_negation_subproof") {
subproof_260(args, ret, err);
}
if (name == "pointsto_objcont_218_subproof") {
subproof_261(args, ret, err);
}
if (name == "pointsto_objcont_219_negation_subproof") {
subproof_262(args, ret, err);
}
if (name == "pointsto_objcont_219_subproof") {
subproof_263(args, ret, err);
}
if (name == "pointsto_objcont_21_negation_subproof") {
subproof_264(args, ret, err);
}
if (name == "pointsto_objcont_21_subproof") {
subproof_265(args, ret, err);
}
if (name == "pointsto_objcont_220_negation_subproof") {
subproof_266(args, ret, err);
}
if (name == "pointsto_objcont_220_subproof") {
subproof_267(args, ret, err);
}
if (name == "pointsto_objcont_221_negation_subproof") {
subproof_268(args, ret, err);
}
if (name == "pointsto_objcont_221_subproof") {
subproof_269(args, ret, err);
}
if (name == "pointsto_objcont_222_negation_subproof") {
subproof_270(args, ret, err);
}
if (name == "pointsto_objcont_222_subproof") {
subproof_271(args, ret, err);
}
if (name == "pointsto_objcont_223_negation_subproof") {
subproof_272(args, ret, err);
}
if (name == "pointsto_objcont_223_subproof") {
subproof_273(args, ret, err);
}
if (name == "pointsto_objcont_224_negation_subproof") {
subproof_274(args, ret, err);
}
if (name == "pointsto_objcont_224_subproof") {
subproof_275(args, ret, err);
}
if (name == "pointsto_objcont_225_negation_subproof") {
subproof_276(args, ret, err);
}
if (name == "pointsto_objcont_225_subproof") {
subproof_277(args, ret, err);
}
if (name == "pointsto_objcont_226_negation_subproof") {
subproof_278(args, ret, err);
}
if (name == "pointsto_objcont_226_subproof") {
subproof_279(args, ret, err);
}
if (name == "pointsto_objcont_227_negation_subproof") {
subproof_280(args, ret, err);
}
if (name == "pointsto_objcont_227_subproof") {
subproof_281(args, ret, err);
}
if (name == "pointsto_objcont_228_negation_subproof") {
subproof_282(args, ret, err);
}
if (name == "pointsto_objcont_228_subproof") {
subproof_283(args, ret, err);
}
if (name == "pointsto_objcont_229_negation_subproof") {
subproof_284(args, ret, err);
}
if (name == "pointsto_objcont_229_subproof") {
subproof_285(args, ret, err);
}
if (name == "pointsto_objcont_22_negation_subproof") {
subproof_286(args, ret, err);
}
if (name == "pointsto_objcont_22_subproof") {
subproof_287(args, ret, err);
}
if (name == "pointsto_objcont_230_negation_subproof") {
subproof_288(args, ret, err);
}
if (name == "pointsto_objcont_230_subproof") {
subproof_289(args, ret, err);
}
if (name == "pointsto_objcont_231_negation_subproof") {
subproof_290(args, ret, err);
}
if (name == "pointsto_objcont_231_subproof") {
subproof_291(args, ret, err);
}
if (name == "pointsto_objcont_232_negation_subproof") {
subproof_292(args, ret, err);
}
if (name == "pointsto_objcont_232_subproof") {
subproof_293(args, ret, err);
}
if (name == "pointsto_objcont_233_negation_subproof") {
subproof_294(args, ret, err);
}
if (name == "pointsto_objcont_233_subproof") {
subproof_295(args, ret, err);
}
if (name == "pointsto_objcont_234_negation_subproof") {
subproof_296(args, ret, err);
}
if (name == "pointsto_objcont_234_subproof") {
subproof_297(args, ret, err);
}
if (name == "pointsto_objcont_235_negation_subproof") {
subproof_298(args, ret, err);
}
if (name == "pointsto_objcont_235_subproof") {
subproof_299(args, ret, err);
}
if (name == "pointsto_objcont_236_negation_subproof") {
subproof_300(args, ret, err);
}
if (name == "pointsto_objcont_236_subproof") {
subproof_301(args, ret, err);
}
if (name == "pointsto_objcont_237_negation_subproof") {
subproof_302(args, ret, err);
}
if (name == "pointsto_objcont_237_subproof") {
subproof_303(args, ret, err);
}
if (name == "pointsto_objcont_238_negation_subproof") {
subproof_304(args, ret, err);
}
if (name == "pointsto_objcont_238_subproof") {
subproof_305(args, ret, err);
}
if (name == "pointsto_objcont_239_negation_subproof") {
subproof_306(args, ret, err);
}
if (name == "pointsto_objcont_239_subproof") {
subproof_307(args, ret, err);
}
if (name == "pointsto_objcont_23_negation_subproof") {
subproof_308(args, ret, err);
}
if (name == "pointsto_objcont_23_subproof") {
subproof_309(args, ret, err);
}
if (name == "pointsto_objcont_240_negation_subproof") {
subproof_310(args, ret, err);
}
if (name == "pointsto_objcont_240_subproof") {
subproof_311(args, ret, err);
}
if (name == "pointsto_objcont_241_negation_subproof") {
subproof_312(args, ret, err);
}
if (name == "pointsto_objcont_241_subproof") {
subproof_313(args, ret, err);
}
if (name == "pointsto_objcont_242_negation_subproof") {
subproof_314(args, ret, err);
}
if (name == "pointsto_objcont_242_subproof") {
subproof_315(args, ret, err);
}
if (name == "pointsto_objcont_243_negation_subproof") {
subproof_316(args, ret, err);
}
if (name == "pointsto_objcont_243_subproof") {
subproof_317(args, ret, err);
}
if (name == "pointsto_objcont_244_negation_subproof") {
subproof_318(args, ret, err);
}
if (name == "pointsto_objcont_244_subproof") {
subproof_319(args, ret, err);
}
if (name == "pointsto_objcont_245_negation_subproof") {
subproof_320(args, ret, err);
}
if (name == "pointsto_objcont_245_subproof") {
subproof_321(args, ret, err);
}
if (name == "pointsto_objcont_246_negation_subproof") {
subproof_322(args, ret, err);
}
if (name == "pointsto_objcont_246_subproof") {
subproof_323(args, ret, err);
}
if (name == "pointsto_objcont_247_negation_subproof") {
subproof_324(args, ret, err);
}
if (name == "pointsto_objcont_247_subproof") {
subproof_325(args, ret, err);
}
if (name == "pointsto_objcont_248_negation_subproof") {
subproof_326(args, ret, err);
}
if (name == "pointsto_objcont_248_subproof") {
subproof_327(args, ret, err);
}
if (name == "pointsto_objcont_249_negation_subproof") {
subproof_328(args, ret, err);
}
if (name == "pointsto_objcont_249_subproof") {
subproof_329(args, ret, err);
}
if (name == "pointsto_objcont_24_negation_subproof") {
subproof_330(args, ret, err);
}
if (name == "pointsto_objcont_24_subproof") {
subproof_331(args, ret, err);
}
if (name == "pointsto_objcont_250_negation_subproof") {
subproof_332(args, ret, err);
}
if (name == "pointsto_objcont_250_subproof") {
subproof_333(args, ret, err);
}
if (name == "pointsto_objcont_251_negation_subproof") {
subproof_334(args, ret, err);
}
if (name == "pointsto_objcont_251_subproof") {
subproof_335(args, ret, err);
}
if (name == "pointsto_objcont_252_negation_subproof") {
subproof_336(args, ret, err);
}
if (name == "pointsto_objcont_252_subproof") {
subproof_337(args, ret, err);
}
if (name == "pointsto_objcont_253_negation_subproof") {
subproof_338(args, ret, err);
}
if (name == "pointsto_objcont_253_subproof") {
subproof_339(args, ret, err);
}
if (name == "pointsto_objcont_254_negation_subproof") {
subproof_340(args, ret, err);
}
if (name == "pointsto_objcont_254_subproof") {
subproof_341(args, ret, err);
}
if (name == "pointsto_objcont_255_negation_subproof") {
subproof_342(args, ret, err);
}
if (name == "pointsto_objcont_255_subproof") {
subproof_343(args, ret, err);
}
if (name == "pointsto_objcont_256_negation_subproof") {
subproof_344(args, ret, err);
}
if (name == "pointsto_objcont_256_subproof") {
subproof_345(args, ret, err);
}
if (name == "pointsto_objcont_257_negation_subproof") {
subproof_346(args, ret, err);
}
if (name == "pointsto_objcont_257_subproof") {
subproof_347(args, ret, err);
}
if (name == "pointsto_objcont_258_negation_subproof") {
subproof_348(args, ret, err);
}
if (name == "pointsto_objcont_258_subproof") {
subproof_349(args, ret, err);
}
if (name == "pointsto_objcont_259_negation_subproof") {
subproof_350(args, ret, err);
}
if (name == "pointsto_objcont_259_subproof") {
subproof_351(args, ret, err);
}
if (name == "pointsto_objcont_25_negation_subproof") {
subproof_352(args, ret, err);
}
if (name == "pointsto_objcont_25_subproof") {
subproof_353(args, ret, err);
}
if (name == "pointsto_objcont_260_negation_subproof") {
subproof_354(args, ret, err);
}
if (name == "pointsto_objcont_260_subproof") {
subproof_355(args, ret, err);
}
if (name == "pointsto_objcont_261_negation_subproof") {
subproof_356(args, ret, err);
}
if (name == "pointsto_objcont_261_subproof") {
subproof_357(args, ret, err);
}
if (name == "pointsto_objcont_262_negation_subproof") {
subproof_358(args, ret, err);
}
if (name == "pointsto_objcont_262_subproof") {
subproof_359(args, ret, err);
}
if (name == "pointsto_objcont_263_negation_subproof") {
subproof_360(args, ret, err);
}
if (name == "pointsto_objcont_263_subproof") {
subproof_361(args, ret, err);
}
if (name == "pointsto_objcont_264_negation_subproof") {
subproof_362(args, ret, err);
}
if (name == "pointsto_objcont_264_subproof") {
subproof_363(args, ret, err);
}
if (name == "pointsto_objcont_265_negation_subproof") {
subproof_364(args, ret, err);
}
if (name == "pointsto_objcont_265_subproof") {
subproof_365(args, ret, err);
}
if (name == "pointsto_objcont_266_negation_subproof") {
subproof_366(args, ret, err);
}
if (name == "pointsto_objcont_266_subproof") {
subproof_367(args, ret, err);
}
if (name == "pointsto_objcont_267_negation_subproof") {
subproof_368(args, ret, err);
}
if (name == "pointsto_objcont_267_subproof") {
subproof_369(args, ret, err);
}
if (name == "pointsto_objcont_268_negation_subproof") {
subproof_370(args, ret, err);
}
if (name == "pointsto_objcont_268_subproof") {
subproof_371(args, ret, err);
}
if (name == "pointsto_objcont_269_negation_subproof") {
subproof_372(args, ret, err);
}
if (name == "pointsto_objcont_269_subproof") {
subproof_373(args, ret, err);
}
if (name == "pointsto_objcont_26_negation_subproof") {
subproof_374(args, ret, err);
}
if (name == "pointsto_objcont_26_subproof") {
subproof_375(args, ret, err);
}
if (name == "pointsto_objcont_270_negation_subproof") {
subproof_376(args, ret, err);
}
if (name == "pointsto_objcont_270_subproof") {
subproof_377(args, ret, err);
}
if (name == "pointsto_objcont_271_negation_subproof") {
subproof_378(args, ret, err);
}
if (name == "pointsto_objcont_271_subproof") {
subproof_379(args, ret, err);
}
if (name == "pointsto_objcont_272_negation_subproof") {
subproof_380(args, ret, err);
}
if (name == "pointsto_objcont_272_subproof") {
subproof_381(args, ret, err);
}
if (name == "pointsto_objcont_273_negation_subproof") {
subproof_382(args, ret, err);
}
if (name == "pointsto_objcont_273_subproof") {
subproof_383(args, ret, err);
}
if (name == "pointsto_objcont_274_negation_subproof") {
subproof_384(args, ret, err);
}
if (name == "pointsto_objcont_274_subproof") {
subproof_385(args, ret, err);
}
if (name == "pointsto_objcont_275_negation_subproof") {
subproof_386(args, ret, err);
}
if (name == "pointsto_objcont_275_subproof") {
subproof_387(args, ret, err);
}
if (name == "pointsto_objcont_276_negation_subproof") {
subproof_388(args, ret, err);
}
if (name == "pointsto_objcont_276_subproof") {
subproof_389(args, ret, err);
}
if (name == "pointsto_objcont_277_negation_subproof") {
subproof_390(args, ret, err);
}
if (name == "pointsto_objcont_277_subproof") {
subproof_391(args, ret, err);
}
if (name == "pointsto_objcont_278_negation_subproof") {
subproof_392(args, ret, err);
}
if (name == "pointsto_objcont_278_subproof") {
subproof_393(args, ret, err);
}
if (name == "pointsto_objcont_279_negation_subproof") {
subproof_394(args, ret, err);
}
if (name == "pointsto_objcont_279_subproof") {
subproof_395(args, ret, err);
}
if (name == "pointsto_objcont_27_negation_subproof") {
subproof_396(args, ret, err);
}
if (name == "pointsto_objcont_27_subproof") {
subproof_397(args, ret, err);
}
if (name == "pointsto_objcont_280_negation_subproof") {
subproof_398(args, ret, err);
}
if (name == "pointsto_objcont_280_subproof") {
subproof_399(args, ret, err);
}
if (name == "pointsto_objcont_281_negation_subproof") {
subproof_400(args, ret, err);
}
if (name == "pointsto_objcont_281_subproof") {
subproof_401(args, ret, err);
}
if (name == "pointsto_objcont_282_negation_subproof") {
subproof_402(args, ret, err);
}
if (name == "pointsto_objcont_282_subproof") {
subproof_403(args, ret, err);
}
if (name == "pointsto_objcont_283_negation_subproof") {
subproof_404(args, ret, err);
}
if (name == "pointsto_objcont_283_subproof") {
subproof_405(args, ret, err);
}
if (name == "pointsto_objcont_284_negation_subproof") {
subproof_406(args, ret, err);
}
if (name == "pointsto_objcont_284_subproof") {
subproof_407(args, ret, err);
}
if (name == "pointsto_objcont_285_negation_subproof") {
subproof_408(args, ret, err);
}
if (name == "pointsto_objcont_285_subproof") {
subproof_409(args, ret, err);
}
if (name == "pointsto_objcont_286_negation_subproof") {
subproof_410(args, ret, err);
}
if (name == "pointsto_objcont_286_subproof") {
subproof_411(args, ret, err);
}
if (name == "pointsto_objcont_287_negation_subproof") {
subproof_412(args, ret, err);
}
if (name == "pointsto_objcont_287_subproof") {
subproof_413(args, ret, err);
}
if (name == "pointsto_objcont_288_negation_subproof") {
subproof_414(args, ret, err);
}
if (name == "pointsto_objcont_288_subproof") {
subproof_415(args, ret, err);
}
if (name == "pointsto_objcont_289_negation_subproof") {
subproof_416(args, ret, err);
}
if (name == "pointsto_objcont_289_subproof") {
subproof_417(args, ret, err);
}
if (name == "pointsto_objcont_28_negation_subproof") {
subproof_418(args, ret, err);
}
if (name == "pointsto_objcont_28_subproof") {
subproof_419(args, ret, err);
}
if (name == "pointsto_objcont_290_negation_subproof") {
subproof_420(args, ret, err);
}
if (name == "pointsto_objcont_290_subproof") {
subproof_421(args, ret, err);
}
if (name == "pointsto_objcont_291_negation_subproof") {
subproof_422(args, ret, err);
}
if (name == "pointsto_objcont_291_subproof") {
subproof_423(args, ret, err);
}
if (name == "pointsto_objcont_292_negation_subproof") {
subproof_424(args, ret, err);
}
if (name == "pointsto_objcont_292_subproof") {
subproof_425(args, ret, err);
}
if (name == "pointsto_objcont_293_negation_subproof") {
subproof_426(args, ret, err);
}
if (name == "pointsto_objcont_293_subproof") {
subproof_427(args, ret, err);
}
if (name == "pointsto_objcont_294_negation_subproof") {
subproof_428(args, ret, err);
}
if (name == "pointsto_objcont_294_subproof") {
subproof_429(args, ret, err);
}
if (name == "pointsto_objcont_295_negation_subproof") {
subproof_430(args, ret, err);
}
if (name == "pointsto_objcont_295_subproof") {
subproof_431(args, ret, err);
}
if (name == "pointsto_objcont_296_negation_subproof") {
subproof_432(args, ret, err);
}
if (name == "pointsto_objcont_296_subproof") {
subproof_433(args, ret, err);
}
if (name == "pointsto_objcont_297_negation_subproof") {
subproof_434(args, ret, err);
}
if (name == "pointsto_objcont_297_subproof") {
subproof_435(args, ret, err);
}
if (name == "pointsto_objcont_298_negation_subproof") {
subproof_436(args, ret, err);
}
if (name == "pointsto_objcont_298_subproof") {
subproof_437(args, ret, err);
}
if (name == "pointsto_objcont_299_negation_subproof") {
subproof_438(args, ret, err);
}
if (name == "pointsto_objcont_299_subproof") {
subproof_439(args, ret, err);
}
if (name == "pointsto_objcont_29_negation_subproof") {
subproof_440(args, ret, err);
}
if (name == "pointsto_objcont_29_subproof") {
subproof_441(args, ret, err);
}
if (name == "pointsto_objcont_2_negation_subproof") {
subproof_442(args, ret, err);
}
if (name == "pointsto_objcont_2_subproof") {
subproof_443(args, ret, err);
}
if (name == "pointsto_objcont_300_negation_subproof") {
subproof_444(args, ret, err);
}
if (name == "pointsto_objcont_300_subproof") {
subproof_445(args, ret, err);
}
if (name == "pointsto_objcont_301_negation_subproof") {
subproof_446(args, ret, err);
}
if (name == "pointsto_objcont_301_subproof") {
subproof_447(args, ret, err);
}
if (name == "pointsto_objcont_302_negation_subproof") {
subproof_448(args, ret, err);
}
if (name == "pointsto_objcont_302_subproof") {
subproof_449(args, ret, err);
}
if (name == "pointsto_objcont_303_negation_subproof") {
subproof_450(args, ret, err);
}
if (name == "pointsto_objcont_303_subproof") {
subproof_451(args, ret, err);
}
if (name == "pointsto_objcont_304_negation_subproof") {
subproof_452(args, ret, err);
}
if (name == "pointsto_objcont_304_subproof") {
subproof_453(args, ret, err);
}
if (name == "pointsto_objcont_305_negation_subproof") {
subproof_454(args, ret, err);
}
if (name == "pointsto_objcont_305_subproof") {
subproof_455(args, ret, err);
}
if (name == "pointsto_objcont_306_negation_subproof") {
subproof_456(args, ret, err);
}
if (name == "pointsto_objcont_306_subproof") {
subproof_457(args, ret, err);
}
if (name == "pointsto_objcont_307_negation_subproof") {
subproof_458(args, ret, err);
}
if (name == "pointsto_objcont_307_subproof") {
subproof_459(args, ret, err);
}
if (name == "pointsto_objcont_308_negation_subproof") {
subproof_460(args, ret, err);
}
if (name == "pointsto_objcont_308_subproof") {
subproof_461(args, ret, err);
}
if (name == "pointsto_objcont_309_negation_subproof") {
subproof_462(args, ret, err);
}
if (name == "pointsto_objcont_309_subproof") {
subproof_463(args, ret, err);
}
if (name == "pointsto_objcont_30_negation_subproof") {
subproof_464(args, ret, err);
}
if (name == "pointsto_objcont_30_subproof") {
subproof_465(args, ret, err);
}
if (name == "pointsto_objcont_310_negation_subproof") {
subproof_466(args, ret, err);
}
if (name == "pointsto_objcont_310_subproof") {
subproof_467(args, ret, err);
}
if (name == "pointsto_objcont_311_negation_subproof") {
subproof_468(args, ret, err);
}
if (name == "pointsto_objcont_311_subproof") {
subproof_469(args, ret, err);
}
if (name == "pointsto_objcont_312_negation_subproof") {
subproof_470(args, ret, err);
}
if (name == "pointsto_objcont_312_subproof") {
subproof_471(args, ret, err);
}
if (name == "pointsto_objcont_313_negation_subproof") {
subproof_472(args, ret, err);
}
if (name == "pointsto_objcont_313_subproof") {
subproof_473(args, ret, err);
}
if (name == "pointsto_objcont_314_negation_subproof") {
subproof_474(args, ret, err);
}
if (name == "pointsto_objcont_314_subproof") {
subproof_475(args, ret, err);
}
if (name == "pointsto_objcont_315_negation_subproof") {
subproof_476(args, ret, err);
}
if (name == "pointsto_objcont_315_subproof") {
subproof_477(args, ret, err);
}
if (name == "pointsto_objcont_316_negation_subproof") {
subproof_478(args, ret, err);
}
if (name == "pointsto_objcont_316_subproof") {
subproof_479(args, ret, err);
}
if (name == "pointsto_objcont_317_negation_subproof") {
subproof_480(args, ret, err);
}
if (name == "pointsto_objcont_317_subproof") {
subproof_481(args, ret, err);
}
if (name == "pointsto_objcont_318_negation_subproof") {
subproof_482(args, ret, err);
}
if (name == "pointsto_objcont_318_subproof") {
subproof_483(args, ret, err);
}
if (name == "pointsto_objcont_319_negation_subproof") {
subproof_484(args, ret, err);
}
if (name == "pointsto_objcont_319_subproof") {
subproof_485(args, ret, err);
}
if (name == "pointsto_objcont_31_negation_subproof") {
subproof_486(args, ret, err);
}
if (name == "pointsto_objcont_31_subproof") {
subproof_487(args, ret, err);
}
if (name == "pointsto_objcont_320_negation_subproof") {
subproof_488(args, ret, err);
}
if (name == "pointsto_objcont_320_subproof") {
subproof_489(args, ret, err);
}
if (name == "pointsto_objcont_321_negation_subproof") {
subproof_490(args, ret, err);
}
if (name == "pointsto_objcont_321_subproof") {
subproof_491(args, ret, err);
}
if (name == "pointsto_objcont_322_negation_subproof") {
subproof_492(args, ret, err);
}
if (name == "pointsto_objcont_322_subproof") {
subproof_493(args, ret, err);
}
if (name == "pointsto_objcont_323_negation_subproof") {
subproof_494(args, ret, err);
}
if (name == "pointsto_objcont_323_subproof") {
subproof_495(args, ret, err);
}
if (name == "pointsto_objcont_324_negation_subproof") {
subproof_496(args, ret, err);
}
if (name == "pointsto_objcont_324_subproof") {
subproof_497(args, ret, err);
}
if (name == "pointsto_objcont_325_negation_subproof") {
subproof_498(args, ret, err);
}
if (name == "pointsto_objcont_325_subproof") {
subproof_499(args, ret, err);
}
if (name == "pointsto_objcont_326_negation_subproof") {
subproof_500(args, ret, err);
}
if (name == "pointsto_objcont_326_subproof") {
subproof_501(args, ret, err);
}
if (name == "pointsto_objcont_327_negation_subproof") {
subproof_502(args, ret, err);
}
if (name == "pointsto_objcont_327_subproof") {
subproof_503(args, ret, err);
}
if (name == "pointsto_objcont_328_negation_subproof") {
subproof_504(args, ret, err);
}
if (name == "pointsto_objcont_328_subproof") {
subproof_505(args, ret, err);
}
if (name == "pointsto_objcont_329_negation_subproof") {
subproof_506(args, ret, err);
}
if (name == "pointsto_objcont_329_subproof") {
subproof_507(args, ret, err);
}
if (name == "pointsto_objcont_32_negation_subproof") {
subproof_508(args, ret, err);
}
if (name == "pointsto_objcont_32_subproof") {
subproof_509(args, ret, err);
}
if (name == "pointsto_objcont_330_negation_subproof") {
subproof_510(args, ret, err);
}
if (name == "pointsto_objcont_330_subproof") {
subproof_511(args, ret, err);
}
if (name == "pointsto_objcont_331_negation_subproof") {
subproof_512(args, ret, err);
}
if (name == "pointsto_objcont_331_subproof") {
subproof_513(args, ret, err);
}
if (name == "pointsto_objcont_332_negation_subproof") {
subproof_514(args, ret, err);
}
if (name == "pointsto_objcont_332_subproof") {
subproof_515(args, ret, err);
}
if (name == "pointsto_objcont_333_negation_subproof") {
subproof_516(args, ret, err);
}
if (name == "pointsto_objcont_333_subproof") {
subproof_517(args, ret, err);
}
if (name == "pointsto_objcont_334_negation_subproof") {
subproof_518(args, ret, err);
}
if (name == "pointsto_objcont_334_subproof") {
subproof_519(args, ret, err);
}
if (name == "pointsto_objcont_335_negation_subproof") {
subproof_520(args, ret, err);
}
if (name == "pointsto_objcont_335_subproof") {
subproof_521(args, ret, err);
}
if (name == "pointsto_objcont_336_negation_subproof") {
subproof_522(args, ret, err);
}
if (name == "pointsto_objcont_336_subproof") {
subproof_523(args, ret, err);
}
if (name == "pointsto_objcont_337_negation_subproof") {
subproof_524(args, ret, err);
}
if (name == "pointsto_objcont_337_subproof") {
subproof_525(args, ret, err);
}
if (name == "pointsto_objcont_338_negation_subproof") {
subproof_526(args, ret, err);
}
if (name == "pointsto_objcont_338_subproof") {
subproof_527(args, ret, err);
}
if (name == "pointsto_objcont_339_negation_subproof") {
subproof_528(args, ret, err);
}
if (name == "pointsto_objcont_339_subproof") {
subproof_529(args, ret, err);
}
if (name == "pointsto_objcont_33_negation_subproof") {
subproof_530(args, ret, err);
}
if (name == "pointsto_objcont_33_subproof") {
subproof_531(args, ret, err);
}
if (name == "pointsto_objcont_340_negation_subproof") {
subproof_532(args, ret, err);
}
if (name == "pointsto_objcont_340_subproof") {
subproof_533(args, ret, err);
}
if (name == "pointsto_objcont_341_negation_subproof") {
subproof_534(args, ret, err);
}
if (name == "pointsto_objcont_341_subproof") {
subproof_535(args, ret, err);
}
if (name == "pointsto_objcont_342_negation_subproof") {
subproof_536(args, ret, err);
}
if (name == "pointsto_objcont_342_subproof") {
subproof_537(args, ret, err);
}
if (name == "pointsto_objcont_343_negation_subproof") {
subproof_538(args, ret, err);
}
if (name == "pointsto_objcont_343_subproof") {
subproof_539(args, ret, err);
}
if (name == "pointsto_objcont_344_negation_subproof") {
subproof_540(args, ret, err);
}
if (name == "pointsto_objcont_344_subproof") {
subproof_541(args, ret, err);
}
if (name == "pointsto_objcont_345_negation_subproof") {
subproof_542(args, ret, err);
}
if (name == "pointsto_objcont_345_subproof") {
subproof_543(args, ret, err);
}
if (name == "pointsto_objcont_346_negation_subproof") {
subproof_544(args, ret, err);
}
if (name == "pointsto_objcont_346_subproof") {
subproof_545(args, ret, err);
}
if (name == "pointsto_objcont_347_negation_subproof") {
subproof_546(args, ret, err);
}
if (name == "pointsto_objcont_347_subproof") {
subproof_547(args, ret, err);
}
if (name == "pointsto_objcont_348_negation_subproof") {
subproof_548(args, ret, err);
}
if (name == "pointsto_objcont_348_subproof") {
subproof_549(args, ret, err);
}
if (name == "pointsto_objcont_349_negation_subproof") {
subproof_550(args, ret, err);
}
if (name == "pointsto_objcont_349_subproof") {
subproof_551(args, ret, err);
}
if (name == "pointsto_objcont_34_negation_subproof") {
subproof_552(args, ret, err);
}
if (name == "pointsto_objcont_34_subproof") {
subproof_553(args, ret, err);
}
if (name == "pointsto_objcont_350_negation_subproof") {
subproof_554(args, ret, err);
}
if (name == "pointsto_objcont_350_subproof") {
subproof_555(args, ret, err);
}
if (name == "pointsto_objcont_351_negation_subproof") {
subproof_556(args, ret, err);
}
if (name == "pointsto_objcont_351_subproof") {
subproof_557(args, ret, err);
}
if (name == "pointsto_objcont_352_negation_subproof") {
subproof_558(args, ret, err);
}
if (name == "pointsto_objcont_352_subproof") {
subproof_559(args, ret, err);
}
if (name == "pointsto_objcont_353_negation_subproof") {
subproof_560(args, ret, err);
}
if (name == "pointsto_objcont_353_subproof") {
subproof_561(args, ret, err);
}
if (name == "pointsto_objcont_354_negation_subproof") {
subproof_562(args, ret, err);
}
if (name == "pointsto_objcont_354_subproof") {
subproof_563(args, ret, err);
}
if (name == "pointsto_objcont_355_negation_subproof") {
subproof_564(args, ret, err);
}
if (name == "pointsto_objcont_355_subproof") {
subproof_565(args, ret, err);
}
if (name == "pointsto_objcont_356_negation_subproof") {
subproof_566(args, ret, err);
}
if (name == "pointsto_objcont_356_subproof") {
subproof_567(args, ret, err);
}
if (name == "pointsto_objcont_357_negation_subproof") {
subproof_568(args, ret, err);
}
if (name == "pointsto_objcont_357_subproof") {
subproof_569(args, ret, err);
}
if (name == "pointsto_objcont_358_negation_subproof") {
subproof_570(args, ret, err);
}
if (name == "pointsto_objcont_358_subproof") {
subproof_571(args, ret, err);
}
if (name == "pointsto_objcont_359_negation_subproof") {
subproof_572(args, ret, err);
}
if (name == "pointsto_objcont_359_subproof") {
subproof_573(args, ret, err);
}
if (name == "pointsto_objcont_35_negation_subproof") {
subproof_574(args, ret, err);
}
if (name == "pointsto_objcont_35_subproof") {
subproof_575(args, ret, err);
}
if (name == "pointsto_objcont_360_negation_subproof") {
subproof_576(args, ret, err);
}
if (name == "pointsto_objcont_360_subproof") {
subproof_577(args, ret, err);
}
if (name == "pointsto_objcont_361_negation_subproof") {
subproof_578(args, ret, err);
}
if (name == "pointsto_objcont_361_subproof") {
subproof_579(args, ret, err);
}
if (name == "pointsto_objcont_362_negation_subproof") {
subproof_580(args, ret, err);
}
if (name == "pointsto_objcont_362_subproof") {
subproof_581(args, ret, err);
}
if (name == "pointsto_objcont_363_negation_subproof") {
subproof_582(args, ret, err);
}
if (name == "pointsto_objcont_363_subproof") {
subproof_583(args, ret, err);
}
if (name == "pointsto_objcont_364_negation_subproof") {
subproof_584(args, ret, err);
}
if (name == "pointsto_objcont_364_subproof") {
subproof_585(args, ret, err);
}
if (name == "pointsto_objcont_365_negation_subproof") {
subproof_586(args, ret, err);
}
if (name == "pointsto_objcont_365_subproof") {
subproof_587(args, ret, err);
}
if (name == "pointsto_objcont_366_negation_subproof") {
subproof_588(args, ret, err);
}
if (name == "pointsto_objcont_366_subproof") {
subproof_589(args, ret, err);
}
if (name == "pointsto_objcont_367_negation_subproof") {
subproof_590(args, ret, err);
}
if (name == "pointsto_objcont_367_subproof") {
subproof_591(args, ret, err);
}
if (name == "pointsto_objcont_368_negation_subproof") {
subproof_592(args, ret, err);
}
if (name == "pointsto_objcont_368_subproof") {
subproof_593(args, ret, err);
}
if (name == "pointsto_objcont_369_negation_subproof") {
subproof_594(args, ret, err);
}
if (name == "pointsto_objcont_369_subproof") {
subproof_595(args, ret, err);
}
if (name == "pointsto_objcont_36_negation_subproof") {
subproof_596(args, ret, err);
}
if (name == "pointsto_objcont_36_subproof") {
subproof_597(args, ret, err);
}
if (name == "pointsto_objcont_370_negation_subproof") {
subproof_598(args, ret, err);
}
if (name == "pointsto_objcont_370_subproof") {
subproof_599(args, ret, err);
}
if (name == "pointsto_objcont_371_negation_subproof") {
subproof_600(args, ret, err);
}
if (name == "pointsto_objcont_371_subproof") {
subproof_601(args, ret, err);
}
if (name == "pointsto_objcont_372_negation_subproof") {
subproof_602(args, ret, err);
}
if (name == "pointsto_objcont_372_subproof") {
subproof_603(args, ret, err);
}
if (name == "pointsto_objcont_373_negation_subproof") {
subproof_604(args, ret, err);
}
if (name == "pointsto_objcont_373_subproof") {
subproof_605(args, ret, err);
}
if (name == "pointsto_objcont_374_negation_subproof") {
subproof_606(args, ret, err);
}
if (name == "pointsto_objcont_374_subproof") {
subproof_607(args, ret, err);
}
if (name == "pointsto_objcont_375_negation_subproof") {
subproof_608(args, ret, err);
}
if (name == "pointsto_objcont_375_subproof") {
subproof_609(args, ret, err);
}
if (name == "pointsto_objcont_376_negation_subproof") {
subproof_610(args, ret, err);
}
if (name == "pointsto_objcont_376_subproof") {
subproof_611(args, ret, err);
}
if (name == "pointsto_objcont_377_negation_subproof") {
subproof_612(args, ret, err);
}
if (name == "pointsto_objcont_377_subproof") {
subproof_613(args, ret, err);
}
if (name == "pointsto_objcont_378_negation_subproof") {
subproof_614(args, ret, err);
}
if (name == "pointsto_objcont_378_subproof") {
subproof_615(args, ret, err);
}
if (name == "pointsto_objcont_379_negation_subproof") {
subproof_616(args, ret, err);
}
if (name == "pointsto_objcont_379_subproof") {
subproof_617(args, ret, err);
}
if (name == "pointsto_objcont_37_negation_subproof") {
subproof_618(args, ret, err);
}
if (name == "pointsto_objcont_37_subproof") {
subproof_619(args, ret, err);
}
if (name == "pointsto_objcont_380_negation_subproof") {
subproof_620(args, ret, err);
}
if (name == "pointsto_objcont_380_subproof") {
subproof_621(args, ret, err);
}
if (name == "pointsto_objcont_381_negation_subproof") {
subproof_622(args, ret, err);
}
if (name == "pointsto_objcont_381_subproof") {
subproof_623(args, ret, err);
}
if (name == "pointsto_objcont_382_negation_subproof") {
subproof_624(args, ret, err);
}
if (name == "pointsto_objcont_382_subproof") {
subproof_625(args, ret, err);
}
if (name == "pointsto_objcont_383_negation_subproof") {
subproof_626(args, ret, err);
}
if (name == "pointsto_objcont_383_subproof") {
subproof_627(args, ret, err);
}
if (name == "pointsto_objcont_384_negation_subproof") {
subproof_628(args, ret, err);
}
if (name == "pointsto_objcont_384_subproof") {
subproof_629(args, ret, err);
}
if (name == "pointsto_objcont_385_negation_subproof") {
subproof_630(args, ret, err);
}
if (name == "pointsto_objcont_385_subproof") {
subproof_631(args, ret, err);
}
if (name == "pointsto_objcont_386_negation_subproof") {
subproof_632(args, ret, err);
}
if (name == "pointsto_objcont_386_subproof") {
subproof_633(args, ret, err);
}
if (name == "pointsto_objcont_387_negation_subproof") {
subproof_634(args, ret, err);
}
if (name == "pointsto_objcont_387_subproof") {
subproof_635(args, ret, err);
}
if (name == "pointsto_objcont_388_negation_subproof") {
subproof_636(args, ret, err);
}
if (name == "pointsto_objcont_388_subproof") {
subproof_637(args, ret, err);
}
if (name == "pointsto_objcont_389_negation_subproof") {
subproof_638(args, ret, err);
}
if (name == "pointsto_objcont_389_subproof") {
subproof_639(args, ret, err);
}
if (name == "pointsto_objcont_38_negation_subproof") {
subproof_640(args, ret, err);
}
if (name == "pointsto_objcont_38_subproof") {
subproof_641(args, ret, err);
}
if (name == "pointsto_objcont_390_negation_subproof") {
subproof_642(args, ret, err);
}
if (name == "pointsto_objcont_390_subproof") {
subproof_643(args, ret, err);
}
if (name == "pointsto_objcont_391_negation_subproof") {
subproof_644(args, ret, err);
}
if (name == "pointsto_objcont_391_subproof") {
subproof_645(args, ret, err);
}
if (name == "pointsto_objcont_392_negation_subproof") {
subproof_646(args, ret, err);
}
if (name == "pointsto_objcont_392_subproof") {
subproof_647(args, ret, err);
}
if (name == "pointsto_objcont_393_negation_subproof") {
subproof_648(args, ret, err);
}
if (name == "pointsto_objcont_393_subproof") {
subproof_649(args, ret, err);
}
if (name == "pointsto_objcont_394_negation_subproof") {
subproof_650(args, ret, err);
}
if (name == "pointsto_objcont_394_subproof") {
subproof_651(args, ret, err);
}
if (name == "pointsto_objcont_395_negation_subproof") {
subproof_652(args, ret, err);
}
if (name == "pointsto_objcont_395_subproof") {
subproof_653(args, ret, err);
}
if (name == "pointsto_objcont_396_negation_subproof") {
subproof_654(args, ret, err);
}
if (name == "pointsto_objcont_396_subproof") {
subproof_655(args, ret, err);
}
if (name == "pointsto_objcont_397_negation_subproof") {
subproof_656(args, ret, err);
}
if (name == "pointsto_objcont_397_subproof") {
subproof_657(args, ret, err);
}
if (name == "pointsto_objcont_398_negation_subproof") {
subproof_658(args, ret, err);
}
if (name == "pointsto_objcont_398_subproof") {
subproof_659(args, ret, err);
}
if (name == "pointsto_objcont_399_negation_subproof") {
subproof_660(args, ret, err);
}
if (name == "pointsto_objcont_399_subproof") {
subproof_661(args, ret, err);
}
if (name == "pointsto_objcont_39_negation_subproof") {
subproof_662(args, ret, err);
}
if (name == "pointsto_objcont_39_subproof") {
subproof_663(args, ret, err);
}
if (name == "pointsto_objcont_3_negation_subproof") {
subproof_664(args, ret, err);
}
if (name == "pointsto_objcont_3_subproof") {
subproof_665(args, ret, err);
}
if (name == "pointsto_objcont_400_negation_subproof") {
subproof_666(args, ret, err);
}
if (name == "pointsto_objcont_400_subproof") {
subproof_667(args, ret, err);
}
if (name == "pointsto_objcont_40_negation_subproof") {
subproof_668(args, ret, err);
}
if (name == "pointsto_objcont_40_subproof") {
subproof_669(args, ret, err);
}
if (name == "pointsto_objcont_41_negation_subproof") {
subproof_670(args, ret, err);
}
if (name == "pointsto_objcont_41_subproof") {
subproof_671(args, ret, err);
}
if (name == "pointsto_objcont_42_negation_subproof") {
subproof_672(args, ret, err);
}
if (name == "pointsto_objcont_42_subproof") {
subproof_673(args, ret, err);
}
if (name == "pointsto_objcont_43_negation_subproof") {
subproof_674(args, ret, err);
}
if (name == "pointsto_objcont_43_subproof") {
subproof_675(args, ret, err);
}
if (name == "pointsto_objcont_44_negation_subproof") {
subproof_676(args, ret, err);
}
if (name == "pointsto_objcont_44_subproof") {
subproof_677(args, ret, err);
}
if (name == "pointsto_objcont_45_negation_subproof") {
subproof_678(args, ret, err);
}
if (name == "pointsto_objcont_45_subproof") {
subproof_679(args, ret, err);
}
if (name == "pointsto_objcont_46_negation_subproof") {
subproof_680(args, ret, err);
}
if (name == "pointsto_objcont_46_subproof") {
subproof_681(args, ret, err);
}
if (name == "pointsto_objcont_47_negation_subproof") {
subproof_682(args, ret, err);
}
if (name == "pointsto_objcont_47_subproof") {
subproof_683(args, ret, err);
}
if (name == "pointsto_objcont_48_negation_subproof") {
subproof_684(args, ret, err);
}
if (name == "pointsto_objcont_48_subproof") {
subproof_685(args, ret, err);
}
if (name == "pointsto_objcont_49_negation_subproof") {
subproof_686(args, ret, err);
}
if (name == "pointsto_objcont_49_subproof") {
subproof_687(args, ret, err);
}
if (name == "pointsto_objcont_4_negation_subproof") {
subproof_688(args, ret, err);
}
if (name == "pointsto_objcont_4_subproof") {
subproof_689(args, ret, err);
}
if (name == "pointsto_objcont_50_negation_subproof") {
subproof_690(args, ret, err);
}
if (name == "pointsto_objcont_50_subproof") {
subproof_691(args, ret, err);
}
if (name == "pointsto_objcont_51_negation_subproof") {
subproof_692(args, ret, err);
}
if (name == "pointsto_objcont_51_subproof") {
subproof_693(args, ret, err);
}
if (name == "pointsto_objcont_52_negation_subproof") {
subproof_694(args, ret, err);
}
if (name == "pointsto_objcont_52_subproof") {
subproof_695(args, ret, err);
}
if (name == "pointsto_objcont_53_negation_subproof") {
subproof_696(args, ret, err);
}
if (name == "pointsto_objcont_53_subproof") {
subproof_697(args, ret, err);
}
if (name == "pointsto_objcont_54_negation_subproof") {
subproof_698(args, ret, err);
}
if (name == "pointsto_objcont_54_subproof") {
subproof_699(args, ret, err);
}
if (name == "pointsto_objcont_55_negation_subproof") {
subproof_700(args, ret, err);
}
if (name == "pointsto_objcont_55_subproof") {
subproof_701(args, ret, err);
}
if (name == "pointsto_objcont_56_negation_subproof") {
subproof_702(args, ret, err);
}
if (name == "pointsto_objcont_56_subproof") {
subproof_703(args, ret, err);
}
if (name == "pointsto_objcont_57_negation_subproof") {
subproof_704(args, ret, err);
}
if (name == "pointsto_objcont_57_subproof") {
subproof_705(args, ret, err);
}
if (name == "pointsto_objcont_58_negation_subproof") {
subproof_706(args, ret, err);
}
if (name == "pointsto_objcont_58_subproof") {
subproof_707(args, ret, err);
}
if (name == "pointsto_objcont_59_negation_subproof") {
subproof_708(args, ret, err);
}
if (name == "pointsto_objcont_59_subproof") {
subproof_709(args, ret, err);
}
if (name == "pointsto_objcont_5_negation_subproof") {
subproof_710(args, ret, err);
}
if (name == "pointsto_objcont_5_subproof") {
subproof_711(args, ret, err);
}
if (name == "pointsto_objcont_60_negation_subproof") {
subproof_712(args, ret, err);
}
if (name == "pointsto_objcont_60_subproof") {
subproof_713(args, ret, err);
}
if (name == "pointsto_objcont_61_negation_subproof") {
subproof_714(args, ret, err);
}
if (name == "pointsto_objcont_61_subproof") {
subproof_715(args, ret, err);
}
if (name == "pointsto_objcont_62_negation_subproof") {
subproof_716(args, ret, err);
}
if (name == "pointsto_objcont_62_subproof") {
subproof_717(args, ret, err);
}
if (name == "pointsto_objcont_63_negation_subproof") {
subproof_718(args, ret, err);
}
if (name == "pointsto_objcont_63_subproof") {
subproof_719(args, ret, err);
}
if (name == "pointsto_objcont_64_negation_subproof") {
subproof_720(args, ret, err);
}
if (name == "pointsto_objcont_64_subproof") {
subproof_721(args, ret, err);
}
if (name == "pointsto_objcont_65_negation_subproof") {
subproof_722(args, ret, err);
}
if (name == "pointsto_objcont_65_subproof") {
subproof_723(args, ret, err);
}
if (name == "pointsto_objcont_66_negation_subproof") {
subproof_724(args, ret, err);
}
if (name == "pointsto_objcont_66_subproof") {
subproof_725(args, ret, err);
}
if (name == "pointsto_objcont_67_negation_subproof") {
subproof_726(args, ret, err);
}
if (name == "pointsto_objcont_67_subproof") {
subproof_727(args, ret, err);
}
if (name == "pointsto_objcont_68_negation_subproof") {
subproof_728(args, ret, err);
}
if (name == "pointsto_objcont_68_subproof") {
subproof_729(args, ret, err);
}
if (name == "pointsto_objcont_69_negation_subproof") {
subproof_730(args, ret, err);
}
if (name == "pointsto_objcont_69_subproof") {
subproof_731(args, ret, err);
}
if (name == "pointsto_objcont_6_negation_subproof") {
subproof_732(args, ret, err);
}
if (name == "pointsto_objcont_6_subproof") {
subproof_733(args, ret, err);
}
if (name == "pointsto_objcont_70_negation_subproof") {
subproof_734(args, ret, err);
}
if (name == "pointsto_objcont_70_subproof") {
subproof_735(args, ret, err);
}
if (name == "pointsto_objcont_71_negation_subproof") {
subproof_736(args, ret, err);
}
if (name == "pointsto_objcont_71_subproof") {
subproof_737(args, ret, err);
}
if (name == "pointsto_objcont_72_negation_subproof") {
subproof_738(args, ret, err);
}
if (name == "pointsto_objcont_72_subproof") {
subproof_739(args, ret, err);
}
if (name == "pointsto_objcont_73_negation_subproof") {
subproof_740(args, ret, err);
}
if (name == "pointsto_objcont_73_subproof") {
subproof_741(args, ret, err);
}
if (name == "pointsto_objcont_74_negation_subproof") {
subproof_742(args, ret, err);
}
if (name == "pointsto_objcont_74_subproof") {
subproof_743(args, ret, err);
}
if (name == "pointsto_objcont_75_negation_subproof") {
subproof_744(args, ret, err);
}
if (name == "pointsto_objcont_75_subproof") {
subproof_745(args, ret, err);
}
if (name == "pointsto_objcont_76_negation_subproof") {
subproof_746(args, ret, err);
}
if (name == "pointsto_objcont_76_subproof") {
subproof_747(args, ret, err);
}
if (name == "pointsto_objcont_77_negation_subproof") {
subproof_748(args, ret, err);
}
if (name == "pointsto_objcont_77_subproof") {
subproof_749(args, ret, err);
}
if (name == "pointsto_objcont_78_negation_subproof") {
subproof_750(args, ret, err);
}
if (name == "pointsto_objcont_78_subproof") {
subproof_751(args, ret, err);
}
if (name == "pointsto_objcont_79_negation_subproof") {
subproof_752(args, ret, err);
}
if (name == "pointsto_objcont_79_subproof") {
subproof_753(args, ret, err);
}
if (name == "pointsto_objcont_7_negation_subproof") {
subproof_754(args, ret, err);
}
if (name == "pointsto_objcont_7_subproof") {
subproof_755(args, ret, err);
}
if (name == "pointsto_objcont_80_negation_subproof") {
subproof_756(args, ret, err);
}
if (name == "pointsto_objcont_80_subproof") {
subproof_757(args, ret, err);
}
if (name == "pointsto_objcont_81_negation_subproof") {
subproof_758(args, ret, err);
}
if (name == "pointsto_objcont_81_subproof") {
subproof_759(args, ret, err);
}
if (name == "pointsto_objcont_82_negation_subproof") {
subproof_760(args, ret, err);
}
if (name == "pointsto_objcont_82_subproof") {
subproof_761(args, ret, err);
}
if (name == "pointsto_objcont_83_negation_subproof") {
subproof_762(args, ret, err);
}
if (name == "pointsto_objcont_83_subproof") {
subproof_763(args, ret, err);
}
if (name == "pointsto_objcont_84_negation_subproof") {
subproof_764(args, ret, err);
}
if (name == "pointsto_objcont_84_subproof") {
subproof_765(args, ret, err);
}
if (name == "pointsto_objcont_85_negation_subproof") {
subproof_766(args, ret, err);
}
if (name == "pointsto_objcont_85_subproof") {
subproof_767(args, ret, err);
}
if (name == "pointsto_objcont_86_negation_subproof") {
subproof_768(args, ret, err);
}
if (name == "pointsto_objcont_86_subproof") {
subproof_769(args, ret, err);
}
if (name == "pointsto_objcont_87_negation_subproof") {
subproof_770(args, ret, err);
}
if (name == "pointsto_objcont_87_subproof") {
subproof_771(args, ret, err);
}
if (name == "pointsto_objcont_88_negation_subproof") {
subproof_772(args, ret, err);
}
if (name == "pointsto_objcont_88_subproof") {
subproof_773(args, ret, err);
}
if (name == "pointsto_objcont_89_negation_subproof") {
subproof_774(args, ret, err);
}
if (name == "pointsto_objcont_89_subproof") {
subproof_775(args, ret, err);
}
if (name == "pointsto_objcont_8_negation_subproof") {
subproof_776(args, ret, err);
}
if (name == "pointsto_objcont_8_subproof") {
subproof_777(args, ret, err);
}
if (name == "pointsto_objcont_90_negation_subproof") {
subproof_778(args, ret, err);
}
if (name == "pointsto_objcont_90_subproof") {
subproof_779(args, ret, err);
}
if (name == "pointsto_objcont_91_negation_subproof") {
subproof_780(args, ret, err);
}
if (name == "pointsto_objcont_91_subproof") {
subproof_781(args, ret, err);
}
if (name == "pointsto_objcont_92_negation_subproof") {
subproof_782(args, ret, err);
}
if (name == "pointsto_objcont_92_subproof") {
subproof_783(args, ret, err);
}
if (name == "pointsto_objcont_93_negation_subproof") {
subproof_784(args, ret, err);
}
if (name == "pointsto_objcont_93_subproof") {
subproof_785(args, ret, err);
}
if (name == "pointsto_objcont_94_negation_subproof") {
subproof_786(args, ret, err);
}
if (name == "pointsto_objcont_94_subproof") {
subproof_787(args, ret, err);
}
if (name == "pointsto_objcont_95_negation_subproof") {
subproof_788(args, ret, err);
}
if (name == "pointsto_objcont_95_subproof") {
subproof_789(args, ret, err);
}
if (name == "pointsto_objcont_96_negation_subproof") {
subproof_790(args, ret, err);
}
if (name == "pointsto_objcont_96_subproof") {
subproof_791(args, ret, err);
}
if (name == "pointsto_objcont_97_negation_subproof") {
subproof_792(args, ret, err);
}
if (name == "pointsto_objcont_97_subproof") {
subproof_793(args, ret, err);
}
if (name == "pointsto_objcont_98_negation_subproof") {
subproof_794(args, ret, err);
}
if (name == "pointsto_objcont_98_subproof") {
subproof_795(args, ret, err);
}
if (name == "pointsto_objcont_99_negation_subproof") {
subproof_796(args, ret, err);
}
if (name == "pointsto_objcont_99_subproof") {
subproof_797(args, ret, err);
}
if (name == "pointsto_objcont_9_negation_subproof") {
subproof_798(args, ret, err);
}
if (name == "pointsto_objcont_9_subproof") {
subproof_799(args, ret, err);
}
}
void subproof_0(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73695),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73695));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_1(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73695),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[0],env1[1],env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73695));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_2(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25962),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25962));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_3(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25962),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25962));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_4(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(17004),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(17004));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
if(!rel_5_formal->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_5(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17004),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],(args)[1],env1[1],0,0}});
auto range = rel_5_formal->equalRange_7(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(17004));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_6(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(76127),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(76127));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_7(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76127),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(76127));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_8(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(4802),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(4802));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_9(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4802),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(4802));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_10(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(79890),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(79890));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_11(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79890),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(79890));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_12(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70047),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70047));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_13(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70047),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70047));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_14(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72259),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72259));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_15(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72259));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_16(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57647),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57647));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_17(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57647),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57647));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_18(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41683),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41683));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_19(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41683),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41683));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_20(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_21(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[1],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_22(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70884),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70884));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_23(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70884),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70884));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_24(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19066),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19066));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_25(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19066),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[1],env1[0],env1[1],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19066));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_26(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(56544),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(56544));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_27(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56544),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(56544));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_28(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(50975),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(50975));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_29(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50975),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(50975));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_30(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1665),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1665));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_31(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1665),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) && (((env1[1]) == (env1[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1665));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_32(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19450),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19450));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_33(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19450),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19450));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_34(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(56468),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(56468));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_35(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56468),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(56468));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_36(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(5608),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(5608));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_37(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) && (((env1[1]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(5608));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_38(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67044),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67044));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_39(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67044),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67044));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_40(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(75403),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(75403));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_41(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75403),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(75403));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_42(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
if(!rel_8_load->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_load_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_43(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_8_load->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[0],(args)[1],(args)[2],0,0}});
auto range = rel_8_load->equalRange_7(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[4]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_44(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(52086),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(52086));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_45(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52086),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(52086));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_46(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37139),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37139));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_47(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37139),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],(args)[2],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37139));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_48(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64840),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64840));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_49(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64840),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64840));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_50(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57339),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57339));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_51(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57339),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57339));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_52(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(10964),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(10964));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_53(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10964),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(10964));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_54(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(89827),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(89827));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_55(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89827),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(89827));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_56(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(89093),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(89093));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_57(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89093),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],env1[0],(args)[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(89093));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_58(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(23476),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(23476));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_59(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23476),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(23476));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_60(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(17280),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(17280));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
if(!rel_5_formal->equalRange_7(Tuple<RamDomain,5>({{(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_5_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_61(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17280),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[1],0,0}});
auto range = rel_5_formal->equalRange_7(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(17280));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_62(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64388),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64388));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_63(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64388),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64388));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_64(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
if(!rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_65(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_14_pointsto_objcont->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[1],0,0}});
auto range = rel_14_pointsto_objcont->equalRange_7(key,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_66(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22401),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22401));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_67(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22401),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,env1[1],env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_61(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22401));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_68(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34014),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34014));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_69(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34014),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34014));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_70(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(32608),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(32608));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_71(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(32608));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_72(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(60907),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(60907));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_73(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(60907),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(60907));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_74(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65891),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65891));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_75(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65891),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65891));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_76(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37048),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37048));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_77(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37048),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37048));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_78(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74379),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74379));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_79(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74379),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74379));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_80(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47342),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47342));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_81(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47342),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],env1[0],(args)[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47342));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_82(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(49990),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(49990));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_83(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49990),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(49990));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_84(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(51700),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(51700));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_85(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51700),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(51700));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_86(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(69300),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(69300));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_87(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69300),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(69300));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_88(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6709),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6709));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_89(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6709),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6709));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_90(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85928),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85928));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_91(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85928),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85928));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_92(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(27710),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(27710));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_93(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27710),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(27710));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_94(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82355),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82355));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_95(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82355));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_96(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9044),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9044));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_97(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9044),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[0],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9044));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_98(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(54183),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(54183));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_99(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54183),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(54183));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_100(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78074),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78074));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_101(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78074),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78074));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_102(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74364),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74364));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_103(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74364),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[0],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74364));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_104(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(80260),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(80260));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_105(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80260),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(80260));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_106(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67346),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67346));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_107(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67346),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67346));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_108(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(56630),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(56630));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_109(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56630),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(56630));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_110(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35125),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35125));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_111(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35125),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35125));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_112(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(59200),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(59200));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_113(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59200),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(59200));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_114(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78013),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78013));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_115(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78013),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78013));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_116(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64376),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64376));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_117(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64376),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64376));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_118(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(29254),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(29254));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_119(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29254),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],(args)[2],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(29254));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_120(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43019),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43019));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_121(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43019),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43019));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_122(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72564),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72564));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_123(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72564),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72564));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_124(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21285),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21285));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_125(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21285),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21285));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_126(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(69299),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(69299));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_127(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69299),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(69299));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_128(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21348),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21348));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_129(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21348),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21348));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_130(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34295),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34295));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_131(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34295),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34295));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_132(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(54555),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(54555));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_133(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54555),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(54555));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_134(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62981),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62981));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_135(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62981),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62981));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_136(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(68694),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(68694));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_137(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68694),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],(args)[2],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(68694));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_138(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6750),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6750));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_139(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6750),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6750));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_140(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47086),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47086));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_141(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47086),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47086));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_142(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(26939),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(26939));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_143(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(26939),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(26939));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_144(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67670),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67670));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_145(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67670),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67670));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_146(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73511),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73511));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_147(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73511),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73511));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_148(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58608),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58608));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_149(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58608),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58608));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_150(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(91582),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(91582));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_151(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(91582),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(91582));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_152(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19791),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19791));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_153(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19791),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],(args)[1],env1[0],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19791));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_154(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(170),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(170));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
if(!rel_8_load->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_load_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_155(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
const Tuple<RamDomain,3> key({{RamDomain(170),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[0],(args)[1],(args)[2],0,0}});
auto range = rel_8_load->equalRange_7(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(170));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_156(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25399),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25399));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_157(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25399),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],(args)[2],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25399));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_158(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(75363),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(75363));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_159(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75363),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(75363));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_160(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(30037),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(30037));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_161(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30037),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(30037));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_162(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(17833),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(17833));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
if(!rel_5_formal->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_163(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(17833),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_5_formal->equalRange_7(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(17833));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_164(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35561),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35561));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_165(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35561),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35561));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_166(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(18241),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(18241));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_167(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18241),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(18241));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_168(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47462),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47462));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_169(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47462),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47462));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_170(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47663),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47663));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_171(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47663),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47663));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_172(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(71901),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(71901));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_173(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71901),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],(args)[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(71901));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_174(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(48017),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(48017));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_175(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48017),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(48017));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_176(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3343),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3343));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_177(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3343),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[2],0,(args)[1],0,0,0,0}});
auto range = rel_3_assign->equalRange_11(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3343));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_178(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6138),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6138));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_179(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6138),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[0]) == (env1[4]))))) && (((env1[1]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6138));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_180(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28853),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28853));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_181(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28853),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],(args)[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28853));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_182(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11948),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11948));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_183(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11948),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11948));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_184(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85549),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85549));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_185(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85549),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85549));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_186(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7943),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7943));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_187(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7943),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[0]) == (env1[4]))))) && (((env1[1]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7943));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_188(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58357),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58357));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_189(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58357),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58357));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_190(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9616),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9616));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_191(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9616),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9616));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_192(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78374),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78374));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_193(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78374),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78374));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_194(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(89794),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(89794));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_195(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(89794),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(89794));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_196(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(13813),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(13813));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
if(!rel_8_load->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_load_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_197(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13813),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_8_load->equalRange_7(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(13813));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_198(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73931),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73931));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_199(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73931),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73931));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_200(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61289),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61289));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_201(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61289),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61289));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_202(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(46907),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(46907));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_203(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(46907),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],env1[0],(args)[2],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(46907));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_204(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(81145),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(81145));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_205(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81145),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(81145));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_206(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(50995),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(50995));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_207(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50995),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(50995));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_208(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6355),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6355));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_209(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[0],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6355));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_210(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7560),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7560));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_211(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7560),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7560));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_212(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33965),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33965));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_213(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33965),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33965));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_214(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3904),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3904));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_215(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3904),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3904));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_216(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(79705),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(79705));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_217(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79705),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(79705));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_218(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28791),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28791));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_219(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28791),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],0,env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28791));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_220(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(10),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(10));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
if(!rel_12_receiver_formal->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_221(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[1],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(10));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_222(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(54686),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(54686));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_223(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54686),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(54686));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_224(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(71957),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(71957));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_225(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71957),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(71957));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_226(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57810),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57810));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_227(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57810),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57810));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_228(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(81803),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(81803));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_229(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81803),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(81803));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_230(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(53640),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(53640));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_231(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53640),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(53640));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_232(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85336),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85336));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_233(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85336),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85336));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_234(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11627),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11627));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_235(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11627),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],(args)[1],env1[0],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11627));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_236(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(75557),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(75557));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_237(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75557),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(75557));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_238(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(18878),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(18878));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_239(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18878),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],(args)[1],env1[1],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(18878));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_240(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(30106),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(30106));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_241(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30106),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(30106));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_242(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36691),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36691));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_243(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36691),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36691));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_244(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(75720),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(75720));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_245(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(75720),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(75720));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_246(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9210),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9210));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_247(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9210),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],(args)[2],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[0]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9210));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_248(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38590),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38590));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_249(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38590),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38590));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_250(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(29854),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(29854));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_251(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29854),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],(args)[1],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(29854));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_252(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1420),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1420));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_253(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1420));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_254(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65965),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65965));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_255(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65965),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65965));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_256(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(86199),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(86199));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_257(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86199),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(86199));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_258(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42621),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42621));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_259(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42621),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42621));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_260(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28746),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28746));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_261(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28746),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28746));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_262(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25525),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25525));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_263(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25525),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25525));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_264(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(15217),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(15217));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_7_invocation_op_ctxt,rel_7_invocation->createContext());
if(!rel_7_invocation->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_7_invocation_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_265(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_7_invocation->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_7_invocation_op_ctxt,rel_7_invocation->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15217),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[2],0,0}});
auto range = rel_7_invocation->equalRange_3(key,READ_OP_CONTEXT(rel_7_invocation_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(15217));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_266(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(84605),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(84605));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_267(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84605),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(84605));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_268(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63851),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63851));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_269(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63851),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63851));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_270(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7190),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7190));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_271(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7190),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[0],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7190));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_272(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72049),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72049));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_273(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72049),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],0,env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72049));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_274(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(31145),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(31145));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_275(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31145),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(31145));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_276(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8461),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8461));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_277(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8461),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8461));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_278(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58678),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58678));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_279(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58678),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58678));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_280(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7528),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7528));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_281(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7528),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7528));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_282(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65106),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65106));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_283(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65106),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],(args)[2],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65106));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_284(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(54138),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(54138));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_285(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(54138),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(54138));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_286(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(27895),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(27895));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_287(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27895),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(27895));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_288(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62378),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62378));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_289(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62378),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62378));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_290(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2915),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2915));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_291(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2915),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],0,0,(args)[2],0,0,0}});
auto range = rel_3_assign->equalRange_19(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[2]))))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2915));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_292(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(76168),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(76168));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_293(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76168),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[0],env1[1],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(76168));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_294(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(87560),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(87560));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_295(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87560),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(87560));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_296(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9716),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9716));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_297(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9716),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9716));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_298(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61577),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61577));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_299(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61577),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],(args)[1],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61577));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_300(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(88216),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(88216));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_301(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88216),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(88216));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_302(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(88040),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(88040));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_303(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88040),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(88040));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_304(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35188),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35188));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_305(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35188),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],env1[0],(args)[2],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35188));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_306(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(474),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(474));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_307(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(474),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[2],0,(args)[1],0,0,0,0}});
auto range = rel_3_assign->equalRange_11(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(474));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_308(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35837),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35837));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_309(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35837),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35837));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_310(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62935),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62935));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_311(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62935),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62935));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_312(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43064),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43064));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_313(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43064),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43064));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_314(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57077),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57077));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_315(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57077),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],(args)[2],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57077));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_316(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61633),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61633));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_317(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61633),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61633));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_318(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11958),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11958));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_319(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11958),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11958));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_320(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58726),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58726));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_321(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58726),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[1],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58726));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_322(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(56946),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(56946));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_323(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(56946),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(56946));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_324(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1338),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1338));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_325(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1338),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[0],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1338));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_326(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(50426),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(50426));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_327(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50426),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(50426));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_328(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(46740),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(46740));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_329(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(46740),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(46740));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_330(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(86626),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(86626));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_331(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86626),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(86626));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_332(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(66661),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(66661));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_333(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66661),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(66661));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_334(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42383),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42383));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_335(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42383),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42383));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_336(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85064),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85064));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_337(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85064),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85064));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_338(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35514),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35514));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_339(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35514),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35514));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_340(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22098),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22098));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_341(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22098),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22098));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_342(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(88993),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(88993));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_343(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88993),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(88993));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_344(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25146),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25146));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_345(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25146),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25146));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_346(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47655),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47655));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_347(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47655),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47655));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_348(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6397),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6397));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_349(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6397),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],0,(args)[0],(args)[2],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[3]) == (env1[5]))))) && (((env1[0]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6397));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_350(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(439),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(439));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_351(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(439),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(439));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_352(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22946),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22946));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_353(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22946),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],(args)[2],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22946));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_354(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(51294),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(51294));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_355(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51294),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(51294));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_356(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78205),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78205));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_357(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78205),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78205));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_358(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(86206),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(86206));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_359(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],(args)[2],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[4]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(86206));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_360(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(51600),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(51600));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_361(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51600),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(51600));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_362(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38146),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38146));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_363(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38146),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],(args)[2],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38146));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_364(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82123),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82123));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_365(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82123),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],(args)[0],env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82123));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_366(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8929),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8929));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_367(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8929),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[4]))))) && (((env1[1]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8929));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_368(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(58529),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(58529));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_369(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(58529),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(58529));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_370(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3527),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3527));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_371(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3527),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],(args)[2],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[4]))))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3527));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_372(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74481),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74481));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_373(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74481),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74481));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_374(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(84399),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(84399));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_375(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84399),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(84399));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_376(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(39415),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(39415));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_377(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39415),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[1],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(39415));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_378(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(55665),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(55665));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_379(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(55665),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(55665));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_380(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8579),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8579));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_381(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8579),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8579));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_382(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(39475),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(39475));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_383(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39475),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(39475));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_384(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1197),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1197));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_385(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1197),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[2],0,(args)[1],0,0,0,0}});
auto range = rel_3_assign->equalRange_11(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[4]))))) && (((env1[3]) == (env1[5]))))) && (((env1[0]) == (env1[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1197));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_386(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8358),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8358));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_387(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8358),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[1],(args)[0],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[2]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8358));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_388(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7893),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7893));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_389(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7893),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[0],0,(args)[1],0,0,0,0}});
auto range = rel_3_assign->equalRange_11(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[4]))))) && (((env1[1]) == (env1[5]))))) && (((env1[1]) == (env1[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7893));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_390(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21380),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21380));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_391(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21380),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21380));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_392(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9894),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9894));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_393(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9894),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],0,0,(args)[2],0,0}});
auto range = rel_3_assign->equalRange_37(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9894));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_394(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28898),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28898));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_395(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28898),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28898));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_396(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(18672),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(18672));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_397(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(18672),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],(args)[2],env1[0],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(18672));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_398(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41705),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41705));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_399(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41705),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41705));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_400(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(15571),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(15571));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_11_receiver_actual_op_ctxt,rel_11_receiver_actual->createContext());
if(!rel_11_receiver_actual->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_11_receiver_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_401(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_11_receiver_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_11_receiver_actual_op_ctxt,rel_11_receiver_actual->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15571),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[2],0,0}});
auto range = rel_11_receiver_actual->equalRange_3(key,READ_OP_CONTEXT(rel_11_receiver_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(15571));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_402(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(26717),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(26717));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_403(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(26717),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(26717));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_404(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61156),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61156));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_405(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61156),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61156));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_406(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(68901),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(68901));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_407(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68901),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(68901));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_408(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(23206),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(23206));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_409(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(23206));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_410(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25283),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25283));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_411(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25283),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25283));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_412(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(31758),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(31758));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_413(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31758),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(31758));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_414(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37984),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37984));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_415(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37984),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37984));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_416(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47385),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47385));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_417(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47385),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47385));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_418(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73858),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73858));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_419(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73858),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[1],env1[0],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73858));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_420(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41373),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41373));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_421(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41373),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41373));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_422(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(52977),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(52977));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_423(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52977),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,env1[0],env1[1],env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_61(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(52977));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_424(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(90514),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(90514));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_425(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90514),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(90514));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_426(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43754),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43754));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_427(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43754),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43754));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_428(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47926),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47926));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_429(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47926),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47926));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_430(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41394),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41394));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_431(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41394),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],(args)[2],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41394));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_432(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(57499),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(57499));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_433(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(57499),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(57499));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_434(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(51220),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(51220));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_435(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(51220),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(51220));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_436(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(32354),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(32354));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_437(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32354),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(32354));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_438(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25411),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25411));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_439(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25411),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],(args)[2],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25411));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_440(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28989),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28989));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_441(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28989),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28989));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_442(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_443(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[0],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_444(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(13126),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(13126));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_445(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13126),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],(args)[2],0,0,0}});
auto range = rel_13_store->equalRange_3(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[4]) < ((args)[3]))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(13126));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_446(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(69742),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(69742));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_447(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69742),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(69742));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_448(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65932),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65932));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_449(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65932),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],(args)[1],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65932));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_450(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(85236),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(85236));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_451(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(85236),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(85236));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_452(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(29810),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(29810));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_453(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(29810),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(29810));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_454(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42564),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42564));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_455(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42564),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42564));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_456(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19565),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19565));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_457(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19565),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[2],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19565));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_458(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72665),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72665));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_459(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72665),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72665));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_460(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(68281),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(68281));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_461(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68281),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(68281));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_462(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22831),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22831));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_463(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22831),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22831));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_464(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78609),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78609));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_465(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78609),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78609));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_466(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37332),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37332));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_467(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37332),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37332));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_468(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74385),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74385));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_469(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74385),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74385));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_470(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78437),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78437));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_471(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78437),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[1],env1[0],env1[0],env1[1],(args)[2],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78437));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_472(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22838),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22838));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_473(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22838),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],env1[1],(args)[2],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22838));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_474(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(87809),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(87809));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_475(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87809),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(87809));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_476(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(49254),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(49254));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_477(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49254),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(49254));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_478(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(44215),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(44215));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_479(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(44215),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],env1[1],env1[0],(args)[2],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(44215));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_480(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(80523),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(80523));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_481(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80523),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[1],env1[0],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(80523));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_482(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82193),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82193));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_483(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82193),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82193));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_484(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(45987),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(45987));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_485(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45987),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(45987));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_486(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35569),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35569));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_487(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35569),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35569));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_488(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6975),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6975));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_489(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6975),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[4]))))) && (((env1[1]) == (env1[3]))))) && (((env1[0]) == (env1[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6975));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_490(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36827),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36827));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_491(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36827),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36827));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_492(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11485),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11485));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_493(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11485),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[1],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11485));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_494(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(16357),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(16357));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
if(!rel_5_formal->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_495(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16357),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[0],env1[1],env1[0],0,0}});
auto range = rel_5_formal->equalRange_7(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(16357));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_496(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(645),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(645));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_497(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(645),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],(args)[2],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[3]) == (env1[5]))))) && (((env1[2]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(645));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_498(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(48143),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(48143));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_499(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48143),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],env1[0],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(48143));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_500(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(49737),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(49737));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_501(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(49737),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(49737));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_502(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35157),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35157));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_503(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35157),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35157));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_504(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(83549),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(83549));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_505(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(83549),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(83549));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_506(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38054),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38054));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_507(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38054),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38054));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_508(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62907),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62907));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_509(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62907),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62907));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_510(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40513),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40513));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_511(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40513),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40513));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_512(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73312),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73312));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_513(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73312),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[1],(args)[0],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73312));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_514(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2993),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2993));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_515(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2993),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],(args)[0],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2993));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_516(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(24761),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(24761));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_517(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(24761),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(24761));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_518(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74331),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74331));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_519(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74331),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74331));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_520(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(86947),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(86947));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_521(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86947),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(86947));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_522(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73061),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73061));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_523(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73061),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73061));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_524(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34796),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34796));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_525(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34796),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],(args)[2],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34796));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_526(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(16408),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(16408));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
if(!rel_5_formal->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_5_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_527(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16408),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_5_formal->equalRange_7(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(16408));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_528(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62682),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62682));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_529(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62682),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],(args)[1],env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62682));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_530(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40656),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40656));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_531(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40656),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],0,env1[0],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40656));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_532(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(45099),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(45099));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_533(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45099),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(45099));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_534(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(23577),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(23577));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_535(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(23577),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(23577));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_536(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(1817),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(1817));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_537(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(1817),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1817));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_538(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(72525),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(72525));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_539(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(72525),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],(args)[2],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(72525));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_540(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(15594),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(15594));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_11_receiver_actual_op_ctxt,rel_11_receiver_actual->createContext());
if(!rel_11_receiver_actual->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_11_receiver_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_541(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_11_receiver_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_11_receiver_actual_op_ctxt,rel_11_receiver_actual->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15594),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_11_receiver_actual->equalRange_3(key,READ_OP_CONTEXT(rel_11_receiver_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(15594));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_542(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(59956),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(59956));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_543(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59956),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(59956));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_544(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2691),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2691));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_545(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2691),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],0,0,(args)[2],0,0}});
auto range = rel_3_assign->equalRange_37(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2691));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_546(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(77526),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(77526));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_547(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(77526),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(77526));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_548(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62521),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62521));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_549(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62521),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],(args)[1],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62521));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_550(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(71978),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(71978));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_551(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(71978),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(71978));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_552(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19390),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19390));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_553(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19390),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[2],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19390));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_554(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33996),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33996));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_555(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33996),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[1],0,0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_39(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33996));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_556(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2566),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2566));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_557(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2566),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],0,0,(args)[2],0,0,0}});
auto range = rel_3_assign->equalRange_19(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[2]))))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2566));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_558(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(37569),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(37569));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_559(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(37569),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(37569));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_560(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41823),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41823));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_561(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41823),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41823));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_562(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70372),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70372));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_563(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70372),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70372));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_564(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63076),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63076));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_565(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63076),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63076));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_566(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3206),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3206));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_567(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3206),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],0,0,(args)[2],0,0}});
auto range = rel_3_assign->equalRange_37(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3206));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_568(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(81025),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(81025));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_569(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(81025),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(81025));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_570(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(73095),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(73095));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_571(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(73095),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(73095));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_572(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74223),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74223));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_573(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74223),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[2],env1[0],env1[1],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74223));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_574(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41025),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41025));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_575(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41025),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[1],env1[1],(args)[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41025));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_576(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38235),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38235));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_577(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38235),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38235));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_578(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8420),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8420));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_579(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[2],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8420));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_580(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(84341),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(84341));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_581(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(84341),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(84341));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_582(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82506),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82506));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_583(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82506),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82506));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_584(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41355),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41355));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_585(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41355),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[1],env1[0],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41355));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_586(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(69902),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(69902));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_587(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(69902),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(69902));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_588(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47259),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47259));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_589(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47259));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_590(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(76243),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(76243));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_591(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(76243),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(76243));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_592(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64259),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64259));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_593(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64259),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64259));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_594(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(50646),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(50646));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_595(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(50646),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(50646));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_596(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36249),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36249));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_597(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36249),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36249));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_598(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(13416),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(13416));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
if(!rel_8_load->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_8_load_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_599(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
const Tuple<RamDomain,3> key({{RamDomain(13416),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[1],env1[1],env1[0],0,0}});
auto range = rel_8_load->equalRange_7(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(13416));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_600(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74332),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74332));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_601(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74332),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74332));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_602(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(15882),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(15882));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
if(!rel_12_receiver_formal->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_603(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(15882),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[0],(args)[0],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(15882));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_604(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(16387),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(16387));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
if(!rel_5_formal->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_5_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_605(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_5_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_5_formal_op_ctxt,rel_5_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(16387),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[0],env1[1],0,0,0}});
auto range = rel_5_formal->equalRange_3(key,READ_OP_CONTEXT(rel_5_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[4]) < ((args)[3]))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(16387));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_606(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33055),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33055));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_607(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33055),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33055));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_608(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(30661),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(30661));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_609(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30661),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],(args)[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(30661));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_610(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63340),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63340));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_611(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63340),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63340));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_612(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(90552),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(90552));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_613(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90552),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(90552));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_614(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(68585),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(68585));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_615(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(68585),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(68585));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_616(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(31650),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(31650));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_617(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(31650),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(31650));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_618(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(62351),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(62351));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_619(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(62351),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(62351));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_620(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(32953),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(32953));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_621(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32953),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(32953));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_622(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(53568),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(53568));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_623(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53568),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],(args)[2],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(53568));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_624(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(90982),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(90982));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_625(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90982),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(90982));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_626(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(45301),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(45301));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_627(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(45301),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],(args)[1],env1[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(45301));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_628(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(74923),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(74923));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_629(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(74923),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(74923));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_630(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(44452),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(44452));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_631(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(44452),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(44452));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_632(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(61826),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(61826));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_633(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(61826),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(61826));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_634(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21073),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21073));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_635(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21073),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[0],(args)[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21073));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_636(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70304),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70304));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_637(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70304),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70304));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_638(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(80494),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(80494));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_639(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(80494),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[0],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(80494));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_640(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2567),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2567));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_641(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2567),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2567));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_642(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(667),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(667));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_643(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(667),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[2],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[5]))))) && (((env1[1]) == (env1[3]))))) && (((env1[2]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(667));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_644(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33317),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33317));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_645(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33317),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[1],env1[0],(args)[2],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33317));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_646(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(30928),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(30928));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_647(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(30928),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(30928));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_648(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11024),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11024));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_649(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11024),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],env1[1],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11024));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_650(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19870),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19870));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_651(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_2_actual->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19870),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],(args)[2],env1[1],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19870));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_652(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(20342),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(20342));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_653(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20342),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(20342));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_654(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40936),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40936));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_655(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40936),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40936));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_656(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11329),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11329));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
if(!rel_13_store->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_13_store_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_657(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_13_store->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_13_store_op_ctxt,rel_13_store->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11329),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],(args)[2],env1[1],0,0}});
auto range = rel_13_store->equalRange_7(key,READ_OP_CONTEXT(rel_13_store_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11329));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_658(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(39077),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(39077));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_659(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39077),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[0],env1[1],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(39077));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_660(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36263),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36263));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_661(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36263),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36263));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_662(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40179),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40179));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_663(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40179),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40179));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_664(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(11),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(11));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
if(!rel_2_actual->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_2_actual_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_665(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_2_actual->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_2_actual_op_ctxt,rel_2_actual->createContext());
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
const Tuple<RamDomain,3> key({{RamDomain(11),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[0],(args)[1],(args)[2],0,0}});
auto range = rel_2_actual->equalRange_7(key,READ_OP_CONTEXT(rel_2_actual_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[4]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[0],env1[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(11));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_666(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(83758),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(83758));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_667(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(83758),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[1],env1[0],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(83758));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_668(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(59120),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(59120));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_669(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59120),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(59120));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_670(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78420),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78420));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_671(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78420),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78420));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_672(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64858),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64858));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_673(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64858),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64858));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_674(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(28441),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(28441));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_675(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(28441),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(28441));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_676(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47932),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47932));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_677(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47932),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47932));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_678(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40777),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40777));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_679(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40777),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40777));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_680(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(38959),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(38959));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_681(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(38959),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(38959));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_682(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(52193),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(52193));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_683(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(52193),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(52193));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_684(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(5063),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(5063));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_685(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5063),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],(args)[0],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[0]) == (env1[3]))))) && (((env1[1]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(5063));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_686(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63698),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63698));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_687(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63698),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63698));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_688(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(2),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(2));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
if(!rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
if(!rel_12_receiver_formal->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_689(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_14_pointsto_objcont->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(2),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[0],(args)[1],(args)[2],0,0}});
auto range = rel_14_pointsto_objcont->equalRange_7(key,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[4]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_690(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(53306),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(53306));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_691(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(53306),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(53306));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_692(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64812),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64812));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_693(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64812),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],env1[0],env1[0],(args)[1],env1[1],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64812));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_694(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(79085),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(79085));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_695(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79085),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(79085));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_696(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(35495),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(35495));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_697(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(35495),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],env1[1],(args)[2],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(35495));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_698(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43610),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43610));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_699(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43610),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43610));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_700(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(33581),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(33581));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_701(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(33581),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(33581));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_702(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(88964),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(88964));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_703(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(88964),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(88964));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_704(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41537),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41537));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_705(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41537),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[2],env1[1],env1[0],0,0,0,0}});
auto range = rel_3_assign->equalRange_15(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[5]))))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41537));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_706(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(6139),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(6139));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_707(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(6139),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[2],(args)[1],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[1]) == (env1[5]))))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(6139));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_708(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(66026),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(66026));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_709(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(66026),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(66026));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_710(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(0),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(0));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
if(!rel_8_load->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_load_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_711(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_8_load->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
const Tuple<RamDomain,3> key({{RamDomain(0),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[1],(args)[0],(args)[2],0,0}});
auto range = rel_8_load->equalRange_7(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[4]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_712(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(78281),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(78281));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_713(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(78281),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[0],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(78281));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_714(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34234),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34234));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_715(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34234),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],0,env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_27(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34234));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_716(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(48347),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(48347));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_717(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(48347),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(48347));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_718(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(36826),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(36826));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_719(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(36826),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(36826));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_720(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(19964),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(19964));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_721(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(19964),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(19964));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_722(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(70583),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(70583));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_723(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(70583),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(70583));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_724(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9423),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9423));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_725(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9423),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9423));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_726(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(59394),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(59394));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_727(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(59394),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(59394));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_728(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8227),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8227));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_729(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8227),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],0,0,(args)[2],0,0}});
auto range = rel_3_assign->equalRange_37(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8227));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[5]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_730(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22304),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22304));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[1],(args)[0],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_731(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22304),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],0,env1[0],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_45(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22304));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_732(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(4),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(4));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
if(!rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
if(!rel_12_receiver_formal->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_733(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_14_pointsto_objcont->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{(args)[1],(args)[0],(args)[2],0,0}});
auto range = rel_14_pointsto_objcont->equalRange_7(key,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[4]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[2],env1[0],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(4));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_734(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(21947),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(21947));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_735(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(21947),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(21947));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_736(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(82029),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(82029));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_737(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(82029),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(82029));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_738(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(79077),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(79077));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_739(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(79077),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(79077));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_740(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(4839),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(4839));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_741(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(4839),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],(args)[2],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[3]) == (env1[4]))))) && (((env1[0]) == (env1[5]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(4839));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_742(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(20846),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(20846));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_743(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20846),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(20846));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_744(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(10458),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(10458));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_745(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(10458),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[4]))))) && (((env1[0]) == (env1[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(10458));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_746(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(25015),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(25015));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_747(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(25015),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(25015));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_748(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(65996),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(65996));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_749(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(65996),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],0,env1[0],env1[1],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(65996));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_750(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(34638),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(34638));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_751(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(34638),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[1],env1[1],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(34638));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_752(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(27604),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(27604));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_753(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(27604),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],(args)[1],env1[0],env1[1],0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(27604));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_754(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(8),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(8));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
if(!rel_12_receiver_formal->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_755(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_12_receiver_formal->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_12_receiver_formal_op_ctxt,rel_12_receiver_formal->createContext());
const Tuple<RamDomain,3> key({{RamDomain(8),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{env1[1],(args)[0],0,0}});
auto range = rel_12_receiver_formal->equalRange_3(key,READ_OP_CONTEXT(rel_12_receiver_formal_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(8));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_756(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67769),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67769));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_757(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67769),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],0,env1[0],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_59(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[2]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67769));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_758(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(63016),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(63016));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_759(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(63016),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(63016));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_760(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(42257),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(42257));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_761(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(42257),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(42257));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_762(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(24992),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(24992));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_763(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(24992),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(24992));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_764(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(32795),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(32795));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_765(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(32795),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_63(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[7]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(32795));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_766(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(3548),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(3548));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_767(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(3548),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],0,(args)[1],(args)[2],0,0,0,0}});
auto range = rel_3_assign->equalRange_13(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[3]) == (env1[5]))))) && (((env1[2]) == (env1[4]))))) && (((env1[0]) == (env1[1]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(3548));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_768(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(41694),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(41694));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_769(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(41694),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(41694));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_770(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(64161),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(64161));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_771(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(64161),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[2],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],env1[1],(args)[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[3]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(64161));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_772(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(14576),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(14576));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
if(!rel_8_load->equalRange_7(Tuple<RamDomain,5>({{(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_8_load_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_773(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_8_load->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_8_load_op_ctxt,rel_8_load->createContext());
const Tuple<RamDomain,3> key({{RamDomain(14576),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[0],env1[1],(args)[2],0,0}});
auto range = rel_8_load->equalRange_7(key,READ_OP_CONTEXT(rel_8_load_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(14576));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_774(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(43687),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(43687));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[0],(args)[2],(args)[2],(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_775(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(43687),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[0],env1[1],env1[1],env1[0],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(43687));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_776(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(9),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(9));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_777(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_9_points_initial->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
const Tuple<RamDomain,3> key({{RamDomain(9),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],env1[1],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[3]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(9));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_778(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(7005),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(7005));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_779(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((!(rel_1_Rule->empty())) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(7005),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],(args)[1],(args)[2],0,0,0,0,0}});
auto range = rel_3_assign->equalRange_7(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env1 : range) {
if( ((((((((env1[7]) < ((args)[3]))) && (((env1[2]) == (env1[5]))))) && (((env1[1]) == (env1[3]))))) && (((env1[0]) == (env1[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(7005));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[6]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
return;
}
void subproof_780(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(22493),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(22493));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[1],(args)[0],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_781(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(22493),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[0],env1[0],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(22493));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_782(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(40917),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(40917));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_783(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(40917),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],0,env1[1],env1[0],0,0}});
auto range = rel_3_assign->equalRange_55(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(40917));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_784(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(67708),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(67708));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_785(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(67708),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(67708));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_786(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(90086),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(90086));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_787(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(90086),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(90086));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_788(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(47927),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(47927));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_789(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(47927),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[1],env1[1],env1[0],0,env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_23(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[5]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(47927));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_790(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(86220),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(86220));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[2],(args)[1],(args)[0],(args)[2],(args)[2],(args)[1],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
return;
}
void subproof_791(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(86220),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{(args)[2],env1[0],env1[1],0,0,env1[0],0,0}});
auto range = rel_3_assign->equalRange_39(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((((env2[7]) < ((args)[3]))) && (((env2[0]) == (env2[4]))))) && (((env2[0]) == (env2[3]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(86220));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_792(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(87963),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(87963));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[1],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_793(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(87963),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[1],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],env1[1],(args)[2],env1[0],env1[1],0,0,0}});
auto range = rel_3_assign->equalRange_31(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[5]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(87963));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_794(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(20685),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(20685));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[0],(args)[2],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[0],(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
return;
}
void subproof_795(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(20685),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[0],(args)[2],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[0],(args)[1],env1[1],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[1]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(20685));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env2[1]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_796(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(39726),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(39726));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
if(!rel_4_enclosing_type->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
if(!rel_3_assign->equalRange_63(Tuple<RamDomain,8>({{(args)[0],(args)[1],(args)[2],(args)[1],(args)[2],(args)[0],0,0}}),READ_OP_CONTEXT(rel_3_assign_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_797(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_4_enclosing_type->empty())))) && (!(rel_3_assign->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_4_enclosing_type_op_ctxt,rel_4_enclosing_type->createContext());
CREATE_OP_CONTEXT(rel_3_assign_op_ctxt,rel_3_assign->createContext());
const Tuple<RamDomain,3> key({{RamDomain(39726),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[0],0,0}});
auto range = rel_4_enclosing_type->equalRange_3(key,READ_OP_CONTEXT(rel_4_enclosing_type_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,8> key({{env1[1],env1[0],(args)[2],env1[0],0,env1[1],0,0}});
auto range = rel_3_assign->equalRange_47(key,READ_OP_CONTEXT(rel_3_assign_op_ctxt));
for(const auto& env2 : range) {
if( ((((env2[7]) < ((args)[3]))) && (((env2[2]) == (env2[4]))))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(39726));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env2[6]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[7]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
void subproof_798(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
if(!rel_1_Rule->equalRange_1(Tuple<RamDomain,3>({{RamDomain(5),0,0}}),READ_OP_CONTEXT(rel_1_Rule_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(0));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back(RamDomain(5));
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
if(!rel_9_points_initial->equalRange_3(Tuple<RamDomain,4>({{(args)[1],(args)[2],0,0}}),READ_OP_CONTEXT(rel_9_points_initial_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(1));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
}
{
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
if(!rel_14_pointsto_objcont->equalRange_7(Tuple<RamDomain,5>({{(args)[2],(args)[1],(args)[0],0,0}}),READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt)).empty()) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(2));
err.push_back(false);
}
}
{
std::lock_guard<std::mutex> guard(lock);
ret.push_back(0);
err.push_back(true);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
}
return;
}
void subproof_799(const std::vector<RamDomain>& args, std::vector<RamDomain>& ret, std::vector<bool>& err) {
std::mutex lock;
if(((((!(rel_1_Rule->empty())) && (!(rel_9_points_initial->empty())))) && (!(rel_14_pointsto_objcont->empty())))) {
{
CREATE_OP_CONTEXT(rel_1_Rule_op_ctxt,rel_1_Rule->createContext());
CREATE_OP_CONTEXT(rel_9_points_initial_op_ctxt,rel_9_points_initial->createContext());
CREATE_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt,rel_14_pointsto_objcont->createContext());
const Tuple<RamDomain,3> key({{RamDomain(5),0,0}});
auto range = rel_1_Rule->equalRange_1(key,READ_OP_CONTEXT(rel_1_Rule_op_ctxt));
for(const auto& env0 : range) {
if( ((env0[2]) < ((args)[3]))) {
const Tuple<RamDomain,4> key({{(args)[1],(args)[2],0,0}});
auto range = rel_9_points_initial->equalRange_3(key,READ_OP_CONTEXT(rel_9_points_initial_op_ctxt));
for(const auto& env1 : range) {
if( ((env1[3]) < ((args)[3]))) {
const Tuple<RamDomain,5> key({{env1[1],env1[0],(args)[0],0,0}});
auto range = rel_14_pointsto_objcont->equalRange_7(key,READ_OP_CONTEXT(rel_14_pointsto_objcont_op_ctxt));
for(const auto& env2 : range) {
if( ((env2[4]) < ((args)[3]))) {
std::lock_guard<std::mutex> guard(lock);
ret.push_back(RamDomain(5));
err.push_back(false);
ret.push_back(env0[1]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[2]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back(env2[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back(env2[2]);
err.push_back(false);
ret.push_back((args)[0]);
err.push_back(false);
ret.push_back(env1[0]);
err.push_back(false);
ret.push_back((args)[1]);
err.push_back(false);
ret.push_back(env1[1]);
err.push_back(false);
ret.push_back((args)[2]);
err.push_back(false);
ret.push_back(env0[2]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env1[3]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
ret.push_back(env2[4]);
err.push_back(false);
ret.push_back((args)[3]);
err.push_back(false);
}
}
}
}
}
}
}
}
return;
}
};
SouffleProgram *newInstance_souffle_small(){return new Sf_souffle_small;}
SymbolTable *getST_souffle_small(SouffleProgram *p){return &reinterpret_cast<Sf_souffle_small*>(p)->symTable;}

#ifdef __EMBEDDED_SOUFFLE__
class factory_Sf_souffle_small: public souffle::ProgramFactory {
SouffleProgram *newInstance() {
return new Sf_souffle_small();
};
public:
factory_Sf_souffle_small() : ProgramFactory("souffle_small"){}
};
static factory_Sf_souffle_small __factory_Sf_souffle_small_instance;
}
#else
}
int main(int argc, char** argv)
{
try{
souffle::CmdOptions opt(R"(rules.small.dl)",
R"(.)",
R"(.)",
false,
R"()",
1,
-1);
if (!opt.parse(argc,argv)) return 1;
#if defined(_OPENMP) 
omp_set_nested(true);

#endif
souffle::Sf_souffle_small obj;
obj.runAll(opt.getInputFileDir(), opt.getOutputFileDir(), opt.getStratumIndex());
explain(obj, false);
return 0;
} catch(std::exception &e) { souffle::SignalHandler::instance()->error(e.what());}
}

#endif
