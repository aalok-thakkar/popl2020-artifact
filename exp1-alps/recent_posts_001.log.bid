Bidirectional search is enabled
Maximum #rules for each IDB will be 2
Maximum #rules for programs will be 2
Using Templates: ./data/templates/recent_posts_001.tp
Number of templates: 0
filter-1 is enabled
augmentation distance: 3
chain1 is enabled

Relation *In

Relation *not_null

Relation Out

**Loading input is done: 1 ms.

Relation: Out(Company,Demand)
Stats of given templates: 
=== distance stats ===
Number of Templates: 0
Number of chain-1 like templates: 0
Number of chain-2 like templates: 0
Number of chain-3 like templates: 0


Relation: Out(Company,Demand)

before explore projection: candidates size: 0
explore projection for target: Out(Company,Demand)
after explore projection: candidates size: 3

before add filtering: candidates size: 3
try to extend with a filter for template: P0(v2,v1) :- P1(v0,v1,v2,v3).
add filter template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v0).
add filter template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v1).
add filter template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v2).
add filter template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v3).
try to extend with a filter for template: P0(v3,v1) :- P1(v0,v1,v2,v3).
add filter template: P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v0).
add filter template: P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v1).
add filter template: P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v2).
add filter template: P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v3).
try to extend with a filter for template: P0(v0,v1) :- P1(v0,v1).
add filter template: P0(v0,v1) :- P1(v0,v1),P2(v0).
add filter template: P0(v0,v1) :- P1(v0,v1),P2(v1).
after add filtering: candidates size: 13

before filtering by augmentation: candidates size: 13

after filtering: candidates size: 11
before deduplication, candidates size: 11
after deduplication, candidates size: 11
100 examples of candidates: 
P0(v2,v1) :- P1(v0,v1,v2,v3).
P0(v3,v1) :- P1(v0,v1,v2,v3).
P0(v0,v1) :- P1(v0,v1).
P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v0).
P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v1).
P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v2).
P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v3).
P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v0).
P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v3).
P0(v0,v1) :- P1(v0,v1),P2(v0).
P0(v0,v1) :- P1(v0,v1),P2(v1).

>> Template: P0(v2,v1) :- P1(v0,v1,v2,v3).,  matches: 1
>> Template: P0(v3,v1) :- P1(v0,v1,v2,v3).,  matches: 1
skip useless rule: Out(x0:Company,x1:Demand) :- Out(x0:Company,x1:Demand),  from template: P0(v0,v1) :- P1(v0,v1).
>> Template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v2).,  matches: 1
>> Template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v3).,  matches: 1
>> Template: P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v3).,  matches: 1
skip useless rule: Out(x0:Company,x1:Demand) :- Out(x0:Company,x1:Demand),not_null(x0:Company),  from template: P0(v0,v1) :- P1(v0,v1),P2(v0).
before deduplicate rules, matching size: 5
after deduplicate rules, matching size: 5

number of instantiated rules: 5
all matchings : 
0, Out(x2:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),
1, Out(x3:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),
2, Out(x2:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),not_null(x2:Company),
3, Out(x2:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),not_null(x3:Company),
4, Out(x3:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),not_null(x3:Company),
normalizing PO..
overall templates: 5
most general: 2
most specific: 3
independent: 0

**exploreCandidateRules is done: 7 ms.

query_space for Out: 15
true_label for Out: 6
overall_query_space: 15
overall_true_label: 6
erase useless rule: Out(x2:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),  from template: P0(v2,v1) :- P1(v0,v1,v2,v3).
erase useless rule: Out(x3:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),  from template: P0(v3,v1) :- P1(v0,v1,v2,v3).
erase useless rule: Out(x2:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),not_null(x2:Company),  from template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v2).
erase useless rule: Out(x2:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),not_null(x3:Company),  from template: P0(v2,v1) :- P1(v0,v1,v2,v3),P2(v3).
erase useless rule: Out(x3:Company,x1:Demand) :- In(x0:Inv,x1:Demand,x2:Company,x3:Company),not_null(x3:Company),  from template: P0(v3,v1) :- P1(v0,v1,v2,v3),P2(v3).
(Time_Measure) examine_each_IDBTR takes 2 ms, longest_run: 0 max_threads: 5
over estimated configs : 2
extractRules, tmpls.size = 2, res.size=0
Config: {1 Out(Company,Demand), },  number of programs: 0
extractRules, tmpls.size = 2, res.size=0
Config: {2 Out(Company,Demand), },  number of programs: 0
(Time_Measure) init_helper_efficient takes 0 ms, longest_run: 0 max_threads: 0
Gs.size = 0
over estimated configs : 2
extractRules, tmpls.size = 3, res.size=0
Config: {1 Out(Company,Demand), },  number of programs: 0
extractRules, tmpls.size = 3, res.size=0
Config: {2 Out(Company,Demand), },  number of programs: 0
(Time_Measure) init_helper_efficient takes 0 ms, longest_run: 0 max_threads: 0
Ss.size = 0
(Time_Measure) execute_one_round_helper takes 0 ms, longest_run: 0 max_threads: 0
(Time_Measure) execute_one_round_helper takes 0 ms, longest_run: 0 max_threads: 0
total_votes: 0

tuple stats: 
Gs: 
Ss: 
best distance: 1073741824
different votes: 0
Round 1 execution takes 0 ms.
converged at round: 1
remaining general programs: 0
remaining specific programs: 0
Refinement takes 0 ms.
End-to-End takes 2 ms.

**ALPS_end_to_end takes 9 ms.
