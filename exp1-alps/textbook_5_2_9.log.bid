Bidirectional search is enabled
Maximum #rules for each IDB will be 2
Maximum #rules for programs will be 3
Using Templates: ./data/templates/textbook_5_2_9.tp
Number of templates: 0
filter-1 is enabled
augmentation distance: 2
chain1 is enabled
chain3 is enabled

Relation *input1

Relation *isRed

Relation *isGreen

Relation *input2

Relation invent_sel

Relation *input3

Relation output

**Loading input is done: 1 ms.

Relation: output(sname)
Stats of given templates: 
=== distance stats ===
Number of Templates: 0
Number of chain-1 like templates: 0
Number of chain-2 like templates: 0
Number of chain-3 like templates: 0


Relation: invent_sel(part_id,color)
Stats of given templates: 
=== distance stats ===
Number of Templates: 0
Number of chain-1 like templates: 0
Number of chain-2 like templates: 0
Number of chain-3 like templates: 0


Relation: output(sname)

before explore projection: candidates size: 0
explore projection for target: output(sname)
after explore projection: candidates size: 2

before add filtering: candidates size: 2
try to extend with a filter for template: P0(v1) :- P1(v0,v1).
add filter template: P0(v1) :- P1(v0,v1),P2(v0).
add filter template: P0(v1) :- P1(v0,v1),P2(v1).
after add filtering: candidates size: 4

before explore chain-3: candidates size: 4

after explore chain-3: candidates size: 15

before filtering by augmentation: candidates size: 15
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 4, dis2: 4
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 4, dis2: 4
will remove: P0(v2) :- P1(v0,v1),P2(v0,v2),P3(v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 4, dis2: 4
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 5, dis2: 5
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 5, dis2: 5
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 4, dis2: 4
will remove: P0(v1) :- P1(v0,v1),P2(v0,v2),P3(v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 4, dis2: 4
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 4, dis2: 4
will remove: P0(v2) :- P1(v0,v1),P2(v0,v2),P3(v2).

after filtering: candidates size: 5
before deduplication, candidates size: 5
after deduplication, candidates size: 4
100 examples of candidates: 
P0(v1) :- P1(v0,v1).
P0(v0) :- P1(v0).
P0(v1) :- P1(v0,v1),P2(v0).
P0(v3) :- P1(v0,v1),P2(v2,v0),P3(v2,v3).

>> Template: P0(v1) :- P1(v0,v1).,  matches: 1
skip useless rule: output(x0:sname) :- output(x0:sname),  from template: P0(v0) :- P1(v0).
>> Template: P0(v3) :- P1(v0,v1),P2(v2,v0),P3(v2,v3).,  matches: 2
before deduplicate rules, matching size: 3
after deduplicate rules, matching size: 3

number of instantiated rules: 3
all matchings : 
0, output(x1:sname) :- input3(x0:supplier_key,x1:sname),
1, output(x3:sname) :- input1(x2:supplier_key,x0:part_id),input3(x2:supplier_key,x3:sname),invent_sel(x0:part_id,x1:color),
2, output(x3:sname) :- input1(x2:supplier_key,x0:part_id),input2(x0:part_id,x1:color),input3(x2:supplier_key,x3:sname),
normalizing PO..
overall templates: 2
most general: 1
most specific: 1
independent: 0
Relation: invent_sel(part_id,color)

before explore projection: candidates size: 0
explore projection for target: invent_sel(part_id,color)
after explore projection: candidates size: 2

before add filtering: candidates size: 2
try to extend with a filter for template: P0(v0,v1) :- P1(v0,v1).
add filter template: P0(v0,v1) :- P1(v0,v1),P2(v0).
add filter template: P0(v0,v1) :- P1(v0,v1),P2(v1).
try to extend with a filter for template: P0(v0,v1) :- P1(v0,v1).
add filter template: P0(v0,v1) :- P1(v0,v1),P2(v0).
add filter template: P0(v0,v1) :- P1(v0,v1),P2(v1).
after add filtering: candidates size: 6

before explore chain-3: candidates size: 6

after explore chain-3: candidates size: 48

before filtering by augmentation: candidates size: 48
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v2,v1).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v2,v1).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v2,v1).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 4, dis2: 4
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v2,v1).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).
P0(v0,v3) :- P1(v0,v1),P2(v1,v2),P3(v2,v3).
dis1: 5, dis2: 5
P0(v0,v3) :- P1(v0,v1),P3(v2,v3),P2(v1,v2).
dis1: 4, dis2: 4
P0(v0,v3) :- P2(v1,v2),P1(v0,v1),P3(v2,v3).
dis1: 3, dis2: 3
P0(v0,v3) :- P2(v1,v2),P3(v2,v3),P1(v0,v1).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P1(v0,v1),P2(v1,v2).
dis1: 3, dis2: 3
P0(v0,v3) :- P3(v2,v3),P2(v1,v2),P1(v0,v1).
dis1: 3, dis2: 3
will remove: P0(v1,v0) :- P1(v0),P2(v1,v0),P3(v1,v2).

after filtering: candidates size: 36
before deduplication, candidates size: 36
after deduplication, candidates size: 7
100 examples of candidates: 
P0(v0,v1) :- P1(v0,v1).
P0(v0,v1) :- P1(v0,v1),P2(v0).
P0(v0,v1) :- P1(v0,v1),P2(v1).
P0(v1,v3) :- P1(v0,v1),P2(v0,v2),P3(v2,v3).
P0(v1,v2) :- P1(v0,v1),P2(v1,v2),P3(v3,v2).
P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).

skip useless rule: invent_sel(x0:part_id,x1:color) :- invent_sel(x0:part_id,x1:color),  from template: P0(v0,v1) :- P1(v0,v1).
>> Template: P0(v0,v1) :- P1(v0,v1).,  matches: 1
skip useless rule: invent_sel(x0:part_id,x1:color) :- invent_sel(x0:part_id,x1:color),isRed(x1:color),  from template: P0(v0,v1) :- P1(v0,v1),P2(v1).
skip useless rule: invent_sel(x0:part_id,x1:color) :- invent_sel(x0:part_id,x1:color),isGreen(x1:color),  from template: P0(v0,v1) :- P1(v0,v1),P2(v1).
>> Template: P0(v0,v1) :- P1(v0,v1),P2(v1).,  matches: 2
>> Template: P0(v1,v3) :- P1(v0,v1),P2(v0,v2),P3(v2,v3).,  matches: 2
skip useless rule: invent_sel(x1:part_id,x2:color) :- input1(x0:supplier_key,x1:part_id),invent_sel(x1:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v1,v2) :- P1(v0,v1),P2(v1,v2),P3(v3,v2).
skip useless rule: invent_sel(x1:part_id,x2:color) :- input1(x0:supplier_key,x1:part_id),input2(x3:part_id,x2:color),invent_sel(x1:part_id,x2:color),  from template: P0(v1,v2) :- P1(v0,v1),P2(v1,v2),P3(v3,v2).
skip useless rule: invent_sel(x1:part_id,x2:color) :- input1(x0:supplier_key,x1:part_id),input2(x1:part_id,x2:color),input2(x3:part_id,x2:color),  from template: P0(v1,v2) :- P1(v0,v1),P2(v1,v2),P3(v3,v2).
>> Template: P0(v1,v2) :- P1(v0,v1),P2(v1,v2),P3(v3,v2).,  matches: 1
skip useless rule: invent_sel(x0:part_id,x2:color) :- invent_sel(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
skip useless rule: invent_sel(x0:part_id,x2:color) :- input2(x3:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
skip useless rule: invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x2:color),input2(x3:part_id,x2:color),invent_sel(x0:part_id,x1:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
skip useless rule: invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
skip useless rule: invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x1:color),input2(x3:part_id,x2:color),invent_sel(x0:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
skip useless rule: invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x1:color),input2(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
skip useless rule: invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x1:color),input2(x0:part_id,x2:color),input2(x3:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
>> Template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).,  matches: 1
>> Template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).,  matches: 8
before deduplicate rules, matching size: 15
after deduplicate rules, matching size: 15

number of instantiated rules: 15
all matchings : 
0, invent_sel(x0:part_id,x1:color) :- input2(x0:part_id,x1:color),
1, invent_sel(x0:part_id,x1:color) :- input2(x0:part_id,x1:color),isRed(x1:color),
2, invent_sel(x0:part_id,x1:color) :- input2(x0:part_id,x1:color),isGreen(x1:color),
3, invent_sel(x1:part_id,x3:color) :- input1(x0:supplier_key,x1:part_id),input1(x0:supplier_key,x2:part_id),invent_sel(x2:part_id,x3:color),
4, invent_sel(x1:part_id,x3:color) :- input1(x0:supplier_key,x1:part_id),input1(x0:supplier_key,x2:part_id),input2(x2:part_id,x3:color),
5, invent_sel(x1:part_id,x2:color) :- input1(x0:supplier_key,x1:part_id),input2(x1:part_id,x2:color),invent_sel(x3:part_id,x2:color),
6, invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x3:part_id,x2:color),
7, invent_sel(x3:part_id,x1:color) :- invent_sel(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),
8, invent_sel(x3:part_id,x1:color) :- input2(x3:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),
9, invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x3:part_id,x2:color),
10, invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x2:color),input2(x3:part_id,x2:color),invent_sel(x0:part_id,x1:color),
11, invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),
12, invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),input2(x3:part_id,x2:color),invent_sel(x0:part_id,x2:color),
13, invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),input2(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),
14, invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),input2(x0:part_id,x2:color),input2(x3:part_id,x2:color),
normalizing PO..
P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).  vs  P0(v0,v1) :- P1(v0,v1).
overall templates: 6
most general: 2
most specific: 2
independent: 0

**exploreCandidateRules is done: 38 ms.

query_space for output: 10
true_label for output: 7
query_space for invent_sel: 24
true_label for invent_sel: 0
overall_query_space: 34
overall_true_label: 7
erase useless rule: output(x1:sname) :- input3(x0:supplier_key,x1:sname),  from template: P0(v1) :- P1(v0,v1).
erase useless rule: output(x3:sname) :- input1(x2:supplier_key,x0:part_id),input3(x2:supplier_key,x3:sname),invent_sel(x0:part_id,x1:color),  from template: P0(v3) :- P1(v0,v1),P2(v2,v0),P3(v2,v3).
erase useless rule: output(x3:sname) :- input1(x2:supplier_key,x0:part_id),input2(x0:part_id,x1:color),input3(x2:supplier_key,x3:sname),  from template: P0(v3) :- P1(v0,v1),P2(v2,v0),P3(v2,v3).
erase useless rule: invent_sel(x0:part_id,x1:color) :- input2(x0:part_id,x1:color),  from template: P0(v0,v1) :- P1(v0,v1).
erase useless rule: invent_sel(x0:part_id,x1:color) :- input2(x0:part_id,x1:color),isRed(x1:color),  from template: P0(v0,v1) :- P1(v0,v1),P2(v1).
erase useless rule: invent_sel(x0:part_id,x1:color) :- input2(x0:part_id,x1:color),isGreen(x1:color),  from template: P0(v0,v1) :- P1(v0,v1),P2(v1).
erase useless rule: invent_sel(x1:part_id,x3:color) :- input1(x0:supplier_key,x1:part_id),input1(x0:supplier_key,x2:part_id),invent_sel(x2:part_id,x3:color),  from template: P0(v1,v3) :- P1(v0,v1),P2(v0,v2),P3(v2,v3).
erase useless rule: invent_sel(x1:part_id,x3:color) :- input1(x0:supplier_key,x1:part_id),input1(x0:supplier_key,x2:part_id),input2(x2:part_id,x3:color),  from template: P0(v1,v3) :- P1(v0,v1),P2(v0,v2),P3(v2,v3).
erase useless rule: invent_sel(x1:part_id,x2:color) :- input1(x0:supplier_key,x1:part_id),input2(x1:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v1,v2) :- P1(v0,v1),P2(v1,v2),P3(v3,v2).
erase useless rule: invent_sel(x0:part_id,x2:color) :- input2(x0:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x3:part_id,x2:color),  from template: P0(v0,v2) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- invent_sel(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x3:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x2:color),invent_sel(x0:part_id,x1:color),invent_sel(x3:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x2:color),input2(x3:part_id,x2:color),invent_sel(x0:part_id,x1:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),invent_sel(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),input2(x3:part_id,x2:color),invent_sel(x0:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),input2(x0:part_id,x2:color),invent_sel(x3:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
erase useless rule: invent_sel(x3:part_id,x1:color) :- input2(x0:part_id,x1:color),input2(x0:part_id,x2:color),input2(x3:part_id,x2:color),  from template: P0(v3,v1) :- P1(v0,v1),P2(v0,v2),P3(v3,v2).
(Time_Measure) examine_each_IDBTR takes 45 ms, longest_run: 0 max_threads: 18
over estimated configs : 3
extractRules, tmpls.size = 1, res.size=0
extractRules, tmpls.size = 2, res.size=0
Config: {1 output(sname), 1 invent_sel(part_id,color), },  number of programs: 0
extractRules, tmpls.size = 1, res.size=0
extractRules, tmpls.size = 2, res.size=0
Config: {1 output(sname), 2 invent_sel(part_id,color), },  number of programs: 0
extractRules, tmpls.size = 1, res.size=0
extractRules, tmpls.size = 2, res.size=0
Config: {2 output(sname), 1 invent_sel(part_id,color), },  number of programs: 0
(Time_Measure) init_helper_efficient takes 0 ms, longest_run: 0 max_threads: 0
Gs.size = 0
over estimated configs : 3
extractRules, tmpls.size = 1, res.size=0
extractRules, tmpls.size = 2, res.size=0
Config: {1 output(sname), 1 invent_sel(part_id,color), },  number of programs: 0
extractRules, tmpls.size = 1, res.size=0
extractRules, tmpls.size = 2, res.size=0
Config: {1 output(sname), 2 invent_sel(part_id,color), },  number of programs: 0
extractRules, tmpls.size = 1, res.size=0
extractRules, tmpls.size = 2, res.size=0
Config: {2 output(sname), 1 invent_sel(part_id,color), },  number of programs: 0
(Time_Measure) init_helper_efficient takes 0 ms, longest_run: 0 max_threads: 0
Ss.size = 0
(Time_Measure) execute_one_round_helper takes 0 ms, longest_run: 0 max_threads: 0
(Time_Measure) execute_one_round_helper takes 0 ms, longest_run: 0 max_threads: 0
total_votes: 0

tuple stats: 
Gs: 
Ss: 
best distance: 1073741824
different votes: 0
Round 1 execution takes 0 ms.
converged at round: 1
remaining general programs: 0
remaining specific programs: 0
Refinement takes 0 ms.
End-to-End takes 45 ms.

**ALPS_end_to_end takes 84 ms.
